package mavlink

import (
	"sync"
)

type Multicast struct {
	sync.Mutex
	listeners []chan []byte
}

func (m *Multicast) register() chan []byte {
	data := make(chan []byte)
	m.Lock()
	defer m.Unlock()
	m.listeners = append(m.listeners, data)
	return data
}

func (m *Multicast) notify(buffer []byte) {
	m.Lock()
	defer m.Unlock()
	for _, data := range m.listeners {
		data <- buffer
	}
}

func (m *Multicast) clear(data chan []byte) {
	m.Lock()
	defer m.Unlock()
	for i, d := range m.listeners {
		if d == data {
			m.listeners = append(m.listeners[:i], m.listeners[i+1:]...)
			close(data)
			return
		}
	}
}

func (m *Multicast) close() {
	m.Lock()
	defer m.Unlock()
	for _, d := range m.listeners {
		close(d)
	}
	m.listeners = m.listeners[:0:0]
}
