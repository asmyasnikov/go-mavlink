//go:generate templify constants.template
//go:generate templify decoder.template
//go:generate templify dialect.template
//go:generate templify dialectSlice.template
//go:generate templify message.template
//go:generate templify packet.template
//go:generate templify parser.template
//go:generate templify version.template
//go:generate templify x25.template

package main

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/iancoleman/strcase"
)

const (
	generatedHeader = "// Code generated by go-mavlink/mavgen\n// DO NOT EDIT!\n\n"
)

var (
	templates = map[string](func() string){
		"constants":    constantsTemplate,
		"decoder":      decoderTemplate,
		"dialect":      dialectTemplate,
		"dialectSlice": dialectSliceTemplate,
		"message":      messageTemplate,
		"packet":       packetTemplate,
		"parser":       parserTemplate,
		"version":      versionTemplate,
		"x25":          x25Template,
	}
)

// helper to remove the extension from the base name
func baseName(s string) string {
	return strings.TrimSuffix(filepath.Base(s), filepath.Ext(s))
}

func findOutFile(scheme string) string {
	if *outfile == "" {
		*outfile = "dialect" + UpperCamelCase(baseName(scheme)) + ".go"
	}

	dir, err := os.Getwd()
	if err != nil {
		log.Fatal("Getwd(): ", err)
	}

	return filepath.Join(dir, *outfile)
}

func generateDialect(schemeFile string) (*string, *string, error) {
	scheme, err := os.Open(schemeFile)
	if err != nil {
		return nil, nil, err
	}
	defer scheme.Close()

	d, err := ParseDialect(scheme, baseName(schemeFile))
	if err != nil {
		return nil, nil, err
	}

	dialectFileName := findOutFile(schemeFile)

	dialectFile, err := os.Create(dialectFileName)
	if err != nil {
		return nil, nil, err
	}
	defer dialectFile.Close()

	if err := d.GenerateGo(dialectFile); err != nil {
		return nil, nil, err
	}

	dialectName := "Dialect" + strcase.ToCamel(d.Name)

	return &dialectFileName, &dialectName, nil
}

func generateCode(dialectDir string, data templateData, templateName string, tmpl string) error {
	t, err := template.New(templateName).Parse(tmpl)

	if err != nil {
		return err
	}

	file, err := os.Create(dialectDir + templateName + ".go")
	if err != nil {
		return err
	}
	defer file.Close()

	n, err := file.Write([]byte(generatedHeader))
	if err != nil {
		return err
	} else if n < len(generatedHeader) {
		return errors.New("couldn't write NO-EDIT header")
	}

	var buffer bytes.Buffer
	if err := t.Execute(&buffer, data); err != nil {
		return err
	}
	formatted, err := format.Source(buffer.Bytes())
	if err != nil {
		log.Fatal("couldn't format generated "+templateName+".go: ", err)
		fmt.Print(buffer.Bytes())
		formatted = buffer.Bytes()
	}
	n, err = file.Write(formatted)
	if err != nil {
		return err
	} else if n < len(formatted) {
		return errors.New("couldn't write body of " + templateName + ".go")
	}
	return nil
}

func generateCommons(dialectDir string, data templateData) error {
	for k, v := range templates {
		err := generateCode(dialectDir, data, k, v())
		if err != nil {
			return err
		}
	}
	return nil
}
