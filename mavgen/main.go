package main

//go:generate go-bindata -nometadata -nocompress -nomemcopy -o generated_assets.go ../mavlink/

import (
	"bytes"
	"flag"
	"log"
	"os"
	"path/filepath"
	"strings"
	"github.com/iancoleman/strcase"
)

var (
	infile          = flag.String("f", "", "mavlink definition file input")
	outfile         = flag.String("o", "", "output file name; default input.go")
	packetmode      = flag.Bool("p", false, "packet mode. if set mavgen will be create nessesary go-sources")
)

const (
	generatedHeader = "// Code generated by go-mavlink/mavgen\n// DO NOT EDIT!\n\n"
)

func main() {
	log.SetFlags(0)
	log.SetPrefix("mavgen: ")
	flag.Parse()

	fin, err := os.Open(*infile)
	if err != nil {
		log.Fatal("couldn't open input: ", err)
	}
	defer fin.Close()

	d, err := ParseDialect(fin, baseName(*infile))
	if err != nil {
		log.Fatal("parse fail: ", err)
	}

	dialectFileName := findOutFile()

	dialectFile, err := os.Create(dialectFileName)
	if err != nil {
		log.Fatal("couldn't open output: ", err)
	}
	defer dialectFile.Close()

	dialectFile.Write([]byte(generatedHeader))

	if err := d.GenerateGo(dialectFile); err != nil {
		log.Fatal("couldn't write to output: ", err)
	}
	if *packetmode {
		dialectDir := filepath.Dir(dialectFileName) + string(filepath.Separator)

		message, err := MavlinkMessageGoBytes()
		if err != nil {
			log.Fatal("couldn't get message template: ", err)
		}

		messageFile, err := os.Create(dialectDir + "message.go")
		if err != nil {
			log.Fatal("couldn't open output: ", err)
		}
		defer messageFile.Close()

		messageFile.Write([]byte(generatedHeader))
		for _, l := range bytes.Split(message, []byte("\n")){
			line := string(l) + "\n";
			if !strings.Contains(line, "//go:generate") {
				nm, err := messageFile.Write([]byte(line))
				if err == nil && nm != len(line) {
					log.Fatal("error on write line '%s' to file message.go: %s", string(line), err)
				}
			}
		}

		commonDialect, err := MavlinkDialectGoBytes()
		if err != nil {
			log.Fatal("couldn't get dialect template: ", err)
		}

		commonDialectFile, err := os.Create(dialectDir + "dialect.go")
		if err != nil {
			log.Fatal("couldn't open output: ", err)
		}
		defer commonDialectFile.Close()

		commonDialectFile.Write([]byte(generatedHeader))
		nd, err := commonDialectFile.Write(commonDialect)
		if err == nil && nd != len(commonDialect) {
			log.Fatal("error on write dialect.go: ", err)
		}

		defaultDialectFile, err := os.Create(dialectDir + "dialect_default.go")
		if err != nil {
			log.Fatal("couldn't open output: ", err)
		}
		defer defaultDialectFile.Close()

		defaultDialectFile.Write([]byte(generatedHeader+"package mavlink\n\nvar DialectDefault = Dialect"+strcase.ToCamel(d.Name)+"\n"))
	}
}

// helper to remove the extension from the base name
func baseName(s string) string {
	return strings.TrimSuffix(filepath.Base(s), filepath.Ext(s))
}

func findOutFile() string {
	if *outfile == "" {
		*outfile = strings.ToLower(baseName(*infile)) + ".go"
	}

	dir, err := os.Getwd()
	if err != nil {
		log.Fatal("Getwd(): ", err)
	}

	return filepath.Join(dir, strings.ToLower(*outfile))
}
