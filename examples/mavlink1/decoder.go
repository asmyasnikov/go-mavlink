// Code generated by go-mavlink/mavgen
// DO NOT EDIT!

package mavlink

import (
	"time"
)

// Decoder struct provide decoding processor
type Decoder struct {
	Multicast Multicast
	data      chan []byte
	done      chan bool
	decoded   chan *Packet
}

func (d *Decoder) PushData(data []byte) {
	d.data <- data
}

func (d *Decoder) NextPacket(duration time.Duration) *Packet {
	select {
	case packet := <-d.decoded:
		return packet
	case <-time.After(duration):
		return nil
	}
}

func (d *Decoder) Stop() {
	d.done <- true
	d.Multicast.Lock()
	for _, v := range d.Multicast.listeners {
		v <- true
	}
	d.Multicast.Unlock()
}

// NewChannelDecoder function create decoder instance with default dialect
func NewChannelDecoder() *Decoder {
	d := &Decoder{
		Multicast: NewMulticast(),
		data:      make(chan []byte, 1024),
		done:      make(chan bool),
		decoded:   make(chan *Packet),
	}
	go func() {
		defer func() {
			close(d.done)
			close(d.data)
		}()
		for {
			select {
			case buffer, ok := <-d.data:
				if !ok {
					return
				}
				d.Multicast.notify(buffer)
				for i, c := range buffer {
					if c == magicNumber {
						done := make(chan bool)
						newBytes := d.Multicast.register(done)
						go func() {
							defer d.Multicast.clear(newBytes)
							var parser Parser
							for {
								select {
								case buffer, ok := <-newBytes:
									if !ok {
										return
									}
									for _, c := range buffer {
										packet, err := parser.parseChar(c)
										if err != nil {
											return
										} else if packet != nil {
											d.decoded <- packet
											return
										}
									}
								case <-done:
									return
								}
							}
						}()
						newBytes <- buffer[i:]
					}
				}
			case <-d.done:
				d.Stop()
				return
			}
		}
	}()
	return d
}
