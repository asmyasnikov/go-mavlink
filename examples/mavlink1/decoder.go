// Code generated by go-mavlink/mavgen
// DO NOT EDIT!

package mavlink

import (
	"time"
)

// Decoder struct provide decoding processor
type Decoder struct {
	multicast Multicast
	data      chan []byte
	decoded   chan *Packet
}

func (d *Decoder) PushData(data []byte) {
	data = append(data[:0:0], data...)
	d.data <- data
}

func (d *Decoder) NextPacket(duration time.Duration) *Packet {
	select {
	case packet, ok := <-d.decoded:
		if ok {
			return packet
		}
		return nil
	case <-time.After(duration):
		return nil
	}
}

// Stop make safely stop of decoder
func (d *Decoder) Stop() {
	close(d.data)
}

// NewChannelDecoder function create decoder instance with default dialect
func NewChannelDecoder() *Decoder {
	d := &Decoder{
		data:    make(chan []byte, 256),
		decoded: make(chan *Packet, 256),
	}
	go func() {
		for {
			buffer, ok := <-d.data
			if !ok {
				d.multicast.close()
				close(d.decoded)
				return
			}
			d.multicast.notify(buffer)
			for i, c := range buffer {
				if c == magicNumber {
					newBytes := d.multicast.register()
					go func() {
						defer d.multicast.clear(newBytes)
						var parser Parser
						for {
							buffer, ok := <-newBytes
							if !ok {
								return
							}
							for _, c := range buffer {
								packet, err := parser.parseChar(c)
								if err != nil {
									return
								} else if packet != nil {
									d.decoded <- packet
									return
								}
							}
						}
					}()
					newBytes <- buffer[i:]
				}
			}
		}
	}()
	return d
}
