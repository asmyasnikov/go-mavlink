// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package all

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll(in *jlexer.Lexer, out *WindCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "WindX":
			out.WindX = float32(in.Float32())
		case "WindY":
			out.WindY = float32(in.Float32())
		case "WindZ":
			out.WindZ = float32(in.Float32())
		case "VarHoriz":
			out.VarHoriz = float32(in.Float32())
		case "VarVert":
			out.VarVert = float32(in.Float32())
		case "WindAlt":
			out.WindAlt = float32(in.Float32())
		case "HorizAccuracy":
			out.HorizAccuracy = float32(in.Float32())
		case "VertAccuracy":
			out.VertAccuracy = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll(out *jwriter.Writer, in WindCov) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.WindX != 0 {
		const prefix string = ",\"WindX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.WindX))
	}
	if in.WindY != 0 {
		const prefix string = ",\"WindY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.WindY))
	}
	if in.WindZ != 0 {
		const prefix string = ",\"WindZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.WindZ))
	}
	if in.VarHoriz != 0 {
		const prefix string = ",\"VarHoriz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.VarHoriz))
	}
	if in.VarVert != 0 {
		const prefix string = ",\"VarVert\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.VarVert))
	}
	if in.WindAlt != 0 {
		const prefix string = ",\"WindAlt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.WindAlt))
	}
	if in.HorizAccuracy != 0 {
		const prefix string = ",\"HorizAccuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.HorizAccuracy))
	}
	if in.VertAccuracy != 0 {
		const prefix string = ",\"VertAccuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.VertAccuracy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WindCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WindCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WindCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WindCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll1(in *jlexer.Lexer, out *Wind) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Direction":
			out.Direction = float32(in.Float32())
		case "Speed":
			out.Speed = float32(in.Float32())
		case "SpeedZ":
			out.SpeedZ = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll1(out *jwriter.Writer, in Wind) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Direction != 0 {
		const prefix string = ",\"Direction\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Direction))
	}
	if in.Speed != 0 {
		const prefix string = ",\"Speed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Speed))
	}
	if in.SpeedZ != 0 {
		const prefix string = ",\"SpeedZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.SpeedZ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Wind) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Wind) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Wind) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Wind) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll1(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll2(in *jlexer.Lexer, out *VisionSpeedEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll2(out *jwriter.Writer, in VisionSpeedEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Usec != 0 {
		const prefix string = ",\"Usec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisionSpeedEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisionSpeedEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisionSpeedEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisionSpeedEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll2(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll3(in *jlexer.Lexer, out *VisionPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll3(out *jwriter.Writer, in VisionPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Usec != 0 {
		const prefix string = ",\"Usec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisionPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisionPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisionPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisionPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll3(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll4(in *jlexer.Lexer, out *ViconPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll4(out *jwriter.Writer, in ViconPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Usec != 0 {
		const prefix string = ",\"Usec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ViconPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ViconPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ViconPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ViconPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll4(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll5(in *jlexer.Lexer, out *Vibration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "VibrationX":
			out.VibrationX = float32(in.Float32())
		case "VibrationY":
			out.VibrationY = float32(in.Float32())
		case "VibrationZ":
			out.VibrationZ = float32(in.Float32())
		case "Clipping0":
			out.Clipping0 = uint32(in.Uint32())
		case "Clipping1":
			out.Clipping1 = uint32(in.Uint32())
		case "Clipping2":
			out.Clipping2 = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll5(out *jwriter.Writer, in Vibration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.VibrationX != 0 {
		const prefix string = ",\"VibrationX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.VibrationX))
	}
	if in.VibrationY != 0 {
		const prefix string = ",\"VibrationY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.VibrationY))
	}
	if in.VibrationZ != 0 {
		const prefix string = ",\"VibrationZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.VibrationZ))
	}
	if in.Clipping0 != 0 {
		const prefix string = ",\"Clipping0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Clipping0))
	}
	if in.Clipping1 != 0 {
		const prefix string = ",\"Clipping1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Clipping1))
	}
	if in.Clipping2 != 0 {
		const prefix string = ",\"Clipping2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Clipping2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vibration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vibration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vibration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vibration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll5(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll6(in *jlexer.Lexer, out *VfrHud) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Airspeed":
			out.Airspeed = float32(in.Float32())
		case "Groundspeed":
			out.Groundspeed = float32(in.Float32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Climb":
			out.Climb = float32(in.Float32())
		case "Heading":
			out.Heading = int16(in.Int16())
		case "Throttle":
			out.Throttle = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll6(out *jwriter.Writer, in VfrHud) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Airspeed != 0 {
		const prefix string = ",\"Airspeed\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Airspeed))
	}
	if in.Groundspeed != 0 {
		const prefix string = ",\"Groundspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Groundspeed))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Alt))
	}
	if in.Climb != 0 {
		const prefix string = ",\"Climb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Climb))
	}
	if in.Heading != 0 {
		const prefix string = ",\"Heading\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Heading))
	}
	if in.Throttle != 0 {
		const prefix string = ",\"Throttle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Throttle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VfrHud) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VfrHud) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VfrHud) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VfrHud) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll6(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll7(in *jlexer.Lexer, out *V2Extension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MessageType":
			out.MessageType = uint16(in.Uint16())
		case "TargetNetwork":
			out.TargetNetwork = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll7(out *jwriter.Writer, in V2Extension) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MessageType != 0 {
		const prefix string = ",\"MessageType\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.MessageType))
	}
	if in.TargetNetwork != 0 {
		const prefix string = ",\"TargetNetwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetNetwork))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"Payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v V2Extension) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v V2Extension) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *V2Extension) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *V2Extension) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll7(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll8(in *jlexer.Lexer, out *UalbertaSysStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Mode":
			out.Mode = uint8(in.Uint8())
		case "NavMode":
			out.NavMode = uint8(in.Uint8())
		case "Pilot":
			out.Pilot = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll8(out *jwriter.Writer, in UalbertaSysStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Mode != 0 {
		const prefix string = ",\"Mode\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.Mode))
	}
	if in.NavMode != 0 {
		const prefix string = ",\"NavMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.NavMode))
	}
	if in.Pilot != 0 {
		const prefix string = ",\"Pilot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Pilot))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UalbertaSysStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UalbertaSysStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UalbertaSysStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UalbertaSysStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll8(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll9(in *jlexer.Lexer, out *Timesync) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Tc1":
			out.Tc1 = int64(in.Int64())
		case "Ts1":
			out.Ts1 = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll9(out *jwriter.Writer, in Timesync) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Tc1 != 0 {
		const prefix string = ",\"Tc1\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Tc1))
	}
	if in.Ts1 != 0 {
		const prefix string = ",\"Ts1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ts1))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Timesync) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Timesync) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Timesync) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Timesync) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll9(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll10(in *jlexer.Lexer, out *TerrainRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Mask":
			out.Mask = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "GridSpacing":
			out.GridSpacing = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll10(out *jwriter.Writer, in TerrainRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Mask != 0 {
		const prefix string = ",\"Mask\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Mask))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.GridSpacing != 0 {
		const prefix string = ",\"GridSpacing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.GridSpacing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll10(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll11(in *jlexer.Lexer, out *TerrainReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "TerrainHeight":
			out.TerrainHeight = float32(in.Float32())
		case "CurrentHeight":
			out.CurrentHeight = float32(in.Float32())
		case "Spacing":
			out.Spacing = uint16(in.Uint16())
		case "Pending":
			out.Pending = uint16(in.Uint16())
		case "Loaded":
			out.Loaded = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll11(out *jwriter.Writer, in TerrainReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.TerrainHeight != 0 {
		const prefix string = ",\"TerrainHeight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.TerrainHeight))
	}
	if in.CurrentHeight != 0 {
		const prefix string = ",\"CurrentHeight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.CurrentHeight))
	}
	if in.Spacing != 0 {
		const prefix string = ",\"Spacing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Spacing))
	}
	if in.Pending != 0 {
		const prefix string = ",\"Pending\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Pending))
	}
	if in.Loaded != 0 {
		const prefix string = ",\"Loaded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Loaded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll11(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll12(in *jlexer.Lexer, out *TerrainData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "GridSpacing":
			out.GridSpacing = uint16(in.Uint16())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int16, 0, 32)
					} else {
						out.Data = []int16{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int16
					v4 = int16(in.Int16())
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Gridbit":
			out.Gridbit = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll12(out *jwriter.Writer, in TerrainData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.GridSpacing != 0 {
		const prefix string = ",\"GridSpacing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.GridSpacing))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int16(int16(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Gridbit != 0 {
		const prefix string = ",\"Gridbit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Gridbit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll12(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll13(in *jlexer.Lexer, out *TerrainCheck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll13(out *jwriter.Writer, in TerrainCheck) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainCheck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainCheck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainCheck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainCheck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll13(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll14(in *jlexer.Lexer, out *SystemTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUnixUsec":
			out.TimeUnixUsec = uint64(in.Uint64())
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll14(out *jwriter.Writer, in SystemTime) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUnixUsec != 0 {
		const prefix string = ",\"TimeUnixUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUnixUsec))
	}
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TimeBootMs))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SystemTime) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SystemTime) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SystemTime) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SystemTime) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll14(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll15(in *jlexer.Lexer, out *SysStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OnboardControlSensorsPresent":
			out.OnboardControlSensorsPresent = MAV_SYS_STATUS_SENSOR(in.Int())
		case "OnboardControlSensorsEnabled":
			out.OnboardControlSensorsEnabled = MAV_SYS_STATUS_SENSOR(in.Int())
		case "OnboardControlSensorsHealth":
			out.OnboardControlSensorsHealth = MAV_SYS_STATUS_SENSOR(in.Int())
		case "Load":
			out.Load = uint16(in.Uint16())
		case "VoltageBattery":
			out.VoltageBattery = uint16(in.Uint16())
		case "CurrentBattery":
			out.CurrentBattery = int16(in.Int16())
		case "DropRateComm":
			out.DropRateComm = uint16(in.Uint16())
		case "ErrorsComm":
			out.ErrorsComm = uint16(in.Uint16())
		case "ErrorsCount1":
			out.ErrorsCount1 = uint16(in.Uint16())
		case "ErrorsCount2":
			out.ErrorsCount2 = uint16(in.Uint16())
		case "ErrorsCount3":
			out.ErrorsCount3 = uint16(in.Uint16())
		case "ErrorsCount4":
			out.ErrorsCount4 = uint16(in.Uint16())
		case "BatteryRemaining":
			out.BatteryRemaining = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll15(out *jwriter.Writer, in SysStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OnboardControlSensorsPresent != 0 {
		const prefix string = ",\"OnboardControlSensorsPresent\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.OnboardControlSensorsPresent))
	}
	if in.OnboardControlSensorsEnabled != 0 {
		const prefix string = ",\"OnboardControlSensorsEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OnboardControlSensorsEnabled))
	}
	if in.OnboardControlSensorsHealth != 0 {
		const prefix string = ",\"OnboardControlSensorsHealth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OnboardControlSensorsHealth))
	}
	if in.Load != 0 {
		const prefix string = ",\"Load\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Load))
	}
	if in.VoltageBattery != 0 {
		const prefix string = ",\"VoltageBattery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.VoltageBattery))
	}
	if in.CurrentBattery != 0 {
		const prefix string = ",\"CurrentBattery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.CurrentBattery))
	}
	if in.DropRateComm != 0 {
		const prefix string = ",\"DropRateComm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.DropRateComm))
	}
	if in.ErrorsComm != 0 {
		const prefix string = ",\"ErrorsComm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ErrorsComm))
	}
	if in.ErrorsCount1 != 0 {
		const prefix string = ",\"ErrorsCount1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ErrorsCount1))
	}
	if in.ErrorsCount2 != 0 {
		const prefix string = ",\"ErrorsCount2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ErrorsCount2))
	}
	if in.ErrorsCount3 != 0 {
		const prefix string = ",\"ErrorsCount3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ErrorsCount3))
	}
	if in.ErrorsCount4 != 0 {
		const prefix string = ",\"ErrorsCount4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ErrorsCount4))
	}
	if in.BatteryRemaining != 0 {
		const prefix string = ",\"BatteryRemaining\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.BatteryRemaining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SysStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SysStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SysStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SysStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll15(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll16(in *jlexer.Lexer, out *Statustext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Severity":
			out.Severity = MAV_SEVERITY(in.Int())
		case "Text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll16(out *jwriter.Writer, in Statustext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Severity != 0 {
		const prefix string = ",\"Severity\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Severity))
	}
	if in.Text != "" {
		const prefix string = ",\"Text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Statustext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Statustext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Statustext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Statustext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll16(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll17(in *jlexer.Lexer, out *Simstate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lng":
			out.Lng = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll17(out *jwriter.Writer, in Simstate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zacc))
	}
	if in.Xgyro != 0 {
		const prefix string = ",\"Xgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xgyro))
	}
	if in.Ygyro != 0 {
		const prefix string = ",\"Ygyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ygyro))
	}
	if in.Zgyro != 0 {
		const prefix string = ",\"Zgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zgyro))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lng != 0 {
		const prefix string = ",\"Lng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lng))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Simstate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Simstate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Simstate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Simstate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll17(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll18(in *jlexer.Lexer, out *SimState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Q1":
			out.Q1 = float32(in.Float32())
		case "Q2":
			out.Q2 = float32(in.Float32())
		case "Q3":
			out.Q3 = float32(in.Float32())
		case "Q4":
			out.Q4 = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Lat":
			out.Lat = float32(in.Float32())
		case "Lon":
			out.Lon = float32(in.Float32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "StdDevHorz":
			out.StdDevHorz = float32(in.Float32())
		case "StdDevVert":
			out.StdDevVert = float32(in.Float32())
		case "Vn":
			out.Vn = float32(in.Float32())
		case "Ve":
			out.Ve = float32(in.Float32())
		case "Vd":
			out.Vd = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll18(out *jwriter.Writer, in SimState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Q1 != 0 {
		const prefix string = ",\"Q1\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Q1))
	}
	if in.Q2 != 0 {
		const prefix string = ",\"Q2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Q2))
	}
	if in.Q3 != 0 {
		const prefix string = ",\"Q3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Q3))
	}
	if in.Q4 != 0 {
		const prefix string = ",\"Q4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Q4))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zacc))
	}
	if in.Xgyro != 0 {
		const prefix string = ",\"Xgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xgyro))
	}
	if in.Ygyro != 0 {
		const prefix string = ",\"Ygyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ygyro))
	}
	if in.Zgyro != 0 {
		const prefix string = ",\"Zgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zgyro))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Alt))
	}
	if in.StdDevHorz != 0 {
		const prefix string = ",\"StdDevHorz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.StdDevHorz))
	}
	if in.StdDevVert != 0 {
		const prefix string = ",\"StdDevVert\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.StdDevVert))
	}
	if in.Vn != 0 {
		const prefix string = ",\"Vn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vn))
	}
	if in.Ve != 0 {
		const prefix string = ",\"Ve\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ve))
	}
	if in.Vd != 0 {
		const prefix string = ",\"Vd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SimState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SimState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SimState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SimState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll18(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll19(in *jlexer.Lexer, out *SetPositionTargetLocalNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll19(out *jwriter.Writer, in SetPositionTargetLocalNed) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vz))
	}
	if in.Afx != 0 {
		const prefix string = ",\"Afx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afx))
	}
	if in.Afy != 0 {
		const prefix string = ",\"Afy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afy))
	}
	if in.Afz != 0 {
		const prefix string = ",\"Afz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afz))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.YawRate != 0 {
		const prefix string = ",\"YawRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YawRate))
	}
	if in.TypeMask != 0 {
		const prefix string = ",\"TypeMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TypeMask))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.CoordinateFrame != 0 {
		const prefix string = ",\"CoordinateFrame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPositionTargetLocalNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetPositionTargetLocalNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPositionTargetLocalNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetPositionTargetLocalNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll19(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll20(in *jlexer.Lexer, out *SetPositionTargetGlobalInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "LatInt":
			out.LatInt = int32(in.Int32())
		case "LonInt":
			out.LonInt = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll20(out *jwriter.Writer, in SetPositionTargetGlobalInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.LatInt != 0 {
		const prefix string = ",\"LatInt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LatInt))
	}
	if in.LonInt != 0 {
		const prefix string = ",\"LonInt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LonInt))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Alt))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vz))
	}
	if in.Afx != 0 {
		const prefix string = ",\"Afx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afx))
	}
	if in.Afy != 0 {
		const prefix string = ",\"Afy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afy))
	}
	if in.Afz != 0 {
		const prefix string = ",\"Afz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afz))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.YawRate != 0 {
		const prefix string = ",\"YawRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YawRate))
	}
	if in.TypeMask != 0 {
		const prefix string = ",\"TypeMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TypeMask))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.CoordinateFrame != 0 {
		const prefix string = ",\"CoordinateFrame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPositionTargetGlobalInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetPositionTargetGlobalInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPositionTargetGlobalInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetPositionTargetGlobalInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll20(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll21(in *jlexer.Lexer, out *SetMode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "BaseMode":
			out.BaseMode = MAV_MODE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll21(out *jwriter.Writer, in SetMode) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomMode != 0 {
		const prefix string = ",\"CustomMode\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.BaseMode != 0 {
		const prefix string = ",\"BaseMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BaseMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetMode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetMode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetMode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetMode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll21(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll22(in *jlexer.Lexer, out *SetMagOffsets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MagOfsX":
			out.MagOfsX = int16(in.Int16())
		case "MagOfsY":
			out.MagOfsY = int16(in.Int16())
		case "MagOfsZ":
			out.MagOfsZ = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll22(out *jwriter.Writer, in SetMagOffsets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MagOfsX != 0 {
		const prefix string = ",\"MagOfsX\":"
		first = false
		out.RawString(prefix[1:])
		out.Int16(int16(in.MagOfsX))
	}
	if in.MagOfsY != 0 {
		const prefix string = ",\"MagOfsY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.MagOfsY))
	}
	if in.MagOfsZ != 0 {
		const prefix string = ",\"MagOfsZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.MagOfsZ))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetMagOffsets) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetMagOffsets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetMagOffsets) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetMagOffsets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll22(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll23(in *jlexer.Lexer, out *SetHomePosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v7 float32
					v7 = float32(in.Float32())
					out.Q = append(out.Q, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ApproachX":
			out.ApproachX = float32(in.Float32())
		case "ApproachY":
			out.ApproachY = float32(in.Float32())
		case "ApproachZ":
			out.ApproachZ = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll23(out *jwriter.Writer, in SetHomePosition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		const prefix string = ",\"Latitude\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"Longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Longitude))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Altitude))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if len(in.Q) != 0 {
		const prefix string = ",\"Q\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Q {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v9))
			}
			out.RawByte(']')
		}
	}
	if in.ApproachX != 0 {
		const prefix string = ",\"ApproachX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ApproachX))
	}
	if in.ApproachY != 0 {
		const prefix string = ",\"ApproachY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ApproachY))
	}
	if in.ApproachZ != 0 {
		const prefix string = ",\"ApproachZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ApproachZ))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetHomePosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetHomePosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetHomePosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetHomePosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll23(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll24(in *jlexer.Lexer, out *SetGpsGlobalOrigin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll24(out *jwriter.Writer, in SetGpsGlobalOrigin) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		const prefix string = ",\"Latitude\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"Longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Longitude))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Altitude))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetGpsGlobalOrigin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetGpsGlobalOrigin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetGpsGlobalOrigin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetGpsGlobalOrigin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll24(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll25(in *jlexer.Lexer, out *SetAttitudeTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v10 float32
					v10 = float32(in.Float32())
					out.Q = append(out.Q, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BodyRollRate":
			out.BodyRollRate = float32(in.Float32())
		case "BodyPitchRate":
			out.BodyPitchRate = float32(in.Float32())
		case "BodyYawRate":
			out.BodyYawRate = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "TypeMask":
			out.TypeMask = ATTITUDE_TARGET_TYPEMASK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll25(out *jwriter.Writer, in SetAttitudeTarget) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if len(in.Q) != 0 {
		const prefix string = ",\"Q\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.Q {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v12))
			}
			out.RawByte(']')
		}
	}
	if in.BodyRollRate != 0 {
		const prefix string = ",\"BodyRollRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BodyRollRate))
	}
	if in.BodyPitchRate != 0 {
		const prefix string = ",\"BodyPitchRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BodyPitchRate))
	}
	if in.BodyYawRate != 0 {
		const prefix string = ",\"BodyYawRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BodyYawRate))
	}
	if in.Thrust != 0 {
		const prefix string = ",\"Thrust\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Thrust))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.TypeMask != 0 {
		const prefix string = ",\"TypeMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TypeMask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetAttitudeTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetAttitudeTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetAttitudeTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetAttitudeTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll25(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll26(in *jlexer.Lexer, out *SetActuatorControlTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v13 float32
					v13 = float32(in.Float32())
					out.Controls = append(out.Controls, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GroupMlx":
			out.GroupMlx = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll26(out *jwriter.Writer, in SetActuatorControlTarget) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if len(in.Controls) != 0 {
		const prefix string = ",\"Controls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Controls {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v15))
			}
			out.RawByte(']')
		}
	}
	if in.GroupMlx != 0 {
		const prefix string = ",\"GroupMlx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.GroupMlx))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetActuatorControlTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetActuatorControlTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetActuatorControlTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetActuatorControlTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll26(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll27(in *jlexer.Lexer, out *ServoOutputRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint32(in.Uint32())
		case "Servo1Raw":
			out.Servo1Raw = uint16(in.Uint16())
		case "Servo2Raw":
			out.Servo2Raw = uint16(in.Uint16())
		case "Servo3Raw":
			out.Servo3Raw = uint16(in.Uint16())
		case "Servo4Raw":
			out.Servo4Raw = uint16(in.Uint16())
		case "Servo5Raw":
			out.Servo5Raw = uint16(in.Uint16())
		case "Servo6Raw":
			out.Servo6Raw = uint16(in.Uint16())
		case "Servo7Raw":
			out.Servo7Raw = uint16(in.Uint16())
		case "Servo8Raw":
			out.Servo8Raw = uint16(in.Uint16())
		case "Port":
			out.Port = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll27(out *jwriter.Writer, in ServoOutputRaw) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeUsec))
	}
	if in.Servo1Raw != 0 {
		const prefix string = ",\"Servo1Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Servo1Raw))
	}
	if in.Servo2Raw != 0 {
		const prefix string = ",\"Servo2Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Servo2Raw))
	}
	if in.Servo3Raw != 0 {
		const prefix string = ",\"Servo3Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Servo3Raw))
	}
	if in.Servo4Raw != 0 {
		const prefix string = ",\"Servo4Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Servo4Raw))
	}
	if in.Servo5Raw != 0 {
		const prefix string = ",\"Servo5Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Servo5Raw))
	}
	if in.Servo6Raw != 0 {
		const prefix string = ",\"Servo6Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Servo6Raw))
	}
	if in.Servo7Raw != 0 {
		const prefix string = ",\"Servo7Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Servo7Raw))
	}
	if in.Servo8Raw != 0 {
		const prefix string = ",\"Servo8Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Servo8Raw))
	}
	if in.Port != 0 {
		const prefix string = ",\"Port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Port))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServoOutputRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServoOutputRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServoOutputRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServoOutputRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll27(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll28(in *jlexer.Lexer, out *SerialControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Baudrate":
			out.Baudrate = uint32(in.Uint32())
		case "Timeout":
			out.Timeout = uint16(in.Uint16())
		case "Device":
			out.Device = SERIAL_CONTROL_DEV(in.Int())
		case "Flags":
			out.Flags = SERIAL_CONTROL_FLAG(in.Int())
		case "Count":
			out.Count = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll28(out *jwriter.Writer, in SerialControl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Baudrate != 0 {
		const prefix string = ",\"Baudrate\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Baudrate))
	}
	if in.Timeout != 0 {
		const prefix string = ",\"Timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Timeout))
	}
	if in.Device != 0 {
		const prefix string = ",\"Device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Device))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	if in.Count != 0 {
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Count))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll28(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll29(in *jlexer.Lexer, out *SensorOffsets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MagDeclination":
			out.MagDeclination = float32(in.Float32())
		case "RawPress":
			out.RawPress = int32(in.Int32())
		case "RawTemp":
			out.RawTemp = int32(in.Int32())
		case "GyroCalX":
			out.GyroCalX = float32(in.Float32())
		case "GyroCalY":
			out.GyroCalY = float32(in.Float32())
		case "GyroCalZ":
			out.GyroCalZ = float32(in.Float32())
		case "AccelCalX":
			out.AccelCalX = float32(in.Float32())
		case "AccelCalY":
			out.AccelCalY = float32(in.Float32())
		case "AccelCalZ":
			out.AccelCalZ = float32(in.Float32())
		case "MagOfsX":
			out.MagOfsX = int16(in.Int16())
		case "MagOfsY":
			out.MagOfsY = int16(in.Int16())
		case "MagOfsZ":
			out.MagOfsZ = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll29(out *jwriter.Writer, in SensorOffsets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MagDeclination != 0 {
		const prefix string = ",\"MagDeclination\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.MagDeclination))
	}
	if in.RawPress != 0 {
		const prefix string = ",\"RawPress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.RawPress))
	}
	if in.RawTemp != 0 {
		const prefix string = ",\"RawTemp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.RawTemp))
	}
	if in.GyroCalX != 0 {
		const prefix string = ",\"GyroCalX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.GyroCalX))
	}
	if in.GyroCalY != 0 {
		const prefix string = ",\"GyroCalY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.GyroCalY))
	}
	if in.GyroCalZ != 0 {
		const prefix string = ",\"GyroCalZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.GyroCalZ))
	}
	if in.AccelCalX != 0 {
		const prefix string = ",\"AccelCalX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AccelCalX))
	}
	if in.AccelCalY != 0 {
		const prefix string = ",\"AccelCalY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AccelCalY))
	}
	if in.AccelCalZ != 0 {
		const prefix string = ",\"AccelCalZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AccelCalZ))
	}
	if in.MagOfsX != 0 {
		const prefix string = ",\"MagOfsX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.MagOfsX))
	}
	if in.MagOfsY != 0 {
		const prefix string = ",\"MagOfsY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.MagOfsY))
	}
	if in.MagOfsZ != 0 {
		const prefix string = ",\"MagOfsZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.MagOfsZ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SensorOffsets) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SensorOffsets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SensorOffsets) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SensorOffsets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll29(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll30(in *jlexer.Lexer, out *ScaledPressure3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll30(out *jwriter.Writer, in ScaledPressure3) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.PressAbs != 0 {
		const prefix string = ",\"PressAbs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PressAbs))
	}
	if in.PressDiff != 0 {
		const prefix string = ",\"PressDiff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PressDiff))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll30(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll31(in *jlexer.Lexer, out *ScaledPressure2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll31(out *jwriter.Writer, in ScaledPressure2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.PressAbs != 0 {
		const prefix string = ",\"PressAbs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PressAbs))
	}
	if in.PressDiff != 0 {
		const prefix string = ",\"PressDiff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PressDiff))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll31(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll32(in *jlexer.Lexer, out *ScaledPressure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll32(out *jwriter.Writer, in ScaledPressure) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.PressAbs != 0 {
		const prefix string = ",\"PressAbs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PressAbs))
	}
	if in.PressDiff != 0 {
		const prefix string = ",\"PressDiff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PressDiff))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll32(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll33(in *jlexer.Lexer, out *ScaledImu3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll33(out *jwriter.Writer, in ScaledImu3) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zacc))
	}
	if in.Xgyro != 0 {
		const prefix string = ",\"Xgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xgyro))
	}
	if in.Ygyro != 0 {
		const prefix string = ",\"Ygyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ygyro))
	}
	if in.Zgyro != 0 {
		const prefix string = ",\"Zgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zgyro))
	}
	if in.Xmag != 0 {
		const prefix string = ",\"Xmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xmag))
	}
	if in.Ymag != 0 {
		const prefix string = ",\"Ymag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ymag))
	}
	if in.Zmag != 0 {
		const prefix string = ",\"Zmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll33(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll34(in *jlexer.Lexer, out *ScaledImu2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll34(out *jwriter.Writer, in ScaledImu2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zacc))
	}
	if in.Xgyro != 0 {
		const prefix string = ",\"Xgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xgyro))
	}
	if in.Ygyro != 0 {
		const prefix string = ",\"Ygyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ygyro))
	}
	if in.Zgyro != 0 {
		const prefix string = ",\"Zgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zgyro))
	}
	if in.Xmag != 0 {
		const prefix string = ",\"Xmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xmag))
	}
	if in.Ymag != 0 {
		const prefix string = ",\"Ymag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ymag))
	}
	if in.Zmag != 0 {
		const prefix string = ",\"Zmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll34(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll35(in *jlexer.Lexer, out *ScaledImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll35(out *jwriter.Writer, in ScaledImu) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zacc))
	}
	if in.Xgyro != 0 {
		const prefix string = ",\"Xgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xgyro))
	}
	if in.Ygyro != 0 {
		const prefix string = ",\"Ygyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ygyro))
	}
	if in.Zgyro != 0 {
		const prefix string = ",\"Zgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zgyro))
	}
	if in.Xmag != 0 {
		const prefix string = ",\"Xmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xmag))
	}
	if in.Ymag != 0 {
		const prefix string = ",\"Ymag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ymag))
	}
	if in.Zmag != 0 {
		const prefix string = ",\"Zmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll35(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll36(in *jlexer.Lexer, out *SafetySetAllowedArea) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "P1x":
			out.P1x = float32(in.Float32())
		case "P1y":
			out.P1y = float32(in.Float32())
		case "P1z":
			out.P1z = float32(in.Float32())
		case "P2x":
			out.P2x = float32(in.Float32())
		case "P2y":
			out.P2y = float32(in.Float32())
		case "P2z":
			out.P2z = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll36(out *jwriter.Writer, in SafetySetAllowedArea) {
	out.RawByte('{')
	first := true
	_ = first
	if in.P1x != 0 {
		const prefix string = ",\"P1x\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.P1x))
	}
	if in.P1y != 0 {
		const prefix string = ",\"P1y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P1y))
	}
	if in.P1z != 0 {
		const prefix string = ",\"P1z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P1z))
	}
	if in.P2x != 0 {
		const prefix string = ",\"P2x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P2x))
	}
	if in.P2y != 0 {
		const prefix string = ",\"P2y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P2y))
	}
	if in.P2z != 0 {
		const prefix string = ",\"P2z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P2z))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Frame != 0 {
		const prefix string = ",\"Frame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafetySetAllowedArea) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafetySetAllowedArea) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafetySetAllowedArea) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafetySetAllowedArea) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll36(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll37(in *jlexer.Lexer, out *SafetyAllowedArea) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "P1x":
			out.P1x = float32(in.Float32())
		case "P1y":
			out.P1y = float32(in.Float32())
		case "P1z":
			out.P1z = float32(in.Float32())
		case "P2x":
			out.P2x = float32(in.Float32())
		case "P2y":
			out.P2y = float32(in.Float32())
		case "P2z":
			out.P2z = float32(in.Float32())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll37(out *jwriter.Writer, in SafetyAllowedArea) {
	out.RawByte('{')
	first := true
	_ = first
	if in.P1x != 0 {
		const prefix string = ",\"P1x\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.P1x))
	}
	if in.P1y != 0 {
		const prefix string = ",\"P1y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P1y))
	}
	if in.P1z != 0 {
		const prefix string = ",\"P1z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P1z))
	}
	if in.P2x != 0 {
		const prefix string = ",\"P2x\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P2x))
	}
	if in.P2y != 0 {
		const prefix string = ",\"P2y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P2y))
	}
	if in.P2z != 0 {
		const prefix string = ",\"P2z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P2z))
	}
	if in.Frame != 0 {
		const prefix string = ",\"Frame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafetyAllowedArea) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafetyAllowedArea) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafetyAllowedArea) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafetyAllowedArea) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll37(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll38(in *jlexer.Lexer, out *Rpm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rpm1":
			out.Rpm1 = float32(in.Float32())
		case "Rpm2":
			out.Rpm2 = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll38(out *jwriter.Writer, in Rpm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Rpm1 != 0 {
		const prefix string = ",\"Rpm1\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Rpm1))
	}
	if in.Rpm2 != 0 {
		const prefix string = ",\"Rpm2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rpm2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rpm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rpm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rpm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rpm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll38(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll39(in *jlexer.Lexer, out *ResourceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RequestID":
			out.RequestID = uint8(in.Uint8())
		case "URIType":
			out.URIType = uint8(in.Uint8())
		case "URI":
			if in.IsNull() {
				in.Skip()
				out.URI = nil
			} else {
				out.URI = in.Bytes()
			}
		case "TransferType":
			out.TransferType = uint8(in.Uint8())
		case "Storage":
			if in.IsNull() {
				in.Skip()
				out.Storage = nil
			} else {
				out.Storage = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll39(out *jwriter.Writer, in ResourceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RequestID != 0 {
		const prefix string = ",\"RequestID\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.RequestID))
	}
	if in.URIType != 0 {
		const prefix string = ",\"URIType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.URIType))
	}
	if len(in.URI) != 0 {
		const prefix string = ",\"URI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.URI)
	}
	if in.TransferType != 0 {
		const prefix string = ",\"TransferType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TransferType))
	}
	if len(in.Storage) != 0 {
		const prefix string = ",\"Storage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Storage)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll39(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll40(in *jlexer.Lexer, out *RequestDataStream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ReqMessageRate":
			out.ReqMessageRate = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ReqStreamID":
			out.ReqStreamID = uint8(in.Uint8())
		case "StartStop":
			out.StartStop = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll40(out *jwriter.Writer, in RequestDataStream) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReqMessageRate != 0 {
		const prefix string = ",\"ReqMessageRate\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.ReqMessageRate))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.ReqStreamID != 0 {
		const prefix string = ",\"ReqStreamID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ReqStreamID))
	}
	if in.StartStop != 0 {
		const prefix string = ",\"StartStop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.StartStop))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestDataStream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestDataStream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestDataStream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestDataStream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll40(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll41(in *jlexer.Lexer, out *RemoteLogDataBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seqno":
			out.Seqno = MAV_REMOTE_LOG_DATA_BLOCK_COMMANDS(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll41(out *jwriter.Writer, in RemoteLogDataBlock) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seqno != 0 {
		const prefix string = ",\"Seqno\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Seqno))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteLogDataBlock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteLogDataBlock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteLogDataBlock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteLogDataBlock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll41(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll42(in *jlexer.Lexer, out *RemoteLogBlockStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seqno":
			out.Seqno = uint32(in.Uint32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Status":
			out.Status = MAV_REMOTE_LOG_DATA_BLOCK_STATUSES(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll42(out *jwriter.Writer, in RemoteLogBlockStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seqno != 0 {
		const prefix string = ",\"Seqno\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Seqno))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Status != 0 {
		const prefix string = ",\"Status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteLogBlockStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteLogBlockStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteLogBlockStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteLogBlockStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll42(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll43(in *jlexer.Lexer, out *RcChannelsScaled) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Scaled":
			out.Chan1Scaled = int16(in.Int16())
		case "Chan2Scaled":
			out.Chan2Scaled = int16(in.Int16())
		case "Chan3Scaled":
			out.Chan3Scaled = int16(in.Int16())
		case "Chan4Scaled":
			out.Chan4Scaled = int16(in.Int16())
		case "Chan5Scaled":
			out.Chan5Scaled = int16(in.Int16())
		case "Chan6Scaled":
			out.Chan6Scaled = int16(in.Int16())
		case "Chan7Scaled":
			out.Chan7Scaled = int16(in.Int16())
		case "Chan8Scaled":
			out.Chan8Scaled = int16(in.Int16())
		case "Port":
			out.Port = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll43(out *jwriter.Writer, in RcChannelsScaled) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Chan1Scaled != 0 {
		const prefix string = ",\"Chan1Scaled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Chan1Scaled))
	}
	if in.Chan2Scaled != 0 {
		const prefix string = ",\"Chan2Scaled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Chan2Scaled))
	}
	if in.Chan3Scaled != 0 {
		const prefix string = ",\"Chan3Scaled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Chan3Scaled))
	}
	if in.Chan4Scaled != 0 {
		const prefix string = ",\"Chan4Scaled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Chan4Scaled))
	}
	if in.Chan5Scaled != 0 {
		const prefix string = ",\"Chan5Scaled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Chan5Scaled))
	}
	if in.Chan6Scaled != 0 {
		const prefix string = ",\"Chan6Scaled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Chan6Scaled))
	}
	if in.Chan7Scaled != 0 {
		const prefix string = ",\"Chan7Scaled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Chan7Scaled))
	}
	if in.Chan8Scaled != 0 {
		const prefix string = ",\"Chan8Scaled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Chan8Scaled))
	}
	if in.Port != 0 {
		const prefix string = ",\"Port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Port))
	}
	if in.Rssi != 0 {
		const prefix string = ",\"Rssi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsScaled) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsScaled) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsScaled) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsScaled) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll43(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll44(in *jlexer.Lexer, out *RcChannelsRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Port":
			out.Port = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll44(out *jwriter.Writer, in RcChannelsRaw) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Chan1Raw != 0 {
		const prefix string = ",\"Chan1Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan1Raw))
	}
	if in.Chan2Raw != 0 {
		const prefix string = ",\"Chan2Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan2Raw))
	}
	if in.Chan3Raw != 0 {
		const prefix string = ",\"Chan3Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan3Raw))
	}
	if in.Chan4Raw != 0 {
		const prefix string = ",\"Chan4Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan4Raw))
	}
	if in.Chan5Raw != 0 {
		const prefix string = ",\"Chan5Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan5Raw))
	}
	if in.Chan6Raw != 0 {
		const prefix string = ",\"Chan6Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan6Raw))
	}
	if in.Chan7Raw != 0 {
		const prefix string = ",\"Chan7Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan7Raw))
	}
	if in.Chan8Raw != 0 {
		const prefix string = ",\"Chan8Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan8Raw))
	}
	if in.Port != 0 {
		const prefix string = ",\"Port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Port))
	}
	if in.Rssi != 0 {
		const prefix string = ",\"Rssi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll44(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll45(in *jlexer.Lexer, out *RcChannelsOverride) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll45(out *jwriter.Writer, in RcChannelsOverride) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Chan1Raw != 0 {
		const prefix string = ",\"Chan1Raw\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Chan1Raw))
	}
	if in.Chan2Raw != 0 {
		const prefix string = ",\"Chan2Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan2Raw))
	}
	if in.Chan3Raw != 0 {
		const prefix string = ",\"Chan3Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan3Raw))
	}
	if in.Chan4Raw != 0 {
		const prefix string = ",\"Chan4Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan4Raw))
	}
	if in.Chan5Raw != 0 {
		const prefix string = ",\"Chan5Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan5Raw))
	}
	if in.Chan6Raw != 0 {
		const prefix string = ",\"Chan6Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan6Raw))
	}
	if in.Chan7Raw != 0 {
		const prefix string = ",\"Chan7Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan7Raw))
	}
	if in.Chan8Raw != 0 {
		const prefix string = ",\"Chan8Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan8Raw))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsOverride) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsOverride) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsOverride) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsOverride) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll45(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll46(in *jlexer.Lexer, out *RcChannels) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Chan9Raw":
			out.Chan9Raw = uint16(in.Uint16())
		case "Chan10Raw":
			out.Chan10Raw = uint16(in.Uint16())
		case "Chan11Raw":
			out.Chan11Raw = uint16(in.Uint16())
		case "Chan12Raw":
			out.Chan12Raw = uint16(in.Uint16())
		case "Chan13Raw":
			out.Chan13Raw = uint16(in.Uint16())
		case "Chan14Raw":
			out.Chan14Raw = uint16(in.Uint16())
		case "Chan15Raw":
			out.Chan15Raw = uint16(in.Uint16())
		case "Chan16Raw":
			out.Chan16Raw = uint16(in.Uint16())
		case "Chan17Raw":
			out.Chan17Raw = uint16(in.Uint16())
		case "Chan18Raw":
			out.Chan18Raw = uint16(in.Uint16())
		case "Chancount":
			out.Chancount = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll46(out *jwriter.Writer, in RcChannels) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Chan1Raw != 0 {
		const prefix string = ",\"Chan1Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan1Raw))
	}
	if in.Chan2Raw != 0 {
		const prefix string = ",\"Chan2Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan2Raw))
	}
	if in.Chan3Raw != 0 {
		const prefix string = ",\"Chan3Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan3Raw))
	}
	if in.Chan4Raw != 0 {
		const prefix string = ",\"Chan4Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan4Raw))
	}
	if in.Chan5Raw != 0 {
		const prefix string = ",\"Chan5Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan5Raw))
	}
	if in.Chan6Raw != 0 {
		const prefix string = ",\"Chan6Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan6Raw))
	}
	if in.Chan7Raw != 0 {
		const prefix string = ",\"Chan7Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan7Raw))
	}
	if in.Chan8Raw != 0 {
		const prefix string = ",\"Chan8Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan8Raw))
	}
	if in.Chan9Raw != 0 {
		const prefix string = ",\"Chan9Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan9Raw))
	}
	if in.Chan10Raw != 0 {
		const prefix string = ",\"Chan10Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan10Raw))
	}
	if in.Chan11Raw != 0 {
		const prefix string = ",\"Chan11Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan11Raw))
	}
	if in.Chan12Raw != 0 {
		const prefix string = ",\"Chan12Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan12Raw))
	}
	if in.Chan13Raw != 0 {
		const prefix string = ",\"Chan13Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan13Raw))
	}
	if in.Chan14Raw != 0 {
		const prefix string = ",\"Chan14Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan14Raw))
	}
	if in.Chan15Raw != 0 {
		const prefix string = ",\"Chan15Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan15Raw))
	}
	if in.Chan16Raw != 0 {
		const prefix string = ",\"Chan16Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan16Raw))
	}
	if in.Chan17Raw != 0 {
		const prefix string = ",\"Chan17Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan17Raw))
	}
	if in.Chan18Raw != 0 {
		const prefix string = ",\"Chan18Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan18Raw))
	}
	if in.Chancount != 0 {
		const prefix string = ",\"Chancount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Chancount))
	}
	if in.Rssi != 0 {
		const prefix string = ",\"Rssi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannels) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannels) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannels) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannels) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll46(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll47(in *jlexer.Lexer, out *RawPressure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "PressAbs":
			out.PressAbs = int16(in.Int16())
		case "PressDiff1":
			out.PressDiff1 = int16(in.Int16())
		case "PressDiff2":
			out.PressDiff2 = int16(in.Int16())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll47(out *jwriter.Writer, in RawPressure) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.PressAbs != 0 {
		const prefix string = ",\"PressAbs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.PressAbs))
	}
	if in.PressDiff1 != 0 {
		const prefix string = ",\"PressDiff1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.PressDiff1))
	}
	if in.PressDiff2 != 0 {
		const prefix string = ",\"PressDiff2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.PressDiff2))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawPressure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawPressure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawPressure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawPressure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll47(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll48(in *jlexer.Lexer, out *RawImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll48(out *jwriter.Writer, in RawImu) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zacc))
	}
	if in.Xgyro != 0 {
		const prefix string = ",\"Xgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xgyro))
	}
	if in.Ygyro != 0 {
		const prefix string = ",\"Ygyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ygyro))
	}
	if in.Zgyro != 0 {
		const prefix string = ",\"Zgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zgyro))
	}
	if in.Xmag != 0 {
		const prefix string = ",\"Xmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xmag))
	}
	if in.Ymag != 0 {
		const prefix string = ",\"Ymag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ymag))
	}
	if in.Zmag != 0 {
		const prefix string = ",\"Zmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll48(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll49(in *jlexer.Lexer, out *Rangefinder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Distance":
			out.Distance = float32(in.Float32())
		case "Voltage":
			out.Voltage = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll49(out *jwriter.Writer, in Rangefinder) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Distance != 0 {
		const prefix string = ",\"Distance\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Distance))
	}
	if in.Voltage != 0 {
		const prefix string = ",\"Voltage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Voltage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rangefinder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rangefinder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rangefinder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rangefinder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll49(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll50(in *jlexer.Lexer, out *RallyPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lng":
			out.Lng = int32(in.Int32())
		case "Alt":
			out.Alt = int16(in.Int16())
		case "BreakAlt":
			out.BreakAlt = int16(in.Int16())
		case "LandDir":
			out.LandDir = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Idx":
			out.Idx = uint8(in.Uint8())
		case "Count":
			out.Count = uint8(in.Uint8())
		case "Flags":
			out.Flags = RALLY_FLAGS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll50(out *jwriter.Writer, in RallyPoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	if in.Lng != 0 {
		const prefix string = ",\"Lng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lng))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Alt))
	}
	if in.BreakAlt != 0 {
		const prefix string = ",\"BreakAlt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.BreakAlt))
	}
	if in.LandDir != 0 {
		const prefix string = ",\"LandDir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.LandDir))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Idx != 0 {
		const prefix string = ",\"Idx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Idx))
	}
	if in.Count != 0 {
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Count))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RallyPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RallyPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RallyPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RallyPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll50(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll51(in *jlexer.Lexer, out *RallyFetchPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Idx":
			out.Idx = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll51(out *jwriter.Writer, in RallyFetchPoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Idx != 0 {
		const prefix string = ",\"Idx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Idx))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RallyFetchPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RallyFetchPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RallyFetchPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RallyFetchPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll51(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll52(in *jlexer.Lexer, out *RadioStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rxerrors":
			out.Rxerrors = uint16(in.Uint16())
		case "Fixed":
			out.Fixed = uint16(in.Uint16())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		case "Remrssi":
			out.Remrssi = uint8(in.Uint8())
		case "Txbuf":
			out.Txbuf = uint8(in.Uint8())
		case "Noise":
			out.Noise = uint8(in.Uint8())
		case "Remnoise":
			out.Remnoise = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll52(out *jwriter.Writer, in RadioStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Rxerrors != 0 {
		const prefix string = ",\"Rxerrors\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Rxerrors))
	}
	if in.Fixed != 0 {
		const prefix string = ",\"Fixed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Fixed))
	}
	if in.Rssi != 0 {
		const prefix string = ",\"Rssi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Rssi))
	}
	if in.Remrssi != 0 {
		const prefix string = ",\"Remrssi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Remrssi))
	}
	if in.Txbuf != 0 {
		const prefix string = ",\"Txbuf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Txbuf))
	}
	if in.Noise != 0 {
		const prefix string = ",\"Noise\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Noise))
	}
	if in.Remnoise != 0 {
		const prefix string = ",\"Remnoise\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Remnoise))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RadioStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RadioStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RadioStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RadioStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll52(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll53(in *jlexer.Lexer, out *RadioCalibration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Aileron":
			if in.IsNull() {
				in.Skip()
				out.Aileron = nil
			} else {
				in.Delim('[')
				if out.Aileron == nil {
					if !in.IsDelim(']') {
						out.Aileron = make([]uint16, 0, 32)
					} else {
						out.Aileron = []uint16{}
					}
				} else {
					out.Aileron = (out.Aileron)[:0]
				}
				for !in.IsDelim(']') {
					var v28 uint16
					v28 = uint16(in.Uint16())
					out.Aileron = append(out.Aileron, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Elevator":
			if in.IsNull() {
				in.Skip()
				out.Elevator = nil
			} else {
				in.Delim('[')
				if out.Elevator == nil {
					if !in.IsDelim(']') {
						out.Elevator = make([]uint16, 0, 32)
					} else {
						out.Elevator = []uint16{}
					}
				} else {
					out.Elevator = (out.Elevator)[:0]
				}
				for !in.IsDelim(']') {
					var v29 uint16
					v29 = uint16(in.Uint16())
					out.Elevator = append(out.Elevator, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rudder":
			if in.IsNull() {
				in.Skip()
				out.Rudder = nil
			} else {
				in.Delim('[')
				if out.Rudder == nil {
					if !in.IsDelim(']') {
						out.Rudder = make([]uint16, 0, 32)
					} else {
						out.Rudder = []uint16{}
					}
				} else {
					out.Rudder = (out.Rudder)[:0]
				}
				for !in.IsDelim(']') {
					var v30 uint16
					v30 = uint16(in.Uint16())
					out.Rudder = append(out.Rudder, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Gyro":
			if in.IsNull() {
				in.Skip()
				out.Gyro = nil
			} else {
				in.Delim('[')
				if out.Gyro == nil {
					if !in.IsDelim(']') {
						out.Gyro = make([]uint16, 0, 32)
					} else {
						out.Gyro = []uint16{}
					}
				} else {
					out.Gyro = (out.Gyro)[:0]
				}
				for !in.IsDelim(']') {
					var v31 uint16
					v31 = uint16(in.Uint16())
					out.Gyro = append(out.Gyro, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Pitch":
			if in.IsNull() {
				in.Skip()
				out.Pitch = nil
			} else {
				in.Delim('[')
				if out.Pitch == nil {
					if !in.IsDelim(']') {
						out.Pitch = make([]uint16, 0, 32)
					} else {
						out.Pitch = []uint16{}
					}
				} else {
					out.Pitch = (out.Pitch)[:0]
				}
				for !in.IsDelim(']') {
					var v32 uint16
					v32 = uint16(in.Uint16())
					out.Pitch = append(out.Pitch, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Throttle":
			if in.IsNull() {
				in.Skip()
				out.Throttle = nil
			} else {
				in.Delim('[')
				if out.Throttle == nil {
					if !in.IsDelim(']') {
						out.Throttle = make([]uint16, 0, 32)
					} else {
						out.Throttle = []uint16{}
					}
				} else {
					out.Throttle = (out.Throttle)[:0]
				}
				for !in.IsDelim(']') {
					var v33 uint16
					v33 = uint16(in.Uint16())
					out.Throttle = append(out.Throttle, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll53(out *jwriter.Writer, in RadioCalibration) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Aileron) != 0 {
		const prefix string = ",\"Aileron\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v34, v35 := range in.Aileron {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v35))
			}
			out.RawByte(']')
		}
	}
	if len(in.Elevator) != 0 {
		const prefix string = ",\"Elevator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.Elevator {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v37))
			}
			out.RawByte(']')
		}
	}
	if len(in.Rudder) != 0 {
		const prefix string = ",\"Rudder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Rudder {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v39))
			}
			out.RawByte(']')
		}
	}
	if len(in.Gyro) != 0 {
		const prefix string = ",\"Gyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v40, v41 := range in.Gyro {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v41))
			}
			out.RawByte(']')
		}
	}
	if len(in.Pitch) != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v42, v43 := range in.Pitch {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v43))
			}
			out.RawByte(']')
		}
	}
	if len(in.Throttle) != 0 {
		const prefix string = ",\"Throttle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.Throttle {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v45))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RadioCalibration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RadioCalibration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RadioCalibration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RadioCalibration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll53(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll54(in *jlexer.Lexer, out *Radio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rxerrors":
			out.Rxerrors = uint16(in.Uint16())
		case "Fixed":
			out.Fixed = uint16(in.Uint16())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		case "Remrssi":
			out.Remrssi = uint8(in.Uint8())
		case "Txbuf":
			out.Txbuf = uint8(in.Uint8())
		case "Noise":
			out.Noise = uint8(in.Uint8())
		case "Remnoise":
			out.Remnoise = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll54(out *jwriter.Writer, in Radio) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Rxerrors != 0 {
		const prefix string = ",\"Rxerrors\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Rxerrors))
	}
	if in.Fixed != 0 {
		const prefix string = ",\"Fixed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Fixed))
	}
	if in.Rssi != 0 {
		const prefix string = ",\"Rssi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Rssi))
	}
	if in.Remrssi != 0 {
		const prefix string = ",\"Remrssi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Remrssi))
	}
	if in.Txbuf != 0 {
		const prefix string = ",\"Txbuf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Txbuf))
	}
	if in.Noise != 0 {
		const prefix string = ",\"Noise\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Noise))
	}
	if in.Remnoise != 0 {
		const prefix string = ",\"Remnoise\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Remnoise))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Radio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Radio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Radio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Radio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll54(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll55(in *jlexer.Lexer, out *PowerStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Vcc":
			out.Vcc = uint16(in.Uint16())
		case "Vservo":
			out.Vservo = uint16(in.Uint16())
		case "Flags":
			out.Flags = MAV_POWER_STATUS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll55(out *jwriter.Writer, in PowerStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Vcc != 0 {
		const prefix string = ",\"Vcc\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Vcc))
	}
	if in.Vservo != 0 {
		const prefix string = ",\"Vservo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Vservo))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PowerStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PowerStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PowerStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PowerStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll55(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll56(in *jlexer.Lexer, out *PositionTargetLocalNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll56(out *jwriter.Writer, in PositionTargetLocalNed) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vz))
	}
	if in.Afx != 0 {
		const prefix string = ",\"Afx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afx))
	}
	if in.Afy != 0 {
		const prefix string = ",\"Afy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afy))
	}
	if in.Afz != 0 {
		const prefix string = ",\"Afz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afz))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.YawRate != 0 {
		const prefix string = ",\"YawRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YawRate))
	}
	if in.TypeMask != 0 {
		const prefix string = ",\"TypeMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TypeMask))
	}
	if in.CoordinateFrame != 0 {
		const prefix string = ",\"CoordinateFrame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionTargetLocalNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionTargetLocalNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionTargetLocalNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionTargetLocalNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll56(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll57(in *jlexer.Lexer, out *PositionTargetGlobalInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "LatInt":
			out.LatInt = int32(in.Int32())
		case "LonInt":
			out.LonInt = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll57(out *jwriter.Writer, in PositionTargetGlobalInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.LatInt != 0 {
		const prefix string = ",\"LatInt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LatInt))
	}
	if in.LonInt != 0 {
		const prefix string = ",\"LonInt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LonInt))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Alt))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vz))
	}
	if in.Afx != 0 {
		const prefix string = ",\"Afx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afx))
	}
	if in.Afy != 0 {
		const prefix string = ",\"Afy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afy))
	}
	if in.Afz != 0 {
		const prefix string = ",\"Afz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Afz))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.YawRate != 0 {
		const prefix string = ",\"YawRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YawRate))
	}
	if in.TypeMask != 0 {
		const prefix string = ",\"TypeMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TypeMask))
	}
	if in.CoordinateFrame != 0 {
		const prefix string = ",\"CoordinateFrame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionTargetGlobalInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionTargetGlobalInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionTargetGlobalInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionTargetGlobalInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll57(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll58(in *jlexer.Lexer, out *Ping) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Seq":
			out.Seq = uint32(in.Uint32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll58(out *jwriter.Writer, in Ping) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Seq))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ping) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ping) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ping) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ping) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll58(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll59(in *jlexer.Lexer, out *PidTuning) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Desired":
			out.Desired = float32(in.Float32())
		case "Achieved":
			out.Achieved = float32(in.Float32())
		case "Ff":
			out.Ff = float32(in.Float32())
		case "P":
			out.P = float32(in.Float32())
		case "I":
			out.I = float32(in.Float32())
		case "D":
			out.D = float32(in.Float32())
		case "Axis":
			out.Axis = PID_TUNING_AXIS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll59(out *jwriter.Writer, in PidTuning) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Desired != 0 {
		const prefix string = ",\"Desired\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Desired))
	}
	if in.Achieved != 0 {
		const prefix string = ",\"Achieved\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Achieved))
	}
	if in.Ff != 0 {
		const prefix string = ",\"Ff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ff))
	}
	if in.P != 0 {
		const prefix string = ",\"P\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P))
	}
	if in.I != 0 {
		const prefix string = ",\"I\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.I))
	}
	if in.D != 0 {
		const prefix string = ",\"D\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.D))
	}
	if in.Axis != 0 {
		const prefix string = ",\"Axis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Axis))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PidTuning) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PidTuning) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PidTuning) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PidTuning) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll59(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll60(in *jlexer.Lexer, out *ParamValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "ParamCount":
			out.ParamCount = uint16(in.Uint16())
		case "ParamIndex":
			out.ParamIndex = uint16(in.Uint16())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll60(out *jwriter.Writer, in ParamValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ParamValue != 0 {
		const prefix string = ",\"ParamValue\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	if in.ParamCount != 0 {
		const prefix string = ",\"ParamCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ParamCount))
	}
	if in.ParamIndex != 0 {
		const prefix string = ",\"ParamIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ParamIndex))
	}
	if in.ParamID != "" {
		const prefix string = ",\"ParamID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParamID))
	}
	if in.ParamType != 0 {
		const prefix string = ",\"ParamType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParamType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll60(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll61(in *jlexer.Lexer, out *ParamSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll61(out *jwriter.Writer, in ParamSet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ParamValue != 0 {
		const prefix string = ",\"ParamValue\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.ParamID != "" {
		const prefix string = ",\"ParamID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParamID))
	}
	if in.ParamType != 0 {
		const prefix string = ",\"ParamType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParamType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll61(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll62(in *jlexer.Lexer, out *ParamRequestRead) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamIndex":
			out.ParamIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll62(out *jwriter.Writer, in ParamRequestRead) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ParamIndex != 0 {
		const prefix string = ",\"ParamIndex\":"
		first = false
		out.RawString(prefix[1:])
		out.Int16(int16(in.ParamIndex))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.ParamID != "" {
		const prefix string = ",\"ParamID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParamID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamRequestRead) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamRequestRead) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamRequestRead) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamRequestRead) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll62(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll63(in *jlexer.Lexer, out *ParamRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll63(out *jwriter.Writer, in ParamRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll63(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll64(in *jlexer.Lexer, out *ParamMapRc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue0":
			out.ParamValue0 = float32(in.Float32())
		case "Scale":
			out.Scale = float32(in.Float32())
		case "ParamValueMin":
			out.ParamValueMin = float32(in.Float32())
		case "ParamValueMax":
			out.ParamValueMax = float32(in.Float32())
		case "ParamIndex":
			out.ParamIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParameterRcChannelIndex":
			out.ParameterRcChannelIndex = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll64(out *jwriter.Writer, in ParamMapRc) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ParamValue0 != 0 {
		const prefix string = ",\"ParamValue0\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue0))
	}
	if in.Scale != 0 {
		const prefix string = ",\"Scale\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Scale))
	}
	if in.ParamValueMin != 0 {
		const prefix string = ",\"ParamValueMin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ParamValueMin))
	}
	if in.ParamValueMax != 0 {
		const prefix string = ",\"ParamValueMax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ParamValueMax))
	}
	if in.ParamIndex != 0 {
		const prefix string = ",\"ParamIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.ParamIndex))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.ParamID != "" {
		const prefix string = ",\"ParamID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParamID))
	}
	if in.ParameterRcChannelIndex != 0 {
		const prefix string = ",\"ParameterRcChannelIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ParameterRcChannelIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamMapRc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamMapRc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamMapRc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamMapRc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll64(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll65(in *jlexer.Lexer, out *ParamAckTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		case "ParamResult":
			out.ParamResult = PARAM_ACK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll65(out *jwriter.Writer, in ParamAckTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ParamValue != 0 {
		const prefix string = ",\"ParamValue\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.ParamID != "" {
		const prefix string = ",\"ParamID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParamID))
	}
	if in.ParamType != 0 {
		const prefix string = ",\"ParamType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParamType))
	}
	if in.ParamResult != 0 {
		const prefix string = ",\"ParamResult\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ParamResult))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamAckTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamAckTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamAckTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamAckTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll65(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll66(in *jlexer.Lexer, out *OpticalFlowRad) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "IntegrationTimeUs":
			out.IntegrationTimeUs = uint32(in.Uint32())
		case "IntegratedX":
			out.IntegratedX = float32(in.Float32())
		case "IntegratedY":
			out.IntegratedY = float32(in.Float32())
		case "IntegratedXgyro":
			out.IntegratedXgyro = float32(in.Float32())
		case "IntegratedYgyro":
			out.IntegratedYgyro = float32(in.Float32())
		case "IntegratedZgyro":
			out.IntegratedZgyro = float32(in.Float32())
		case "TimeDeltaDistanceUs":
			out.TimeDeltaDistanceUs = uint32(in.Uint32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll66(out *jwriter.Writer, in OpticalFlowRad) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.IntegrationTimeUs != 0 {
		const prefix string = ",\"IntegrationTimeUs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.IntegrationTimeUs))
	}
	if in.IntegratedX != 0 {
		const prefix string = ",\"IntegratedX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedX))
	}
	if in.IntegratedY != 0 {
		const prefix string = ",\"IntegratedY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedY))
	}
	if in.IntegratedXgyro != 0 {
		const prefix string = ",\"IntegratedXgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedXgyro))
	}
	if in.IntegratedYgyro != 0 {
		const prefix string = ",\"IntegratedYgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedYgyro))
	}
	if in.IntegratedZgyro != 0 {
		const prefix string = ",\"IntegratedZgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedZgyro))
	}
	if in.TimeDeltaDistanceUs != 0 {
		const prefix string = ",\"TimeDeltaDistanceUs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TimeDeltaDistanceUs))
	}
	if in.Distance != 0 {
		const prefix string = ",\"Distance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Distance))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Temperature))
	}
	if in.SensorID != 0 {
		const prefix string = ",\"SensorID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.SensorID))
	}
	if in.Quality != 0 {
		const prefix string = ",\"Quality\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpticalFlowRad) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpticalFlowRad) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpticalFlowRad) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpticalFlowRad) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll66(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll67(in *jlexer.Lexer, out *OpticalFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "FlowCompMX":
			out.FlowCompMX = float32(in.Float32())
		case "FlowCompMY":
			out.FlowCompMY = float32(in.Float32())
		case "GroundDistance":
			out.GroundDistance = float32(in.Float32())
		case "FlowX":
			out.FlowX = int16(in.Int16())
		case "FlowY":
			out.FlowY = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll67(out *jwriter.Writer, in OpticalFlow) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.FlowCompMX != 0 {
		const prefix string = ",\"FlowCompMX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.FlowCompMX))
	}
	if in.FlowCompMY != 0 {
		const prefix string = ",\"FlowCompMY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.FlowCompMY))
	}
	if in.GroundDistance != 0 {
		const prefix string = ",\"GroundDistance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.GroundDistance))
	}
	if in.FlowX != 0 {
		const prefix string = ",\"FlowX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.FlowX))
	}
	if in.FlowY != 0 {
		const prefix string = ",\"FlowY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.FlowY))
	}
	if in.SensorID != 0 {
		const prefix string = ",\"SensorID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.SensorID))
	}
	if in.Quality != 0 {
		const prefix string = ",\"Quality\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpticalFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpticalFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpticalFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpticalFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll67(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll68(in *jlexer.Lexer, out *NavFilterBias) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "Accel0":
			out.Accel0 = float32(in.Float32())
		case "Accel1":
			out.Accel1 = float32(in.Float32())
		case "Accel2":
			out.Accel2 = float32(in.Float32())
		case "Gyro0":
			out.Gyro0 = float32(in.Float32())
		case "Gyro1":
			out.Gyro1 = float32(in.Float32())
		case "Gyro2":
			out.Gyro2 = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll68(out *jwriter.Writer, in NavFilterBias) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Usec != 0 {
		const prefix string = ",\"Usec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	if in.Accel0 != 0 {
		const prefix string = ",\"Accel0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Accel0))
	}
	if in.Accel1 != 0 {
		const prefix string = ",\"Accel1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Accel1))
	}
	if in.Accel2 != 0 {
		const prefix string = ",\"Accel2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Accel2))
	}
	if in.Gyro0 != 0 {
		const prefix string = ",\"Gyro0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Gyro0))
	}
	if in.Gyro1 != 0 {
		const prefix string = ",\"Gyro1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Gyro1))
	}
	if in.Gyro2 != 0 {
		const prefix string = ",\"Gyro2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Gyro2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NavFilterBias) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NavFilterBias) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NavFilterBias) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NavFilterBias) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll68(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll69(in *jlexer.Lexer, out *NavControllerOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NavRoll":
			out.NavRoll = float32(in.Float32())
		case "NavPitch":
			out.NavPitch = float32(in.Float32())
		case "AltError":
			out.AltError = float32(in.Float32())
		case "AspdError":
			out.AspdError = float32(in.Float32())
		case "XtrackError":
			out.XtrackError = float32(in.Float32())
		case "NavBearing":
			out.NavBearing = int16(in.Int16())
		case "TargetBearing":
			out.TargetBearing = int16(in.Int16())
		case "WpDist":
			out.WpDist = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll69(out *jwriter.Writer, in NavControllerOutput) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NavRoll != 0 {
		const prefix string = ",\"NavRoll\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.NavRoll))
	}
	if in.NavPitch != 0 {
		const prefix string = ",\"NavPitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.NavPitch))
	}
	if in.AltError != 0 {
		const prefix string = ",\"AltError\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltError))
	}
	if in.AspdError != 0 {
		const prefix string = ",\"AspdError\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AspdError))
	}
	if in.XtrackError != 0 {
		const prefix string = ",\"XtrackError\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.XtrackError))
	}
	if in.NavBearing != 0 {
		const prefix string = ",\"NavBearing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.NavBearing))
	}
	if in.TargetBearing != 0 {
		const prefix string = ",\"TargetBearing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.TargetBearing))
	}
	if in.WpDist != 0 {
		const prefix string = ",\"WpDist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.WpDist))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NavControllerOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NavControllerOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NavControllerOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NavControllerOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll69(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll70(in *jlexer.Lexer, out *NamedValueInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = int32(in.Int32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll70(out *jwriter.Writer, in NamedValueInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Value != 0 {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Value))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamedValueInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamedValueInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamedValueInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamedValueInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll70(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll71(in *jlexer.Lexer, out *NamedValueFloat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = float32(in.Float32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll71(out *jwriter.Writer, in NamedValueFloat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Value != 0 {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Value))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamedValueFloat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamedValueFloat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamedValueFloat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamedValueFloat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll71(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll72(in *jlexer.Lexer, out *MountStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PointingA":
			out.PointingA = int32(in.Int32())
		case "PointingB":
			out.PointingB = int32(in.Int32())
		case "PointingC":
			out.PointingC = int32(in.Int32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll72(out *jwriter.Writer, in MountStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PointingA != 0 {
		const prefix string = ",\"PointingA\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.PointingA))
	}
	if in.PointingB != 0 {
		const prefix string = ",\"PointingB\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PointingB))
	}
	if in.PointingC != 0 {
		const prefix string = ",\"PointingC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PointingC))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MountStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MountStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MountStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MountStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll72(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll73(in *jlexer.Lexer, out *MountControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "InputA":
			out.InputA = int32(in.Int32())
		case "InputB":
			out.InputB = int32(in.Int32())
		case "InputC":
			out.InputC = int32(in.Int32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "SavePosition":
			out.SavePosition = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll73(out *jwriter.Writer, in MountControl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.InputA != 0 {
		const prefix string = ",\"InputA\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.InputA))
	}
	if in.InputB != 0 {
		const prefix string = ",\"InputB\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.InputB))
	}
	if in.InputC != 0 {
		const prefix string = ",\"InputC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.InputC))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.SavePosition != 0 {
		const prefix string = ",\"SavePosition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.SavePosition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MountControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MountControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MountControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MountControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll73(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll74(in *jlexer.Lexer, out *MountConfigure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "MountMode":
			out.MountMode = MAV_MOUNT_MODE(in.Int())
		case "StabRoll":
			out.StabRoll = uint8(in.Uint8())
		case "StabPitch":
			out.StabPitch = uint8(in.Uint8())
		case "StabYaw":
			out.StabYaw = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll74(out *jwriter.Writer, in MountConfigure) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.MountMode != 0 {
		const prefix string = ",\"MountMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MountMode))
	}
	if in.StabRoll != 0 {
		const prefix string = ",\"StabRoll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.StabRoll))
	}
	if in.StabPitch != 0 {
		const prefix string = ",\"StabPitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.StabPitch))
	}
	if in.StabYaw != 0 {
		const prefix string = ",\"StabYaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.StabYaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MountConfigure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MountConfigure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MountConfigure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MountConfigure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll74(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll75(in *jlexer.Lexer, out *MissionWritePartialList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll75(out *jwriter.Writer, in MissionWritePartialList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartIndex != 0 {
		const prefix string = ",\"StartIndex\":"
		first = false
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	if in.EndIndex != 0 {
		const prefix string = ",\"EndIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.EndIndex))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionWritePartialList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionWritePartialList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionWritePartialList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionWritePartialList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll75(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll76(in *jlexer.Lexer, out *MissionSetCurrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll76(out *jwriter.Writer, in MissionSetCurrent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionSetCurrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionSetCurrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionSetCurrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionSetCurrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll76(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll77(in *jlexer.Lexer, out *MissionRequestPartialList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll77(out *jwriter.Writer, in MissionRequestPartialList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartIndex != 0 {
		const prefix string = ",\"StartIndex\":"
		first = false
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	if in.EndIndex != 0 {
		const prefix string = ",\"EndIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.EndIndex))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestPartialList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestPartialList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestPartialList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestPartialList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll77(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll78(in *jlexer.Lexer, out *MissionRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll78(out *jwriter.Writer, in MissionRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll78(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll79(in *jlexer.Lexer, out *MissionRequestInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll79(out *jwriter.Writer, in MissionRequestInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll79(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll80(in *jlexer.Lexer, out *MissionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll80(out *jwriter.Writer, in MissionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll80(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll81(in *jlexer.Lexer, out *MissionItemReached) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll81(out *jwriter.Writer, in MissionItemReached) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItemReached) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItemReached) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItemReached) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItemReached) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll81(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll82(in *jlexer.Lexer, out *MissionItemInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = int32(in.Int32())
		case "Y":
			out.Y = int32(in.Int32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll82(out *jwriter.Writer, in MissionItemInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Param1 != 0 {
		const prefix string = ",\"Param1\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	if in.Param2 != 0 {
		const prefix string = ",\"Param2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param2))
	}
	if in.Param3 != 0 {
		const prefix string = ",\"Param3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param3))
	}
	if in.Param4 != 0 {
		const prefix string = ",\"Param4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param4))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Seq))
	}
	if in.Command != 0 {
		const prefix string = ",\"Command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Command))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Frame != 0 {
		const prefix string = ",\"Frame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Frame))
	}
	if in.Current != 0 {
		const prefix string = ",\"Current\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Current))
	}
	if in.Autocontinue != 0 {
		const prefix string = ",\"Autocontinue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItemInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItemInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItemInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItemInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll82(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll83(in *jlexer.Lexer, out *MissionItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll83(out *jwriter.Writer, in MissionItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Param1 != 0 {
		const prefix string = ",\"Param1\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	if in.Param2 != 0 {
		const prefix string = ",\"Param2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param2))
	}
	if in.Param3 != 0 {
		const prefix string = ",\"Param3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param3))
	}
	if in.Param4 != 0 {
		const prefix string = ",\"Param4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param4))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Seq))
	}
	if in.Command != 0 {
		const prefix string = ",\"Command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Command))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Frame != 0 {
		const prefix string = ",\"Frame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Frame))
	}
	if in.Current != 0 {
		const prefix string = ",\"Current\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Current))
	}
	if in.Autocontinue != 0 {
		const prefix string = ",\"Autocontinue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll83(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll84(in *jlexer.Lexer, out *MissionCurrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll84(out *jwriter.Writer, in MissionCurrent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionCurrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionCurrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionCurrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionCurrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll84(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll85(in *jlexer.Lexer, out *MissionCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Count":
			out.Count = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll85(out *jwriter.Writer, in MissionCount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Count != 0 {
		const prefix string = ",\"Count\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Count))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll85(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll86(in *jlexer.Lexer, out *MissionClearAll) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll86(out *jwriter.Writer, in MissionClearAll) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionClearAll) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionClearAll) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionClearAll) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionClearAll) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll86(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll87(in *jlexer.Lexer, out *MissionChanged) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "OriginSysid":
			out.OriginSysid = uint8(in.Uint8())
		case "OriginCompid":
			out.OriginCompid = MAV_COMPONENT(in.Int())
		case "MissionType":
			out.MissionType = MAV_MISSION_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll87(out *jwriter.Writer, in MissionChanged) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartIndex != 0 {
		const prefix string = ",\"StartIndex\":"
		first = false
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	if in.EndIndex != 0 {
		const prefix string = ",\"EndIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.EndIndex))
	}
	if in.OriginSysid != 0 {
		const prefix string = ",\"OriginSysid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.OriginSysid))
	}
	if in.OriginCompid != 0 {
		const prefix string = ",\"OriginCompid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OriginCompid))
	}
	if in.MissionType != 0 {
		const prefix string = ",\"MissionType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MissionType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionChanged) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionChanged) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionChanged) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionChanged) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll87(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll88(in *jlexer.Lexer, out *MissionAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Type":
			out.Type = MAV_MISSION_RESULT(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll88(out *jwriter.Writer, in MissionAck) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll88(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll89(in *jlexer.Lexer, out *MessageInterval) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IntervalUs":
			out.IntervalUs = int32(in.Int32())
		case "MessageID":
			out.MessageID = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll89(out *jwriter.Writer, in MessageInterval) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IntervalUs != 0 {
		const prefix string = ",\"IntervalUs\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.IntervalUs))
	}
	if in.MessageID != 0 {
		const prefix string = ",\"MessageID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.MessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageInterval) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll89(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageInterval) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll89(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageInterval) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll89(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageInterval) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll89(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll90(in *jlexer.Lexer, out *MemoryVect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Address":
			out.Address = uint16(in.Uint16())
		case "Ver":
			out.Ver = uint8(in.Uint8())
		case "Type":
			out.Type = uint8(in.Uint8())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				in.Delim('[')
				if out.Value == nil {
					if !in.IsDelim(']') {
						out.Value = make([]int8, 0, 64)
					} else {
						out.Value = []int8{}
					}
				} else {
					out.Value = (out.Value)[:0]
				}
				for !in.IsDelim(']') {
					var v46 int8
					v46 = int8(in.Int8())
					out.Value = append(out.Value, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll90(out *jwriter.Writer, in MemoryVect) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != 0 {
		const prefix string = ",\"Address\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Address))
	}
	if in.Ver != 0 {
		const prefix string = ",\"Ver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Ver))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Type))
	}
	if len(in.Value) != 0 {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Value {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v48))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoryVect) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll90(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryVect) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll90(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryVect) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll90(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryVect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll90(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll91(in *jlexer.Lexer, out *Meminfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Brkval":
			out.Brkval = uint16(in.Uint16())
		case "Freemem":
			out.Freemem = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll91(out *jwriter.Writer, in Meminfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Brkval != 0 {
		const prefix string = ",\"Brkval\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Brkval))
	}
	if in.Freemem != 0 {
		const prefix string = ",\"Freemem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Freemem))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Meminfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll91(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meminfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll91(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Meminfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll91(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meminfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll91(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll92(in *jlexer.Lexer, out *ManualSetpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "ModeSwitch":
			out.ModeSwitch = uint8(in.Uint8())
		case "ManualOverrideSwitch":
			out.ManualOverrideSwitch = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll92(out *jwriter.Writer, in ManualSetpoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.Thrust != 0 {
		const prefix string = ",\"Thrust\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Thrust))
	}
	if in.ModeSwitch != 0 {
		const prefix string = ",\"ModeSwitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ModeSwitch))
	}
	if in.ManualOverrideSwitch != 0 {
		const prefix string = ",\"ManualOverrideSwitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ManualOverrideSwitch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManualSetpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll92(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManualSetpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll92(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManualSetpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll92(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManualSetpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll92(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll93(in *jlexer.Lexer, out *ManualControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "X":
			out.X = int16(in.Int16())
		case "Y":
			out.Y = int16(in.Int16())
		case "Z":
			out.Z = int16(in.Int16())
		case "R":
			out.R = int16(in.Int16())
		case "Buttons":
			out.Buttons = uint16(in.Uint16())
		case "Target":
			out.Target = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll93(out *jwriter.Writer, in ManualControl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.X != 0 {
		const prefix string = ",\"X\":"
		first = false
		out.RawString(prefix[1:])
		out.Int16(int16(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Z))
	}
	if in.R != 0 {
		const prefix string = ",\"R\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.R))
	}
	if in.Buttons != 0 {
		const prefix string = ",\"Buttons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Buttons))
	}
	if in.Target != 0 {
		const prefix string = ",\"Target\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Target))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManualControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll93(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManualControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll93(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManualControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll93(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManualControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll93(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll94(in *jlexer.Lexer, out *MagCalReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Fitness":
			out.Fitness = float32(in.Float32())
		case "OfsX":
			out.OfsX = float32(in.Float32())
		case "OfsY":
			out.OfsY = float32(in.Float32())
		case "OfsZ":
			out.OfsZ = float32(in.Float32())
		case "DiagX":
			out.DiagX = float32(in.Float32())
		case "DiagY":
			out.DiagY = float32(in.Float32())
		case "DiagZ":
			out.DiagZ = float32(in.Float32())
		case "OffdiagX":
			out.OffdiagX = float32(in.Float32())
		case "OffdiagY":
			out.OffdiagY = float32(in.Float32())
		case "OffdiagZ":
			out.OffdiagZ = float32(in.Float32())
		case "CompassID":
			out.CompassID = uint8(in.Uint8())
		case "CalMask":
			out.CalMask = uint8(in.Uint8())
		case "CalStatus":
			out.CalStatus = MAG_CAL_STATUS(in.Int())
		case "Autosaved":
			out.Autosaved = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll94(out *jwriter.Writer, in MagCalReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Fitness != 0 {
		const prefix string = ",\"Fitness\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Fitness))
	}
	if in.OfsX != 0 {
		const prefix string = ",\"OfsX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.OfsX))
	}
	if in.OfsY != 0 {
		const prefix string = ",\"OfsY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.OfsY))
	}
	if in.OfsZ != 0 {
		const prefix string = ",\"OfsZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.OfsZ))
	}
	if in.DiagX != 0 {
		const prefix string = ",\"DiagX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DiagX))
	}
	if in.DiagY != 0 {
		const prefix string = ",\"DiagY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DiagY))
	}
	if in.DiagZ != 0 {
		const prefix string = ",\"DiagZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DiagZ))
	}
	if in.OffdiagX != 0 {
		const prefix string = ",\"OffdiagX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.OffdiagX))
	}
	if in.OffdiagY != 0 {
		const prefix string = ",\"OffdiagY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.OffdiagY))
	}
	if in.OffdiagZ != 0 {
		const prefix string = ",\"OffdiagZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.OffdiagZ))
	}
	if in.CompassID != 0 {
		const prefix string = ",\"CompassID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CompassID))
	}
	if in.CalMask != 0 {
		const prefix string = ",\"CalMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CalMask))
	}
	if in.CalStatus != 0 {
		const prefix string = ",\"CalStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CalStatus))
	}
	if in.Autosaved != 0 {
		const prefix string = ",\"Autosaved\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Autosaved))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MagCalReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll94(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MagCalReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll94(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MagCalReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll94(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MagCalReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll94(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll95(in *jlexer.Lexer, out *MagCalProgress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DirectionX":
			out.DirectionX = float32(in.Float32())
		case "DirectionY":
			out.DirectionY = float32(in.Float32())
		case "DirectionZ":
			out.DirectionZ = float32(in.Float32())
		case "CompassID":
			out.CompassID = uint8(in.Uint8())
		case "CalMask":
			out.CalMask = uint8(in.Uint8())
		case "CalStatus":
			out.CalStatus = MAG_CAL_STATUS(in.Int())
		case "Attempt":
			out.Attempt = uint8(in.Uint8())
		case "CompletionPct":
			out.CompletionPct = uint8(in.Uint8())
		case "CompletionMask":
			if in.IsNull() {
				in.Skip()
				out.CompletionMask = nil
			} else {
				out.CompletionMask = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll95(out *jwriter.Writer, in MagCalProgress) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DirectionX != 0 {
		const prefix string = ",\"DirectionX\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.DirectionX))
	}
	if in.DirectionY != 0 {
		const prefix string = ",\"DirectionY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DirectionY))
	}
	if in.DirectionZ != 0 {
		const prefix string = ",\"DirectionZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DirectionZ))
	}
	if in.CompassID != 0 {
		const prefix string = ",\"CompassID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CompassID))
	}
	if in.CalMask != 0 {
		const prefix string = ",\"CalMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CalMask))
	}
	if in.CalStatus != 0 {
		const prefix string = ",\"CalStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CalStatus))
	}
	if in.Attempt != 0 {
		const prefix string = ",\"Attempt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Attempt))
	}
	if in.CompletionPct != 0 {
		const prefix string = ",\"CompletionPct\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CompletionPct))
	}
	if len(in.CompletionMask) != 0 {
		const prefix string = ",\"CompletionMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.CompletionMask)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MagCalProgress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll95(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MagCalProgress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll95(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MagCalProgress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll95(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MagCalProgress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll95(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll96(in *jlexer.Lexer, out *LogRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Start":
			out.Start = uint16(in.Uint16())
		case "End":
			out.End = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll96(out *jwriter.Writer, in LogRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Start != 0 {
		const prefix string = ",\"Start\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Start))
	}
	if in.End != 0 {
		const prefix string = ",\"End\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.End))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll96(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll96(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll96(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll96(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll97(in *jlexer.Lexer, out *LogRequestEnd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll97(out *jwriter.Writer, in LogRequestEnd) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestEnd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll97(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestEnd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll97(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestEnd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll97(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestEnd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll97(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll98(in *jlexer.Lexer, out *LogRequestData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ofs":
			out.Ofs = uint32(in.Uint32())
		case "Count":
			out.Count = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll98(out *jwriter.Writer, in LogRequestData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ofs != 0 {
		const prefix string = ",\"Ofs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Ofs))
	}
	if in.Count != 0 {
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Count))
	}
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ID))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll98(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll98(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll98(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll98(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll99(in *jlexer.Lexer, out *LogErase) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll99(out *jwriter.Writer, in LogErase) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogErase) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll99(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogErase) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll99(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogErase) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll99(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogErase) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll99(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll100(in *jlexer.Lexer, out *LogEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUtc":
			out.TimeUtc = uint32(in.Uint32())
		case "Size":
			out.Size = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "NumLogs":
			out.NumLogs = uint16(in.Uint16())
		case "LastLogNum":
			out.LastLogNum = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll100(out *jwriter.Writer, in LogEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUtc != 0 {
		const prefix string = ",\"TimeUtc\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeUtc))
	}
	if in.Size != 0 {
		const prefix string = ",\"Size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Size))
	}
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ID))
	}
	if in.NumLogs != 0 {
		const prefix string = ",\"NumLogs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.NumLogs))
	}
	if in.LastLogNum != 0 {
		const prefix string = ",\"LastLogNum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.LastLogNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll100(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll100(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll100(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll100(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll101(in *jlexer.Lexer, out *LogData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ofs":
			out.Ofs = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "Count":
			out.Count = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll101(out *jwriter.Writer, in LogData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ofs != 0 {
		const prefix string = ",\"Ofs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Ofs))
	}
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ID))
	}
	if in.Count != 0 {
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Count))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll101(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll101(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll101(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll101(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll102(in *jlexer.Lexer, out *LocalPositionNedSystemGlobalOffset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll102(out *jwriter.Writer, in LocalPositionNedSystemGlobalOffset) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNedSystemGlobalOffset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll102(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNedSystemGlobalOffset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll102(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNedSystemGlobalOffset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll102(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNedSystemGlobalOffset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll102(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll103(in *jlexer.Lexer, out *LocalPositionNedCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Ax":
			out.Ax = float32(in.Float32())
		case "Ay":
			out.Ay = float32(in.Float32())
		case "Az":
			out.Az = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v55 float32
					v55 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstimatorType":
			out.EstimatorType = MAV_ESTIMATOR_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll103(out *jwriter.Writer, in LocalPositionNedCov) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vz))
	}
	if in.Ax != 0 {
		const prefix string = ",\"Ax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ax))
	}
	if in.Ay != 0 {
		const prefix string = ",\"Ay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ay))
	}
	if in.Az != 0 {
		const prefix string = ",\"Az\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Az))
	}
	if len(in.Covariance) != 0 {
		const prefix string = ",\"Covariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Covariance {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v57))
			}
			out.RawByte(']')
		}
	}
	if in.EstimatorType != 0 {
		const prefix string = ",\"EstimatorType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EstimatorType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNedCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll103(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNedCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll103(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNedCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll103(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNedCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll103(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll104(in *jlexer.Lexer, out *LocalPositionNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll104(out *jwriter.Writer, in LocalPositionNed) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vz))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll104(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll104(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll104(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll104(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll105(in *jlexer.Lexer, out *LinkNodeStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "TxRate":
			out.TxRate = uint32(in.Uint32())
		case "RxRate":
			out.RxRate = uint32(in.Uint32())
		case "MessagesSent":
			out.MessagesSent = uint32(in.Uint32())
		case "MessagesReceived":
			out.MessagesReceived = uint32(in.Uint32())
		case "MessagesLost":
			out.MessagesLost = uint32(in.Uint32())
		case "RxParseErr":
			out.RxParseErr = uint16(in.Uint16())
		case "TxOverflows":
			out.TxOverflows = uint16(in.Uint16())
		case "RxOverflows":
			out.RxOverflows = uint16(in.Uint16())
		case "TxBuf":
			out.TxBuf = uint8(in.Uint8())
		case "RxBuf":
			out.RxBuf = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll105(out *jwriter.Writer, in LinkNodeStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Timestamp != 0 {
		const prefix string = ",\"Timestamp\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	if in.TxRate != 0 {
		const prefix string = ",\"TxRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TxRate))
	}
	if in.RxRate != 0 {
		const prefix string = ",\"RxRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.RxRate))
	}
	if in.MessagesSent != 0 {
		const prefix string = ",\"MessagesSent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MessagesSent))
	}
	if in.MessagesReceived != 0 {
		const prefix string = ",\"MessagesReceived\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MessagesReceived))
	}
	if in.MessagesLost != 0 {
		const prefix string = ",\"MessagesLost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MessagesLost))
	}
	if in.RxParseErr != 0 {
		const prefix string = ",\"RxParseErr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.RxParseErr))
	}
	if in.TxOverflows != 0 {
		const prefix string = ",\"TxOverflows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.TxOverflows))
	}
	if in.RxOverflows != 0 {
		const prefix string = ",\"RxOverflows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.RxOverflows))
	}
	if in.TxBuf != 0 {
		const prefix string = ",\"TxBuf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TxBuf))
	}
	if in.RxBuf != 0 {
		const prefix string = ",\"RxBuf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.RxBuf))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinkNodeStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll105(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinkNodeStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll105(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinkNodeStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll105(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinkNodeStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll105(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll106(in *jlexer.Lexer, out *LimitsStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LastTrigger":
			out.LastTrigger = uint32(in.Uint32())
		case "LastAction":
			out.LastAction = uint32(in.Uint32())
		case "LastRecovery":
			out.LastRecovery = uint32(in.Uint32())
		case "LastClear":
			out.LastClear = uint32(in.Uint32())
		case "BreachCount":
			out.BreachCount = uint16(in.Uint16())
		case "LimitsState":
			out.LimitsState = LIMITS_STATE(in.Int())
		case "ModsEnabled":
			out.ModsEnabled = LIMIT_MODULE(in.Int())
		case "ModsRequired":
			out.ModsRequired = LIMIT_MODULE(in.Int())
		case "ModsTriggered":
			out.ModsTriggered = LIMIT_MODULE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll106(out *jwriter.Writer, in LimitsStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LastTrigger != 0 {
		const prefix string = ",\"LastTrigger\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.LastTrigger))
	}
	if in.LastAction != 0 {
		const prefix string = ",\"LastAction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.LastAction))
	}
	if in.LastRecovery != 0 {
		const prefix string = ",\"LastRecovery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.LastRecovery))
	}
	if in.LastClear != 0 {
		const prefix string = ",\"LastClear\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.LastClear))
	}
	if in.BreachCount != 0 {
		const prefix string = ",\"BreachCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.BreachCount))
	}
	if in.LimitsState != 0 {
		const prefix string = ",\"LimitsState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LimitsState))
	}
	if in.ModsEnabled != 0 {
		const prefix string = ",\"ModsEnabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ModsEnabled))
	}
	if in.ModsRequired != 0 {
		const prefix string = ",\"ModsRequired\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ModsRequired))
	}
	if in.ModsTriggered != 0 {
		const prefix string = ",\"ModsTriggered\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ModsTriggered))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitsStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll106(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitsStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll106(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitsStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll106(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitsStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll106(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll107(in *jlexer.Lexer, out *LedControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Instance":
			out.Instance = uint8(in.Uint8())
		case "Pattern":
			out.Pattern = uint8(in.Uint8())
		case "CustomLen":
			out.CustomLen = uint8(in.Uint8())
		case "CustomBytes":
			if in.IsNull() {
				in.Skip()
				out.CustomBytes = nil
			} else {
				out.CustomBytes = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll107(out *jwriter.Writer, in LedControl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Instance != 0 {
		const prefix string = ",\"Instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Instance))
	}
	if in.Pattern != 0 {
		const prefix string = ",\"Pattern\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Pattern))
	}
	if in.CustomLen != 0 {
		const prefix string = ",\"CustomLen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CustomLen))
	}
	if len(in.CustomBytes) != 0 {
		const prefix string = ",\"CustomBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.CustomBytes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LedControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll107(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LedControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll107(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LedControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll107(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LedControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll107(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll108(in *jlexer.Lexer, out *LandingTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AngleX":
			out.AngleX = float32(in.Float32())
		case "AngleY":
			out.AngleY = float32(in.Float32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "SizeX":
			out.SizeX = float32(in.Float32())
		case "SizeY":
			out.SizeY = float32(in.Float32())
		case "TargetNum":
			out.TargetNum = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll108(out *jwriter.Writer, in LandingTarget) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.AngleX != 0 {
		const prefix string = ",\"AngleX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AngleX))
	}
	if in.AngleY != 0 {
		const prefix string = ",\"AngleY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AngleY))
	}
	if in.Distance != 0 {
		const prefix string = ",\"Distance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Distance))
	}
	if in.SizeX != 0 {
		const prefix string = ",\"SizeX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.SizeX))
	}
	if in.SizeY != 0 {
		const prefix string = ",\"SizeY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.SizeY))
	}
	if in.TargetNum != 0 {
		const prefix string = ",\"TargetNum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetNum))
	}
	if in.Frame != 0 {
		const prefix string = ",\"Frame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LandingTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll108(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LandingTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll108(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LandingTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll108(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LandingTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll108(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll109(in *jlexer.Lexer, out *Hwstatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Vcc":
			out.Vcc = uint16(in.Uint16())
		case "I2cerr":
			out.I2cerr = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll109(out *jwriter.Writer, in Hwstatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Vcc != 0 {
		const prefix string = ",\"Vcc\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Vcc))
	}
	if in.I2cerr != 0 {
		const prefix string = ",\"I2cerr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.I2cerr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Hwstatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll109(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Hwstatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll109(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Hwstatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll109(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Hwstatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll109(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll110(in *jlexer.Lexer, out *HomePosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v61 float32
					v61 = float32(in.Float32())
					out.Q = append(out.Q, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ApproachX":
			out.ApproachX = float32(in.Float32())
		case "ApproachY":
			out.ApproachY = float32(in.Float32())
		case "ApproachZ":
			out.ApproachZ = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll110(out *jwriter.Writer, in HomePosition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		const prefix string = ",\"Latitude\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"Longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Longitude))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Altitude))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if len(in.Q) != 0 {
		const prefix string = ",\"Q\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.Q {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v63))
			}
			out.RawByte(']')
		}
	}
	if in.ApproachX != 0 {
		const prefix string = ",\"ApproachX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ApproachX))
	}
	if in.ApproachY != 0 {
		const prefix string = ",\"ApproachY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ApproachY))
	}
	if in.ApproachZ != 0 {
		const prefix string = ",\"ApproachZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ApproachZ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HomePosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HomePosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HomePosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HomePosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll110(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll111(in *jlexer.Lexer, out *HilStateQuaternion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AttitudeQuaternion":
			if in.IsNull() {
				in.Skip()
				out.AttitudeQuaternion = nil
			} else {
				in.Delim('[')
				if out.AttitudeQuaternion == nil {
					if !in.IsDelim(']') {
						out.AttitudeQuaternion = make([]float32, 0, 16)
					} else {
						out.AttitudeQuaternion = []float32{}
					}
				} else {
					out.AttitudeQuaternion = (out.AttitudeQuaternion)[:0]
				}
				for !in.IsDelim(']') {
					var v64 float32
					v64 = float32(in.Float32())
					out.AttitudeQuaternion = append(out.AttitudeQuaternion, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "IndAirspeed":
			out.IndAirspeed = uint16(in.Uint16())
		case "TrueAirspeed":
			out.TrueAirspeed = uint16(in.Uint16())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll111(out *jwriter.Writer, in HilStateQuaternion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if len(in.AttitudeQuaternion) != 0 {
		const prefix string = ",\"AttitudeQuaternion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.AttitudeQuaternion {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v66))
			}
			out.RawByte(']')
		}
	}
	if in.Rollspeed != 0 {
		const prefix string = ",\"Rollspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rollspeed))
	}
	if in.Pitchspeed != 0 {
		const prefix string = ",\"Pitchspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitchspeed))
	}
	if in.Yawspeed != 0 {
		const prefix string = ",\"Yawspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yawspeed))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Alt))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vz))
	}
	if in.IndAirspeed != 0 {
		const prefix string = ",\"IndAirspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.IndAirspeed))
	}
	if in.TrueAirspeed != 0 {
		const prefix string = ",\"TrueAirspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.TrueAirspeed))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zacc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilStateQuaternion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilStateQuaternion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilStateQuaternion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilStateQuaternion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll111(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll112(in *jlexer.Lexer, out *HilState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll112(out *jwriter.Writer, in HilState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.Rollspeed != 0 {
		const prefix string = ",\"Rollspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rollspeed))
	}
	if in.Pitchspeed != 0 {
		const prefix string = ",\"Pitchspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitchspeed))
	}
	if in.Yawspeed != 0 {
		const prefix string = ",\"Yawspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yawspeed))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Alt))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vz))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Zacc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll112(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll112(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll112(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll112(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll113(in *jlexer.Lexer, out *HilSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Xmag":
			out.Xmag = float32(in.Float32())
		case "Ymag":
			out.Ymag = float32(in.Float32())
		case "Zmag":
			out.Zmag = float32(in.Float32())
		case "AbsPressure":
			out.AbsPressure = float32(in.Float32())
		case "DiffPressure":
			out.DiffPressure = float32(in.Float32())
		case "PressureAlt":
			out.PressureAlt = float32(in.Float32())
		case "Temperature":
			out.Temperature = float32(in.Float32())
		case "FieldsUpdated":
			out.FieldsUpdated = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll113(out *jwriter.Writer, in HilSensor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zacc))
	}
	if in.Xgyro != 0 {
		const prefix string = ",\"Xgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xgyro))
	}
	if in.Ygyro != 0 {
		const prefix string = ",\"Ygyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ygyro))
	}
	if in.Zgyro != 0 {
		const prefix string = ",\"Zgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zgyro))
	}
	if in.Xmag != 0 {
		const prefix string = ",\"Xmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xmag))
	}
	if in.Ymag != 0 {
		const prefix string = ",\"Ymag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ymag))
	}
	if in.Zmag != 0 {
		const prefix string = ",\"Zmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zmag))
	}
	if in.AbsPressure != 0 {
		const prefix string = ",\"AbsPressure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AbsPressure))
	}
	if in.DiffPressure != 0 {
		const prefix string = ",\"DiffPressure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DiffPressure))
	}
	if in.PressureAlt != 0 {
		const prefix string = ",\"PressureAlt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PressureAlt))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Temperature))
	}
	if in.FieldsUpdated != 0 {
		const prefix string = ",\"FieldsUpdated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.FieldsUpdated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll113(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll113(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll113(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll113(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll114(in *jlexer.Lexer, out *HilRcInputsRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Chan9Raw":
			out.Chan9Raw = uint16(in.Uint16())
		case "Chan10Raw":
			out.Chan10Raw = uint16(in.Uint16())
		case "Chan11Raw":
			out.Chan11Raw = uint16(in.Uint16())
		case "Chan12Raw":
			out.Chan12Raw = uint16(in.Uint16())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll114(out *jwriter.Writer, in HilRcInputsRaw) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Chan1Raw != 0 {
		const prefix string = ",\"Chan1Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan1Raw))
	}
	if in.Chan2Raw != 0 {
		const prefix string = ",\"Chan2Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan2Raw))
	}
	if in.Chan3Raw != 0 {
		const prefix string = ",\"Chan3Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan3Raw))
	}
	if in.Chan4Raw != 0 {
		const prefix string = ",\"Chan4Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan4Raw))
	}
	if in.Chan5Raw != 0 {
		const prefix string = ",\"Chan5Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan5Raw))
	}
	if in.Chan6Raw != 0 {
		const prefix string = ",\"Chan6Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan6Raw))
	}
	if in.Chan7Raw != 0 {
		const prefix string = ",\"Chan7Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan7Raw))
	}
	if in.Chan8Raw != 0 {
		const prefix string = ",\"Chan8Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan8Raw))
	}
	if in.Chan9Raw != 0 {
		const prefix string = ",\"Chan9Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan9Raw))
	}
	if in.Chan10Raw != 0 {
		const prefix string = ",\"Chan10Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan10Raw))
	}
	if in.Chan11Raw != 0 {
		const prefix string = ",\"Chan11Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan11Raw))
	}
	if in.Chan12Raw != 0 {
		const prefix string = ",\"Chan12Raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Chan12Raw))
	}
	if in.Rssi != 0 {
		const prefix string = ",\"Rssi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilRcInputsRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll114(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilRcInputsRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll114(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilRcInputsRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll114(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilRcInputsRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll114(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll115(in *jlexer.Lexer, out *HilOpticalFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "IntegrationTimeUs":
			out.IntegrationTimeUs = uint32(in.Uint32())
		case "IntegratedX":
			out.IntegratedX = float32(in.Float32())
		case "IntegratedY":
			out.IntegratedY = float32(in.Float32())
		case "IntegratedXgyro":
			out.IntegratedXgyro = float32(in.Float32())
		case "IntegratedYgyro":
			out.IntegratedYgyro = float32(in.Float32())
		case "IntegratedZgyro":
			out.IntegratedZgyro = float32(in.Float32())
		case "TimeDeltaDistanceUs":
			out.TimeDeltaDistanceUs = uint32(in.Uint32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll115(out *jwriter.Writer, in HilOpticalFlow) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.IntegrationTimeUs != 0 {
		const prefix string = ",\"IntegrationTimeUs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.IntegrationTimeUs))
	}
	if in.IntegratedX != 0 {
		const prefix string = ",\"IntegratedX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedX))
	}
	if in.IntegratedY != 0 {
		const prefix string = ",\"IntegratedY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedY))
	}
	if in.IntegratedXgyro != 0 {
		const prefix string = ",\"IntegratedXgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedXgyro))
	}
	if in.IntegratedYgyro != 0 {
		const prefix string = ",\"IntegratedYgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedYgyro))
	}
	if in.IntegratedZgyro != 0 {
		const prefix string = ",\"IntegratedZgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntegratedZgyro))
	}
	if in.TimeDeltaDistanceUs != 0 {
		const prefix string = ",\"TimeDeltaDistanceUs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TimeDeltaDistanceUs))
	}
	if in.Distance != 0 {
		const prefix string = ",\"Distance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Distance))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Temperature))
	}
	if in.SensorID != 0 {
		const prefix string = ",\"SensorID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.SensorID))
	}
	if in.Quality != 0 {
		const prefix string = ",\"Quality\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilOpticalFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll115(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilOpticalFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll115(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilOpticalFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll115(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilOpticalFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll115(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll116(in *jlexer.Lexer, out *HilGps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Vn":
			out.Vn = int16(in.Int16())
		case "Ve":
			out.Ve = int16(in.Int16())
		case "Vd":
			out.Vd = int16(in.Int16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = uint8(in.Uint8())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll116(out *jwriter.Writer, in HilGps) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Alt))
	}
	if in.Eph != 0 {
		const prefix string = ",\"Eph\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Eph))
	}
	if in.Epv != 0 {
		const prefix string = ",\"Epv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Epv))
	}
	if in.Vel != 0 {
		const prefix string = ",\"Vel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Vel))
	}
	if in.Vn != 0 {
		const prefix string = ",\"Vn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vn))
	}
	if in.Ve != 0 {
		const prefix string = ",\"Ve\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Ve))
	}
	if in.Vd != 0 {
		const prefix string = ",\"Vd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vd))
	}
	if in.Cog != 0 {
		const prefix string = ",\"Cog\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Cog))
	}
	if in.FixType != 0 {
		const prefix string = ",\"FixType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.FixType))
	}
	if in.SatellitesVisible != 0 {
		const prefix string = ",\"SatellitesVisible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilGps) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll116(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilGps) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll116(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilGps) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll116(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilGps) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll116(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll117(in *jlexer.Lexer, out *HilControls) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "RollAilerons":
			out.RollAilerons = float32(in.Float32())
		case "PitchElevator":
			out.PitchElevator = float32(in.Float32())
		case "YawRudder":
			out.YawRudder = float32(in.Float32())
		case "Throttle":
			out.Throttle = float32(in.Float32())
		case "Aux1":
			out.Aux1 = float32(in.Float32())
		case "Aux2":
			out.Aux2 = float32(in.Float32())
		case "Aux3":
			out.Aux3 = float32(in.Float32())
		case "Aux4":
			out.Aux4 = float32(in.Float32())
		case "Mode":
			out.Mode = MAV_MODE(in.Int())
		case "NavMode":
			out.NavMode = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll117(out *jwriter.Writer, in HilControls) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.RollAilerons != 0 {
		const prefix string = ",\"RollAilerons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.RollAilerons))
	}
	if in.PitchElevator != 0 {
		const prefix string = ",\"PitchElevator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PitchElevator))
	}
	if in.YawRudder != 0 {
		const prefix string = ",\"YawRudder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YawRudder))
	}
	if in.Throttle != 0 {
		const prefix string = ",\"Throttle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Throttle))
	}
	if in.Aux1 != 0 {
		const prefix string = ",\"Aux1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Aux1))
	}
	if in.Aux2 != 0 {
		const prefix string = ",\"Aux2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Aux2))
	}
	if in.Aux3 != 0 {
		const prefix string = ",\"Aux3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Aux3))
	}
	if in.Aux4 != 0 {
		const prefix string = ",\"Aux4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Aux4))
	}
	if in.Mode != 0 {
		const prefix string = ",\"Mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Mode))
	}
	if in.NavMode != 0 {
		const prefix string = ",\"NavMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.NavMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilControls) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll117(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilControls) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll117(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilControls) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll117(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilControls) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll117(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll118(in *jlexer.Lexer, out *HilActuatorControls) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Flags":
			out.Flags = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v67 float32
					v67 = float32(in.Float32())
					out.Controls = append(out.Controls, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Mode":
			out.Mode = MAV_MODE_FLAG(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll118(out *jwriter.Writer, in HilActuatorControls) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Flags))
	}
	if len(in.Controls) != 0 {
		const prefix string = ",\"Controls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.Controls {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v69))
			}
			out.RawByte(']')
		}
	}
	if in.Mode != 0 {
		const prefix string = ",\"Mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilActuatorControls) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll118(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilActuatorControls) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll118(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilActuatorControls) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll118(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilActuatorControls) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll118(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll119(in *jlexer.Lexer, out *HighresImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Xmag":
			out.Xmag = float32(in.Float32())
		case "Ymag":
			out.Ymag = float32(in.Float32())
		case "Zmag":
			out.Zmag = float32(in.Float32())
		case "AbsPressure":
			out.AbsPressure = float32(in.Float32())
		case "DiffPressure":
			out.DiffPressure = float32(in.Float32())
		case "PressureAlt":
			out.PressureAlt = float32(in.Float32())
		case "Temperature":
			out.Temperature = float32(in.Float32())
		case "FieldsUpdated":
			out.FieldsUpdated = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll119(out *jwriter.Writer, in HighresImu) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Xacc != 0 {
		const prefix string = ",\"Xacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xacc))
	}
	if in.Yacc != 0 {
		const prefix string = ",\"Yacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yacc))
	}
	if in.Zacc != 0 {
		const prefix string = ",\"Zacc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zacc))
	}
	if in.Xgyro != 0 {
		const prefix string = ",\"Xgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xgyro))
	}
	if in.Ygyro != 0 {
		const prefix string = ",\"Ygyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ygyro))
	}
	if in.Zgyro != 0 {
		const prefix string = ",\"Zgyro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zgyro))
	}
	if in.Xmag != 0 {
		const prefix string = ",\"Xmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Xmag))
	}
	if in.Ymag != 0 {
		const prefix string = ",\"Ymag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ymag))
	}
	if in.Zmag != 0 {
		const prefix string = ",\"Zmag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Zmag))
	}
	if in.AbsPressure != 0 {
		const prefix string = ",\"AbsPressure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AbsPressure))
	}
	if in.DiffPressure != 0 {
		const prefix string = ",\"DiffPressure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DiffPressure))
	}
	if in.PressureAlt != 0 {
		const prefix string = ",\"PressureAlt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PressureAlt))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Temperature))
	}
	if in.FieldsUpdated != 0 {
		const prefix string = ",\"FieldsUpdated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.FieldsUpdated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighresImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll119(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighresImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll119(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighresImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll119(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighresImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll119(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll120(in *jlexer.Lexer, out *HighLatency2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint32(in.Uint32())
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "CustomMode":
			out.CustomMode = uint16(in.Uint16())
		case "Altitude":
			out.Altitude = int16(in.Int16())
		case "TargetAltitude":
			out.TargetAltitude = int16(in.Int16())
		case "TargetDistance":
			out.TargetDistance = uint16(in.Uint16())
		case "WpNum":
			out.WpNum = uint16(in.Uint16())
		case "FailureFlags":
			out.FailureFlags = HL_FAILURE_FLAG(in.Int())
		case "Type":
			out.Type = MAV_TYPE(in.Int())
		case "Autopilot":
			out.Autopilot = MAV_AUTOPILOT(in.Int())
		case "Heading":
			out.Heading = uint8(in.Uint8())
		case "TargetHeading":
			out.TargetHeading = uint8(in.Uint8())
		case "Throttle":
			out.Throttle = uint8(in.Uint8())
		case "Airspeed":
			out.Airspeed = uint8(in.Uint8())
		case "AirspeedSp":
			out.AirspeedSp = uint8(in.Uint8())
		case "Groundspeed":
			out.Groundspeed = uint8(in.Uint8())
		case "Windspeed":
			out.Windspeed = uint8(in.Uint8())
		case "WindHeading":
			out.WindHeading = uint8(in.Uint8())
		case "Eph":
			out.Eph = uint8(in.Uint8())
		case "Epv":
			out.Epv = uint8(in.Uint8())
		case "TemperatureAir":
			out.TemperatureAir = int8(in.Int8())
		case "ClimbRate":
			out.ClimbRate = int8(in.Int8())
		case "Battery":
			out.Battery = int8(in.Int8())
		case "Custom0":
			out.Custom0 = int8(in.Int8())
		case "Custom1":
			out.Custom1 = int8(in.Int8())
		case "Custom2":
			out.Custom2 = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll120(out *jwriter.Writer, in HighLatency2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Timestamp != 0 {
		const prefix string = ",\"Timestamp\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Timestamp))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"Latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"Longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Longitude))
	}
	if in.CustomMode != 0 {
		const prefix string = ",\"CustomMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.CustomMode))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Altitude))
	}
	if in.TargetAltitude != 0 {
		const prefix string = ",\"TargetAltitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.TargetAltitude))
	}
	if in.TargetDistance != 0 {
		const prefix string = ",\"TargetDistance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.TargetDistance))
	}
	if in.WpNum != 0 {
		const prefix string = ",\"WpNum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.WpNum))
	}
	if in.FailureFlags != 0 {
		const prefix string = ",\"FailureFlags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FailureFlags))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Autopilot != 0 {
		const prefix string = ",\"Autopilot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Autopilot))
	}
	if in.Heading != 0 {
		const prefix string = ",\"Heading\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Heading))
	}
	if in.TargetHeading != 0 {
		const prefix string = ",\"TargetHeading\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetHeading))
	}
	if in.Throttle != 0 {
		const prefix string = ",\"Throttle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Throttle))
	}
	if in.Airspeed != 0 {
		const prefix string = ",\"Airspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Airspeed))
	}
	if in.AirspeedSp != 0 {
		const prefix string = ",\"AirspeedSp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.AirspeedSp))
	}
	if in.Groundspeed != 0 {
		const prefix string = ",\"Groundspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Groundspeed))
	}
	if in.Windspeed != 0 {
		const prefix string = ",\"Windspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Windspeed))
	}
	if in.WindHeading != 0 {
		const prefix string = ",\"WindHeading\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.WindHeading))
	}
	if in.Eph != 0 {
		const prefix string = ",\"Eph\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Eph))
	}
	if in.Epv != 0 {
		const prefix string = ",\"Epv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Epv))
	}
	if in.TemperatureAir != 0 {
		const prefix string = ",\"TemperatureAir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.TemperatureAir))
	}
	if in.ClimbRate != 0 {
		const prefix string = ",\"ClimbRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.ClimbRate))
	}
	if in.Battery != 0 {
		const prefix string = ",\"Battery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Battery))
	}
	if in.Custom0 != 0 {
		const prefix string = ",\"Custom0\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Custom0))
	}
	if in.Custom1 != 0 {
		const prefix string = ",\"Custom1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Custom1))
	}
	if in.Custom2 != 0 {
		const prefix string = ",\"Custom2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Custom2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighLatency2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll120(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighLatency2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll120(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighLatency2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll120(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighLatency2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll120(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll121(in *jlexer.Lexer, out *HighLatency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Roll":
			out.Roll = int16(in.Int16())
		case "Pitch":
			out.Pitch = int16(in.Int16())
		case "Heading":
			out.Heading = uint16(in.Uint16())
		case "HeadingSp":
			out.HeadingSp = int16(in.Int16())
		case "AltitudeAmsl":
			out.AltitudeAmsl = int16(in.Int16())
		case "AltitudeSp":
			out.AltitudeSp = int16(in.Int16())
		case "WpDistance":
			out.WpDistance = uint16(in.Uint16())
		case "BaseMode":
			out.BaseMode = MAV_MODE_FLAG(in.Int())
		case "LandedState":
			out.LandedState = MAV_LANDED_STATE(in.Int())
		case "Throttle":
			out.Throttle = int8(in.Int8())
		case "Airspeed":
			out.Airspeed = uint8(in.Uint8())
		case "AirspeedSp":
			out.AirspeedSp = uint8(in.Uint8())
		case "Groundspeed":
			out.Groundspeed = uint8(in.Uint8())
		case "ClimbRate":
			out.ClimbRate = int8(in.Int8())
		case "GpsNsat":
			out.GpsNsat = uint8(in.Uint8())
		case "GpsFixType":
			out.GpsFixType = GPS_FIX_TYPE(in.Int())
		case "BatteryRemaining":
			out.BatteryRemaining = uint8(in.Uint8())
		case "Temperature":
			out.Temperature = int8(in.Int8())
		case "TemperatureAir":
			out.TemperatureAir = int8(in.Int8())
		case "Failsafe":
			out.Failsafe = uint8(in.Uint8())
		case "WpNum":
			out.WpNum = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll121(out *jwriter.Writer, in HighLatency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomMode != 0 {
		const prefix string = ",\"CustomMode\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"Latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"Longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Longitude))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Pitch))
	}
	if in.Heading != 0 {
		const prefix string = ",\"Heading\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Heading))
	}
	if in.HeadingSp != 0 {
		const prefix string = ",\"HeadingSp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.HeadingSp))
	}
	if in.AltitudeAmsl != 0 {
		const prefix string = ",\"AltitudeAmsl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.AltitudeAmsl))
	}
	if in.AltitudeSp != 0 {
		const prefix string = ",\"AltitudeSp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.AltitudeSp))
	}
	if in.WpDistance != 0 {
		const prefix string = ",\"WpDistance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.WpDistance))
	}
	if in.BaseMode != 0 {
		const prefix string = ",\"BaseMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BaseMode))
	}
	if in.LandedState != 0 {
		const prefix string = ",\"LandedState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LandedState))
	}
	if in.Throttle != 0 {
		const prefix string = ",\"Throttle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Throttle))
	}
	if in.Airspeed != 0 {
		const prefix string = ",\"Airspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Airspeed))
	}
	if in.AirspeedSp != 0 {
		const prefix string = ",\"AirspeedSp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.AirspeedSp))
	}
	if in.Groundspeed != 0 {
		const prefix string = ",\"Groundspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Groundspeed))
	}
	if in.ClimbRate != 0 {
		const prefix string = ",\"ClimbRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.ClimbRate))
	}
	if in.GpsNsat != 0 {
		const prefix string = ",\"GpsNsat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.GpsNsat))
	}
	if in.GpsFixType != 0 {
		const prefix string = ",\"GpsFixType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GpsFixType))
	}
	if in.BatteryRemaining != 0 {
		const prefix string = ",\"BatteryRemaining\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.BatteryRemaining))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.Temperature))
	}
	if in.TemperatureAir != 0 {
		const prefix string = ",\"TemperatureAir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.TemperatureAir))
	}
	if in.Failsafe != 0 {
		const prefix string = ",\"Failsafe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Failsafe))
	}
	if in.WpNum != 0 {
		const prefix string = ",\"WpNum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.WpNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighLatency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll121(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighLatency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll121(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighLatency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll121(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighLatency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll121(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll122(in *jlexer.Lexer, out *Heartbeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "Type":
			out.Type = MAV_TYPE(in.Int())
		case "Autopilot":
			out.Autopilot = MAV_AUTOPILOT(in.Int())
		case "BaseMode":
			out.BaseMode = MAV_MODE_FLAG(in.Int())
		case "SystemStatus":
			out.SystemStatus = MAV_STATE(in.Int())
		case "MavlinkVersion":
			out.MavlinkVersion = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll122(out *jwriter.Writer, in Heartbeat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CustomMode != 0 {
		const prefix string = ",\"CustomMode\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Autopilot != 0 {
		const prefix string = ",\"Autopilot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Autopilot))
	}
	if in.BaseMode != 0 {
		const prefix string = ",\"BaseMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BaseMode))
	}
	if in.SystemStatus != 0 {
		const prefix string = ",\"SystemStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SystemStatus))
	}
	if in.MavlinkVersion != 0 {
		const prefix string = ",\"MavlinkVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.MavlinkVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Heartbeat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll122(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Heartbeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll122(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Heartbeat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll122(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Heartbeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll122(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll123(in *jlexer.Lexer, out *GpsStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		case "SatellitePrn":
			if in.IsNull() {
				in.Skip()
				out.SatellitePrn = nil
			} else {
				out.SatellitePrn = in.Bytes()
			}
		case "SatelliteUsed":
			if in.IsNull() {
				in.Skip()
				out.SatelliteUsed = nil
			} else {
				out.SatelliteUsed = in.Bytes()
			}
		case "SatelliteElevation":
			if in.IsNull() {
				in.Skip()
				out.SatelliteElevation = nil
			} else {
				out.SatelliteElevation = in.Bytes()
			}
		case "SatelliteAzimuth":
			if in.IsNull() {
				in.Skip()
				out.SatelliteAzimuth = nil
			} else {
				out.SatelliteAzimuth = in.Bytes()
			}
		case "SatelliteSnr":
			if in.IsNull() {
				in.Skip()
				out.SatelliteSnr = nil
			} else {
				out.SatelliteSnr = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll123(out *jwriter.Writer, in GpsStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SatellitesVisible != 0 {
		const prefix string = ",\"SatellitesVisible\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.SatellitesVisible))
	}
	if len(in.SatellitePrn) != 0 {
		const prefix string = ",\"SatellitePrn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.SatellitePrn)
	}
	if len(in.SatelliteUsed) != 0 {
		const prefix string = ",\"SatelliteUsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.SatelliteUsed)
	}
	if len(in.SatelliteElevation) != 0 {
		const prefix string = ",\"SatelliteElevation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.SatelliteElevation)
	}
	if len(in.SatelliteAzimuth) != 0 {
		const prefix string = ",\"SatelliteAzimuth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.SatelliteAzimuth)
	}
	if len(in.SatelliteSnr) != 0 {
		const prefix string = ",\"SatelliteSnr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.SatelliteSnr)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll123(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll123(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll123(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll123(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll124(in *jlexer.Lexer, out *GpsRtk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeLastBaselineMs":
			out.TimeLastBaselineMs = uint32(in.Uint32())
		case "Tow":
			out.Tow = uint32(in.Uint32())
		case "BaselineAMm":
			out.BaselineAMm = int32(in.Int32())
		case "BaselineBMm":
			out.BaselineBMm = int32(in.Int32())
		case "BaselineCMm":
			out.BaselineCMm = int32(in.Int32())
		case "Accuracy":
			out.Accuracy = uint32(in.Uint32())
		case "IarNumHypotheses":
			out.IarNumHypotheses = int32(in.Int32())
		case "Wn":
			out.Wn = uint16(in.Uint16())
		case "RtkReceiverID":
			out.RtkReceiverID = uint8(in.Uint8())
		case "RtkHealth":
			out.RtkHealth = uint8(in.Uint8())
		case "RtkRate":
			out.RtkRate = uint8(in.Uint8())
		case "Nsats":
			out.Nsats = uint8(in.Uint8())
		case "BaselineCoordsType":
			out.BaselineCoordsType = RTK_BASELINE_COORDINATE_SYSTEM(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll124(out *jwriter.Writer, in GpsRtk) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeLastBaselineMs != 0 {
		const prefix string = ",\"TimeLastBaselineMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeLastBaselineMs))
	}
	if in.Tow != 0 {
		const prefix string = ",\"Tow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tow))
	}
	if in.BaselineAMm != 0 {
		const prefix string = ",\"BaselineAMm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BaselineAMm))
	}
	if in.BaselineBMm != 0 {
		const prefix string = ",\"BaselineBMm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BaselineBMm))
	}
	if in.BaselineCMm != 0 {
		const prefix string = ",\"BaselineCMm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BaselineCMm))
	}
	if in.Accuracy != 0 {
		const prefix string = ",\"Accuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Accuracy))
	}
	if in.IarNumHypotheses != 0 {
		const prefix string = ",\"IarNumHypotheses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.IarNumHypotheses))
	}
	if in.Wn != 0 {
		const prefix string = ",\"Wn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Wn))
	}
	if in.RtkReceiverID != 0 {
		const prefix string = ",\"RtkReceiverID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.RtkReceiverID))
	}
	if in.RtkHealth != 0 {
		const prefix string = ",\"RtkHealth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.RtkHealth))
	}
	if in.RtkRate != 0 {
		const prefix string = ",\"RtkRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.RtkRate))
	}
	if in.Nsats != 0 {
		const prefix string = ",\"Nsats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Nsats))
	}
	if in.BaselineCoordsType != 0 {
		const prefix string = ",\"BaselineCoordsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BaselineCoordsType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRtk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll124(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRtk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll124(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRtk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll124(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRtk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll124(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll125(in *jlexer.Lexer, out *GpsRtcmData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Flags":
			out.Flags = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll125(out *jwriter.Writer, in GpsRtcmData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.Flags))
	}
	if in.Len != 0 {
		const prefix string = ",\"Len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Len))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRtcmData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll125(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRtcmData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll125(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRtcmData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll125(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRtcmData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll125(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll126(in *jlexer.Lexer, out *GpsRawInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = GPS_FIX_TYPE(in.Int())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll126(out *jwriter.Writer, in GpsRawInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Alt))
	}
	if in.Eph != 0 {
		const prefix string = ",\"Eph\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Eph))
	}
	if in.Epv != 0 {
		const prefix string = ",\"Epv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Epv))
	}
	if in.Vel != 0 {
		const prefix string = ",\"Vel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Vel))
	}
	if in.Cog != 0 {
		const prefix string = ",\"Cog\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Cog))
	}
	if in.FixType != 0 {
		const prefix string = ",\"FixType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FixType))
	}
	if in.SatellitesVisible != 0 {
		const prefix string = ",\"SatellitesVisible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRawInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll126(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRawInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll126(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRawInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll126(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRawInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll126(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll127(in *jlexer.Lexer, out *GpsInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "TimeWeekMs":
			out.TimeWeekMs = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Hdop":
			out.Hdop = float32(in.Float32())
		case "Vdop":
			out.Vdop = float32(in.Float32())
		case "Vn":
			out.Vn = float32(in.Float32())
		case "Ve":
			out.Ve = float32(in.Float32())
		case "Vd":
			out.Vd = float32(in.Float32())
		case "SpeedAccuracy":
			out.SpeedAccuracy = float32(in.Float32())
		case "HorizAccuracy":
			out.HorizAccuracy = float32(in.Float32())
		case "VertAccuracy":
			out.VertAccuracy = float32(in.Float32())
		case "IgnoreFlags":
			out.IgnoreFlags = GPS_INPUT_IGNORE_FLAGS(in.Int())
		case "TimeWeek":
			out.TimeWeek = uint16(in.Uint16())
		case "GpsID":
			out.GpsID = uint8(in.Uint8())
		case "FixType":
			out.FixType = uint8(in.Uint8())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll127(out *jwriter.Writer, in GpsInput) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.TimeWeekMs != 0 {
		const prefix string = ",\"TimeWeekMs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.TimeWeekMs))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Alt))
	}
	if in.Hdop != 0 {
		const prefix string = ",\"Hdop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Hdop))
	}
	if in.Vdop != 0 {
		const prefix string = ",\"Vdop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vdop))
	}
	if in.Vn != 0 {
		const prefix string = ",\"Vn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vn))
	}
	if in.Ve != 0 {
		const prefix string = ",\"Ve\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ve))
	}
	if in.Vd != 0 {
		const prefix string = ",\"Vd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vd))
	}
	if in.SpeedAccuracy != 0 {
		const prefix string = ",\"SpeedAccuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.SpeedAccuracy))
	}
	if in.HorizAccuracy != 0 {
		const prefix string = ",\"HorizAccuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.HorizAccuracy))
	}
	if in.VertAccuracy != 0 {
		const prefix string = ",\"VertAccuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.VertAccuracy))
	}
	if in.IgnoreFlags != 0 {
		const prefix string = ",\"IgnoreFlags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IgnoreFlags))
	}
	if in.TimeWeek != 0 {
		const prefix string = ",\"TimeWeek\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.TimeWeek))
	}
	if in.GpsID != 0 {
		const prefix string = ",\"GpsID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.GpsID))
	}
	if in.FixType != 0 {
		const prefix string = ",\"FixType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.FixType))
	}
	if in.SatellitesVisible != 0 {
		const prefix string = ",\"SatellitesVisible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll127(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll127(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll127(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll127(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll128(in *jlexer.Lexer, out *GpsInjectData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll128(out *jwriter.Writer, in GpsInjectData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Len != 0 {
		const prefix string = ",\"Len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Len))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsInjectData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll128(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsInjectData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll128(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsInjectData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll128(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsInjectData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll128(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll129(in *jlexer.Lexer, out *GpsGlobalOrigin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll129(out *jwriter.Writer, in GpsGlobalOrigin) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		const prefix string = ",\"Latitude\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"Longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Longitude))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Altitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsGlobalOrigin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll129(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsGlobalOrigin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll129(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsGlobalOrigin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll129(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsGlobalOrigin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll129(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll130(in *jlexer.Lexer, out *Gps2Rtk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeLastBaselineMs":
			out.TimeLastBaselineMs = uint32(in.Uint32())
		case "Tow":
			out.Tow = uint32(in.Uint32())
		case "BaselineAMm":
			out.BaselineAMm = int32(in.Int32())
		case "BaselineBMm":
			out.BaselineBMm = int32(in.Int32())
		case "BaselineCMm":
			out.BaselineCMm = int32(in.Int32())
		case "Accuracy":
			out.Accuracy = uint32(in.Uint32())
		case "IarNumHypotheses":
			out.IarNumHypotheses = int32(in.Int32())
		case "Wn":
			out.Wn = uint16(in.Uint16())
		case "RtkReceiverID":
			out.RtkReceiverID = uint8(in.Uint8())
		case "RtkHealth":
			out.RtkHealth = uint8(in.Uint8())
		case "RtkRate":
			out.RtkRate = uint8(in.Uint8())
		case "Nsats":
			out.Nsats = uint8(in.Uint8())
		case "BaselineCoordsType":
			out.BaselineCoordsType = RTK_BASELINE_COORDINATE_SYSTEM(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll130(out *jwriter.Writer, in Gps2Rtk) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeLastBaselineMs != 0 {
		const prefix string = ",\"TimeLastBaselineMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeLastBaselineMs))
	}
	if in.Tow != 0 {
		const prefix string = ",\"Tow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tow))
	}
	if in.BaselineAMm != 0 {
		const prefix string = ",\"BaselineAMm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BaselineAMm))
	}
	if in.BaselineBMm != 0 {
		const prefix string = ",\"BaselineBMm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BaselineBMm))
	}
	if in.BaselineCMm != 0 {
		const prefix string = ",\"BaselineCMm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.BaselineCMm))
	}
	if in.Accuracy != 0 {
		const prefix string = ",\"Accuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Accuracy))
	}
	if in.IarNumHypotheses != 0 {
		const prefix string = ",\"IarNumHypotheses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.IarNumHypotheses))
	}
	if in.Wn != 0 {
		const prefix string = ",\"Wn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Wn))
	}
	if in.RtkReceiverID != 0 {
		const prefix string = ",\"RtkReceiverID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.RtkReceiverID))
	}
	if in.RtkHealth != 0 {
		const prefix string = ",\"RtkHealth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.RtkHealth))
	}
	if in.RtkRate != 0 {
		const prefix string = ",\"RtkRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.RtkRate))
	}
	if in.Nsats != 0 {
		const prefix string = ",\"Nsats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Nsats))
	}
	if in.BaselineCoordsType != 0 {
		const prefix string = ",\"BaselineCoordsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BaselineCoordsType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gps2Rtk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll130(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gps2Rtk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll130(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gps2Rtk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll130(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gps2Rtk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll130(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll131(in *jlexer.Lexer, out *Gps2Raw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "DgpsAge":
			out.DgpsAge = uint32(in.Uint32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = GPS_FIX_TYPE(in.Int())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		case "DgpsNumch":
			out.DgpsNumch = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll131(out *jwriter.Writer, in Gps2Raw) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Alt))
	}
	if in.DgpsAge != 0 {
		const prefix string = ",\"DgpsAge\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.DgpsAge))
	}
	if in.Eph != 0 {
		const prefix string = ",\"Eph\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Eph))
	}
	if in.Epv != 0 {
		const prefix string = ",\"Epv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Epv))
	}
	if in.Vel != 0 {
		const prefix string = ",\"Vel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Vel))
	}
	if in.Cog != 0 {
		const prefix string = ",\"Cog\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Cog))
	}
	if in.FixType != 0 {
		const prefix string = ",\"FixType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FixType))
	}
	if in.SatellitesVisible != 0 {
		const prefix string = ",\"SatellitesVisible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.SatellitesVisible))
	}
	if in.DgpsNumch != 0 {
		const prefix string = ",\"DgpsNumch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.DgpsNumch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gps2Raw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll131(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gps2Raw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll131(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gps2Raw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll131(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gps2Raw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll131(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll132(in *jlexer.Lexer, out *GoproSetResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CmdID":
			out.CmdID = GOPRO_COMMAND(in.Int())
		case "Status":
			out.Status = GOPRO_REQUEST_STATUS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll132(out *jwriter.Writer, in GoproSetResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CmdID != 0 {
		const prefix string = ",\"CmdID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.CmdID))
	}
	if in.Status != 0 {
		const prefix string = ",\"Status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GoproSetResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll132(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GoproSetResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll132(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GoproSetResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll132(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GoproSetResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll132(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll133(in *jlexer.Lexer, out *GoproSetRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CmdID":
			out.CmdID = GOPRO_COMMAND(in.Int())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				out.Value = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll133(out *jwriter.Writer, in GoproSetRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.CmdID != 0 {
		const prefix string = ",\"CmdID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CmdID))
	}
	if len(in.Value) != 0 {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Value)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GoproSetRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll133(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GoproSetRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll133(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GoproSetRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll133(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GoproSetRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll133(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll134(in *jlexer.Lexer, out *GoproHeartbeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = GOPRO_HEARTBEAT_STATUS(in.Int())
		case "CaptureMode":
			out.CaptureMode = GOPRO_CAPTURE_MODE(in.Int())
		case "Flags":
			out.Flags = GOPRO_HEARTBEAT_FLAGS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll134(out *jwriter.Writer, in GoproHeartbeat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != 0 {
		const prefix string = ",\"Status\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	if in.CaptureMode != 0 {
		const prefix string = ",\"CaptureMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CaptureMode))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GoproHeartbeat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll134(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GoproHeartbeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll134(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GoproHeartbeat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll134(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GoproHeartbeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll134(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll135(in *jlexer.Lexer, out *GoproGetResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CmdID":
			out.CmdID = GOPRO_COMMAND(in.Int())
		case "Status":
			out.Status = GOPRO_REQUEST_STATUS(in.Int())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				out.Value = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll135(out *jwriter.Writer, in GoproGetResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CmdID != 0 {
		const prefix string = ",\"CmdID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.CmdID))
	}
	if in.Status != 0 {
		const prefix string = ",\"Status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	if len(in.Value) != 0 {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Value)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GoproGetResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll135(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GoproGetResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll135(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GoproGetResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll135(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GoproGetResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll135(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll136(in *jlexer.Lexer, out *GoproGetRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CmdID":
			out.CmdID = GOPRO_COMMAND(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll136(out *jwriter.Writer, in GoproGetRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.CmdID != 0 {
		const prefix string = ",\"CmdID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CmdID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GoproGetRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll136(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GoproGetRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll136(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GoproGetRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll136(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GoproGetRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll136(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll137(in *jlexer.Lexer, out *GlobalVisionPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll137(out *jwriter.Writer, in GlobalVisionPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Usec != 0 {
		const prefix string = ",\"Usec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalVisionPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll137(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalVisionPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll137(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalVisionPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll137(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalVisionPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll137(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll138(in *jlexer.Lexer, out *GlobalPositionIntCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "RelativeAlt":
			out.RelativeAlt = int32(in.Int32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v97 float32
					v97 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstimatorType":
			out.EstimatorType = MAV_ESTIMATOR_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll138(out *jwriter.Writer, in GlobalPositionIntCov) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Alt))
	}
	if in.RelativeAlt != 0 {
		const prefix string = ",\"RelativeAlt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.RelativeAlt))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vz))
	}
	if len(in.Covariance) != 0 {
		const prefix string = ",\"Covariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v98, v99 := range in.Covariance {
				if v98 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v99))
			}
			out.RawByte(']')
		}
	}
	if in.EstimatorType != 0 {
		const prefix string = ",\"EstimatorType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EstimatorType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPositionIntCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll138(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPositionIntCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll138(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPositionIntCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll138(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPositionIntCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll138(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll139(in *jlexer.Lexer, out *GlobalPositionInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "RelativeAlt":
			out.RelativeAlt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "Hdg":
			out.Hdg = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll139(out *jwriter.Writer, in GlobalPositionInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Alt))
	}
	if in.RelativeAlt != 0 {
		const prefix string = ",\"RelativeAlt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.RelativeAlt))
	}
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Vz))
	}
	if in.Hdg != 0 {
		const prefix string = ",\"Hdg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Hdg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPositionInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll139(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPositionInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll139(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPositionInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll139(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPositionInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll139(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll140(in *jlexer.Lexer, out *GimbalTorqueCmdReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RlTorqueCmd":
			out.RlTorqueCmd = int16(in.Int16())
		case "ElTorqueCmd":
			out.ElTorqueCmd = int16(in.Int16())
		case "AzTorqueCmd":
			out.AzTorqueCmd = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll140(out *jwriter.Writer, in GimbalTorqueCmdReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RlTorqueCmd != 0 {
		const prefix string = ",\"RlTorqueCmd\":"
		first = false
		out.RawString(prefix[1:])
		out.Int16(int16(in.RlTorqueCmd))
	}
	if in.ElTorqueCmd != 0 {
		const prefix string = ",\"ElTorqueCmd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.ElTorqueCmd))
	}
	if in.AzTorqueCmd != 0 {
		const prefix string = ",\"AzTorqueCmd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.AzTorqueCmd))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GimbalTorqueCmdReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll140(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GimbalTorqueCmdReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll140(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GimbalTorqueCmdReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll140(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GimbalTorqueCmdReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll140(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll141(in *jlexer.Lexer, out *GimbalReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DeltaTime":
			out.DeltaTime = float32(in.Float32())
		case "DeltaAngleX":
			out.DeltaAngleX = float32(in.Float32())
		case "DeltaAngleY":
			out.DeltaAngleY = float32(in.Float32())
		case "DeltaAngleZ":
			out.DeltaAngleZ = float32(in.Float32())
		case "DeltaVelocityX":
			out.DeltaVelocityX = float32(in.Float32())
		case "DeltaVelocityY":
			out.DeltaVelocityY = float32(in.Float32())
		case "DeltaVelocityZ":
			out.DeltaVelocityZ = float32(in.Float32())
		case "JointRoll":
			out.JointRoll = float32(in.Float32())
		case "JointEl":
			out.JointEl = float32(in.Float32())
		case "JointAz":
			out.JointAz = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll141(out *jwriter.Writer, in GimbalReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DeltaTime != 0 {
		const prefix string = ",\"DeltaTime\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.DeltaTime))
	}
	if in.DeltaAngleX != 0 {
		const prefix string = ",\"DeltaAngleX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DeltaAngleX))
	}
	if in.DeltaAngleY != 0 {
		const prefix string = ",\"DeltaAngleY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DeltaAngleY))
	}
	if in.DeltaAngleZ != 0 {
		const prefix string = ",\"DeltaAngleZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DeltaAngleZ))
	}
	if in.DeltaVelocityX != 0 {
		const prefix string = ",\"DeltaVelocityX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DeltaVelocityX))
	}
	if in.DeltaVelocityY != 0 {
		const prefix string = ",\"DeltaVelocityY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DeltaVelocityY))
	}
	if in.DeltaVelocityZ != 0 {
		const prefix string = ",\"DeltaVelocityZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DeltaVelocityZ))
	}
	if in.JointRoll != 0 {
		const prefix string = ",\"JointRoll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.JointRoll))
	}
	if in.JointEl != 0 {
		const prefix string = ",\"JointEl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.JointEl))
	}
	if in.JointAz != 0 {
		const prefix string = ",\"JointAz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.JointAz))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GimbalReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll141(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GimbalReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll141(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GimbalReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll141(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GimbalReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll141(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll142(in *jlexer.Lexer, out *GimbalControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DemandedRateX":
			out.DemandedRateX = float32(in.Float32())
		case "DemandedRateY":
			out.DemandedRateY = float32(in.Float32())
		case "DemandedRateZ":
			out.DemandedRateZ = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll142(out *jwriter.Writer, in GimbalControl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DemandedRateX != 0 {
		const prefix string = ",\"DemandedRateX\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.DemandedRateX))
	}
	if in.DemandedRateY != 0 {
		const prefix string = ",\"DemandedRateY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DemandedRateY))
	}
	if in.DemandedRateZ != 0 {
		const prefix string = ",\"DemandedRateZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DemandedRateZ))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GimbalControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll142(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GimbalControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll142(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GimbalControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll142(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GimbalControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll142(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll143(in *jlexer.Lexer, out *FollowTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "CustomState":
			out.CustomState = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vel":
			if in.IsNull() {
				in.Skip()
				out.Vel = nil
			} else {
				in.Delim('[')
				if out.Vel == nil {
					if !in.IsDelim(']') {
						out.Vel = make([]float32, 0, 16)
					} else {
						out.Vel = []float32{}
					}
				} else {
					out.Vel = (out.Vel)[:0]
				}
				for !in.IsDelim(']') {
					var v100 float32
					v100 = float32(in.Float32())
					out.Vel = append(out.Vel, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Acc":
			if in.IsNull() {
				in.Skip()
				out.Acc = nil
			} else {
				in.Delim('[')
				if out.Acc == nil {
					if !in.IsDelim(']') {
						out.Acc = make([]float32, 0, 16)
					} else {
						out.Acc = []float32{}
					}
				} else {
					out.Acc = (out.Acc)[:0]
				}
				for !in.IsDelim(']') {
					var v101 float32
					v101 = float32(in.Float32())
					out.Acc = append(out.Acc, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AttitudeQ":
			if in.IsNull() {
				in.Skip()
				out.AttitudeQ = nil
			} else {
				in.Delim('[')
				if out.AttitudeQ == nil {
					if !in.IsDelim(']') {
						out.AttitudeQ = make([]float32, 0, 16)
					} else {
						out.AttitudeQ = []float32{}
					}
				} else {
					out.AttitudeQ = (out.AttitudeQ)[:0]
				}
				for !in.IsDelim(']') {
					var v102 float32
					v102 = float32(in.Float32())
					out.AttitudeQ = append(out.AttitudeQ, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rates":
			if in.IsNull() {
				in.Skip()
				out.Rates = nil
			} else {
				in.Delim('[')
				if out.Rates == nil {
					if !in.IsDelim(']') {
						out.Rates = make([]float32, 0, 16)
					} else {
						out.Rates = []float32{}
					}
				} else {
					out.Rates = (out.Rates)[:0]
				}
				for !in.IsDelim(']') {
					var v103 float32
					v103 = float32(in.Float32())
					out.Rates = append(out.Rates, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PositionCov":
			if in.IsNull() {
				in.Skip()
				out.PositionCov = nil
			} else {
				in.Delim('[')
				if out.PositionCov == nil {
					if !in.IsDelim(']') {
						out.PositionCov = make([]float32, 0, 16)
					} else {
						out.PositionCov = []float32{}
					}
				} else {
					out.PositionCov = (out.PositionCov)[:0]
				}
				for !in.IsDelim(']') {
					var v104 float32
					v104 = float32(in.Float32())
					out.PositionCov = append(out.PositionCov, v104)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstCapabilities":
			out.EstCapabilities = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll143(out *jwriter.Writer, in FollowTarget) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Timestamp != 0 {
		const prefix string = ",\"Timestamp\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	if in.CustomState != 0 {
		const prefix string = ",\"CustomState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CustomState))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Alt != 0 {
		const prefix string = ",\"Alt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Alt))
	}
	if len(in.Vel) != 0 {
		const prefix string = ",\"Vel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v105, v106 := range in.Vel {
				if v105 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v106))
			}
			out.RawByte(']')
		}
	}
	if len(in.Acc) != 0 {
		const prefix string = ",\"Acc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v107, v108 := range in.Acc {
				if v107 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v108))
			}
			out.RawByte(']')
		}
	}
	if len(in.AttitudeQ) != 0 {
		const prefix string = ",\"AttitudeQ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v109, v110 := range in.AttitudeQ {
				if v109 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v110))
			}
			out.RawByte(']')
		}
	}
	if len(in.Rates) != 0 {
		const prefix string = ",\"Rates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v111, v112 := range in.Rates {
				if v111 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v112))
			}
			out.RawByte(']')
		}
	}
	if len(in.PositionCov) != 0 {
		const prefix string = ",\"PositionCov\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v113, v114 := range in.PositionCov {
				if v113 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v114))
			}
			out.RawByte(']')
		}
	}
	if in.EstCapabilities != 0 {
		const prefix string = ",\"EstCapabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.EstCapabilities))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FollowTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll143(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FollowTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll143(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FollowTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll143(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FollowTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll143(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll144(in *jlexer.Lexer, out *FileTransferProtocol) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetNetwork":
			out.TargetNetwork = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll144(out *jwriter.Writer, in FileTransferProtocol) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetNetwork != 0 {
		const prefix string = ",\"TargetNetwork\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetNetwork))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if len(in.Payload) != 0 {
		const prefix string = ",\"Payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileTransferProtocol) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll144(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileTransferProtocol) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll144(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileTransferProtocol) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll144(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileTransferProtocol) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll144(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll145(in *jlexer.Lexer, out *FenceStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BreachTime":
			out.BreachTime = uint32(in.Uint32())
		case "BreachCount":
			out.BreachCount = uint16(in.Uint16())
		case "BreachStatus":
			out.BreachStatus = uint8(in.Uint8())
		case "BreachType":
			out.BreachType = FENCE_BREACH(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll145(out *jwriter.Writer, in FenceStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BreachTime != 0 {
		const prefix string = ",\"BreachTime\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.BreachTime))
	}
	if in.BreachCount != 0 {
		const prefix string = ",\"BreachCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.BreachCount))
	}
	if in.BreachStatus != 0 {
		const prefix string = ",\"BreachStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.BreachStatus))
	}
	if in.BreachType != 0 {
		const prefix string = ",\"BreachType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BreachType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FenceStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll145(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FenceStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll145(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FenceStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll145(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FenceStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll145(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll146(in *jlexer.Lexer, out *FencePoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = float32(in.Float32())
		case "Lng":
			out.Lng = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Idx":
			out.Idx = uint8(in.Uint8())
		case "Count":
			out.Count = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll146(out *jwriter.Writer, in FencePoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Lat))
	}
	if in.Lng != 0 {
		const prefix string = ",\"Lng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Lng))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Idx != 0 {
		const prefix string = ",\"Idx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Idx))
	}
	if in.Count != 0 {
		const prefix string = ",\"Count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FencePoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll146(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FencePoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll146(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FencePoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll146(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FencePoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll146(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll147(in *jlexer.Lexer, out *FenceFetchPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Idx":
			out.Idx = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll147(out *jwriter.Writer, in FenceFetchPoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Idx != 0 {
		const prefix string = ",\"Idx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Idx))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FenceFetchPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll147(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FenceFetchPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll147(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FenceFetchPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll147(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FenceFetchPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll147(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll148(in *jlexer.Lexer, out *ExtendedSysState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VtolState":
			out.VtolState = MAV_VTOL_STATE(in.Int())
		case "LandedState":
			out.LandedState = MAV_LANDED_STATE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll148(out *jwriter.Writer, in ExtendedSysState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.VtolState != 0 {
		const prefix string = ",\"VtolState\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.VtolState))
	}
	if in.LandedState != 0 {
		const prefix string = ",\"LandedState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LandedState))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtendedSysState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll148(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtendedSysState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll148(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtendedSysState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll148(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtendedSysState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll148(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll149(in *jlexer.Lexer, out *EstimatorStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "VelRatio":
			out.VelRatio = float32(in.Float32())
		case "PosHorizRatio":
			out.PosHorizRatio = float32(in.Float32())
		case "PosVertRatio":
			out.PosVertRatio = float32(in.Float32())
		case "MagRatio":
			out.MagRatio = float32(in.Float32())
		case "HaglRatio":
			out.HaglRatio = float32(in.Float32())
		case "TasRatio":
			out.TasRatio = float32(in.Float32())
		case "PosHorizAccuracy":
			out.PosHorizAccuracy = float32(in.Float32())
		case "PosVertAccuracy":
			out.PosVertAccuracy = float32(in.Float32())
		case "Flags":
			out.Flags = ESTIMATOR_STATUS_FLAGS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll149(out *jwriter.Writer, in EstimatorStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.VelRatio != 0 {
		const prefix string = ",\"VelRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.VelRatio))
	}
	if in.PosHorizRatio != 0 {
		const prefix string = ",\"PosHorizRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PosHorizRatio))
	}
	if in.PosVertRatio != 0 {
		const prefix string = ",\"PosVertRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PosVertRatio))
	}
	if in.MagRatio != 0 {
		const prefix string = ",\"MagRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.MagRatio))
	}
	if in.HaglRatio != 0 {
		const prefix string = ",\"HaglRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.HaglRatio))
	}
	if in.TasRatio != 0 {
		const prefix string = ",\"TasRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.TasRatio))
	}
	if in.PosHorizAccuracy != 0 {
		const prefix string = ",\"PosHorizAccuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PosHorizAccuracy))
	}
	if in.PosVertAccuracy != 0 {
		const prefix string = ",\"PosVertAccuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PosVertAccuracy))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EstimatorStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll149(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EstimatorStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll149(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EstimatorStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll149(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EstimatorStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll149(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll150(in *jlexer.Lexer, out *EncapsulatedData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seqnr":
			out.Seqnr = uint16(in.Uint16())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll150(out *jwriter.Writer, in EncapsulatedData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seqnr != 0 {
		const prefix string = ",\"Seqnr\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seqnr))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EncapsulatedData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll150(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EncapsulatedData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll150(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EncapsulatedData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll150(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EncapsulatedData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll150(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll151(in *jlexer.Lexer, out *EkfStatusReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VelocityVariance":
			out.VelocityVariance = float32(in.Float32())
		case "PosHorizVariance":
			out.PosHorizVariance = float32(in.Float32())
		case "PosVertVariance":
			out.PosVertVariance = float32(in.Float32())
		case "CompassVariance":
			out.CompassVariance = float32(in.Float32())
		case "TerrainAltVariance":
			out.TerrainAltVariance = float32(in.Float32())
		case "Flags":
			out.Flags = EKF_STATUS_FLAGS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll151(out *jwriter.Writer, in EkfStatusReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.VelocityVariance != 0 {
		const prefix string = ",\"VelocityVariance\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.VelocityVariance))
	}
	if in.PosHorizVariance != 0 {
		const prefix string = ",\"PosHorizVariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PosHorizVariance))
	}
	if in.PosVertVariance != 0 {
		const prefix string = ",\"PosVertVariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PosVertVariance))
	}
	if in.CompassVariance != 0 {
		const prefix string = ",\"CompassVariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.CompassVariance))
	}
	if in.TerrainAltVariance != 0 {
		const prefix string = ",\"TerrainAltVariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.TerrainAltVariance))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EkfStatusReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll151(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EkfStatusReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll151(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EkfStatusReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll151(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EkfStatusReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll151(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll152(in *jlexer.Lexer, out *EfiStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "EcuIndex":
			out.EcuIndex = float32(in.Float32())
		case "Rpm":
			out.Rpm = float32(in.Float32())
		case "FuelConsumed":
			out.FuelConsumed = float32(in.Float32())
		case "FuelFlow":
			out.FuelFlow = float32(in.Float32())
		case "EngineLoad":
			out.EngineLoad = float32(in.Float32())
		case "ThrottlePosition":
			out.ThrottlePosition = float32(in.Float32())
		case "SparkDwellTime":
			out.SparkDwellTime = float32(in.Float32())
		case "BarometricPressure":
			out.BarometricPressure = float32(in.Float32())
		case "IntakeManifoldPressure":
			out.IntakeManifoldPressure = float32(in.Float32())
		case "IntakeManifoldTemperature":
			out.IntakeManifoldTemperature = float32(in.Float32())
		case "CylinderHeadTemperature":
			out.CylinderHeadTemperature = float32(in.Float32())
		case "IgnitionTiming":
			out.IgnitionTiming = float32(in.Float32())
		case "InjectionTime":
			out.InjectionTime = float32(in.Float32())
		case "ExhaustGasTemperature":
			out.ExhaustGasTemperature = float32(in.Float32())
		case "ThrottleOut":
			out.ThrottleOut = float32(in.Float32())
		case "PtCompensation":
			out.PtCompensation = float32(in.Float32())
		case "Health":
			out.Health = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll152(out *jwriter.Writer, in EfiStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EcuIndex != 0 {
		const prefix string = ",\"EcuIndex\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.EcuIndex))
	}
	if in.Rpm != 0 {
		const prefix string = ",\"Rpm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rpm))
	}
	if in.FuelConsumed != 0 {
		const prefix string = ",\"FuelConsumed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.FuelConsumed))
	}
	if in.FuelFlow != 0 {
		const prefix string = ",\"FuelFlow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.FuelFlow))
	}
	if in.EngineLoad != 0 {
		const prefix string = ",\"EngineLoad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.EngineLoad))
	}
	if in.ThrottlePosition != 0 {
		const prefix string = ",\"ThrottlePosition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ThrottlePosition))
	}
	if in.SparkDwellTime != 0 {
		const prefix string = ",\"SparkDwellTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.SparkDwellTime))
	}
	if in.BarometricPressure != 0 {
		const prefix string = ",\"BarometricPressure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BarometricPressure))
	}
	if in.IntakeManifoldPressure != 0 {
		const prefix string = ",\"IntakeManifoldPressure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntakeManifoldPressure))
	}
	if in.IntakeManifoldTemperature != 0 {
		const prefix string = ",\"IntakeManifoldTemperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IntakeManifoldTemperature))
	}
	if in.CylinderHeadTemperature != 0 {
		const prefix string = ",\"CylinderHeadTemperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.CylinderHeadTemperature))
	}
	if in.IgnitionTiming != 0 {
		const prefix string = ",\"IgnitionTiming\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.IgnitionTiming))
	}
	if in.InjectionTime != 0 {
		const prefix string = ",\"InjectionTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.InjectionTime))
	}
	if in.ExhaustGasTemperature != 0 {
		const prefix string = ",\"ExhaustGasTemperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ExhaustGasTemperature))
	}
	if in.ThrottleOut != 0 {
		const prefix string = ",\"ThrottleOut\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ThrottleOut))
	}
	if in.PtCompensation != 0 {
		const prefix string = ",\"PtCompensation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PtCompensation))
	}
	if in.Health != 0 {
		const prefix string = ",\"Health\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Health))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EfiStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll152(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EfiStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll152(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EfiStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll152(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EfiStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll152(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll153(in *jlexer.Lexer, out *DistanceSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "MinDistance":
			out.MinDistance = uint16(in.Uint16())
		case "MaxDistance":
			out.MaxDistance = uint16(in.Uint16())
		case "CurrentDistance":
			out.CurrentDistance = uint16(in.Uint16())
		case "Type":
			out.Type = MAV_DISTANCE_SENSOR(in.Int())
		case "ID":
			out.ID = uint8(in.Uint8())
		case "Orientation":
			out.Orientation = MAV_SENSOR_ORIENTATION(in.Int())
		case "Covariance":
			out.Covariance = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll153(out *jwriter.Writer, in DistanceSensor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.MinDistance != 0 {
		const prefix string = ",\"MinDistance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.MinDistance))
	}
	if in.MaxDistance != 0 {
		const prefix string = ",\"MaxDistance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.MaxDistance))
	}
	if in.CurrentDistance != 0 {
		const prefix string = ",\"CurrentDistance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.CurrentDistance))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ID))
	}
	if in.Orientation != 0 {
		const prefix string = ",\"Orientation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Orientation))
	}
	if in.Covariance != 0 {
		const prefix string = ",\"Covariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Covariance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DistanceSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll153(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DistanceSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll153(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DistanceSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll153(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DistanceSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll153(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll154(in *jlexer.Lexer, out *DigicamControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ExtraValue":
			out.ExtraValue = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Session":
			out.Session = uint8(in.Uint8())
		case "ZoomPos":
			out.ZoomPos = uint8(in.Uint8())
		case "ZoomStep":
			out.ZoomStep = int8(in.Int8())
		case "FocusLock":
			out.FocusLock = uint8(in.Uint8())
		case "Shot":
			out.Shot = uint8(in.Uint8())
		case "CommandID":
			out.CommandID = uint8(in.Uint8())
		case "ExtraParam":
			out.ExtraParam = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll154(out *jwriter.Writer, in DigicamControl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ExtraValue != 0 {
		const prefix string = ",\"ExtraValue\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.ExtraValue))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Session != 0 {
		const prefix string = ",\"Session\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Session))
	}
	if in.ZoomPos != 0 {
		const prefix string = ",\"ZoomPos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ZoomPos))
	}
	if in.ZoomStep != 0 {
		const prefix string = ",\"ZoomStep\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.ZoomStep))
	}
	if in.FocusLock != 0 {
		const prefix string = ",\"FocusLock\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.FocusLock))
	}
	if in.Shot != 0 {
		const prefix string = ",\"Shot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Shot))
	}
	if in.CommandID != 0 {
		const prefix string = ",\"CommandID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CommandID))
	}
	if in.ExtraParam != 0 {
		const prefix string = ",\"ExtraParam\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ExtraParam))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DigicamControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll154(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DigicamControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll154(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DigicamControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll154(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DigicamControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll154(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll155(in *jlexer.Lexer, out *DigicamConfigure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ExtraValue":
			out.ExtraValue = float32(in.Float32())
		case "ShutterSpeed":
			out.ShutterSpeed = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Mode":
			out.Mode = uint8(in.Uint8())
		case "Aperture":
			out.Aperture = uint8(in.Uint8())
		case "Iso":
			out.Iso = uint8(in.Uint8())
		case "ExposureType":
			out.ExposureType = uint8(in.Uint8())
		case "CommandID":
			out.CommandID = uint8(in.Uint8())
		case "EngineCutOff":
			out.EngineCutOff = uint8(in.Uint8())
		case "ExtraParam":
			out.ExtraParam = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll155(out *jwriter.Writer, in DigicamConfigure) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ExtraValue != 0 {
		const prefix string = ",\"ExtraValue\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.ExtraValue))
	}
	if in.ShutterSpeed != 0 {
		const prefix string = ",\"ShutterSpeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ShutterSpeed))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Mode != 0 {
		const prefix string = ",\"Mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Mode))
	}
	if in.Aperture != 0 {
		const prefix string = ",\"Aperture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Aperture))
	}
	if in.Iso != 0 {
		const prefix string = ",\"Iso\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Iso))
	}
	if in.ExposureType != 0 {
		const prefix string = ",\"ExposureType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ExposureType))
	}
	if in.CommandID != 0 {
		const prefix string = ",\"CommandID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CommandID))
	}
	if in.EngineCutOff != 0 {
		const prefix string = ",\"EngineCutOff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.EngineCutOff))
	}
	if in.ExtraParam != 0 {
		const prefix string = ",\"ExtraParam\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ExtraParam))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DigicamConfigure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll155(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DigicamConfigure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll155(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DigicamConfigure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll155(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DigicamConfigure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll155(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll156(in *jlexer.Lexer, out *Deepstall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "LandingLat":
			out.LandingLat = int32(in.Int32())
		case "LandingLon":
			out.LandingLon = int32(in.Int32())
		case "PathLat":
			out.PathLat = int32(in.Int32())
		case "PathLon":
			out.PathLon = int32(in.Int32())
		case "ArcEntryLat":
			out.ArcEntryLat = int32(in.Int32())
		case "ArcEntryLon":
			out.ArcEntryLon = int32(in.Int32())
		case "Altitude":
			out.Altitude = float32(in.Float32())
		case "ExpectedTravelDistance":
			out.ExpectedTravelDistance = float32(in.Float32())
		case "CrossTrackError":
			out.CrossTrackError = float32(in.Float32())
		case "Stage":
			out.Stage = DEEPSTALL_STAGE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll156(out *jwriter.Writer, in Deepstall) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LandingLat != 0 {
		const prefix string = ",\"LandingLat\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.LandingLat))
	}
	if in.LandingLon != 0 {
		const prefix string = ",\"LandingLon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.LandingLon))
	}
	if in.PathLat != 0 {
		const prefix string = ",\"PathLat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PathLat))
	}
	if in.PathLon != 0 {
		const prefix string = ",\"PathLon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PathLon))
	}
	if in.ArcEntryLat != 0 {
		const prefix string = ",\"ArcEntryLat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ArcEntryLat))
	}
	if in.ArcEntryLon != 0 {
		const prefix string = ",\"ArcEntryLon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ArcEntryLon))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Altitude))
	}
	if in.ExpectedTravelDistance != 0 {
		const prefix string = ",\"ExpectedTravelDistance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ExpectedTravelDistance))
	}
	if in.CrossTrackError != 0 {
		const prefix string = ",\"CrossTrackError\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.CrossTrackError))
	}
	if in.Stage != 0 {
		const prefix string = ",\"Stage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Stage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Deepstall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll156(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Deepstall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll156(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Deepstall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll156(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Deepstall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll156(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll157(in *jlexer.Lexer, out *DebugVect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll157(out *jwriter.Writer, in DebugVect) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Name != "" {
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DebugVect) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll157(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DebugVect) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll157(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DebugVect) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll157(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DebugVect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll157(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll158(in *jlexer.Lexer, out *Debug) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = float32(in.Float32())
		case "Ind":
			out.Ind = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll158(out *jwriter.Writer, in Debug) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Value != 0 {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Value))
	}
	if in.Ind != 0 {
		const prefix string = ",\"Ind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Ind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Debug) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll158(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Debug) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll158(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Debug) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll158(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Debug) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll158(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll159(in *jlexer.Lexer, out *DataTransmissionHandshake) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Size":
			out.Size = uint32(in.Uint32())
		case "Width":
			out.Width = uint16(in.Uint16())
		case "Height":
			out.Height = uint16(in.Uint16())
		case "Packets":
			out.Packets = uint16(in.Uint16())
		case "Type":
			out.Type = MAVLINK_DATA_STREAM_TYPE(in.Int())
		case "Payload":
			out.Payload = uint8(in.Uint8())
		case "JpgQuality":
			out.JpgQuality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll159(out *jwriter.Writer, in DataTransmissionHandshake) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"Size\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Size))
	}
	if in.Width != 0 {
		const prefix string = ",\"Width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"Height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Height))
	}
	if in.Packets != 0 {
		const prefix string = ",\"Packets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Packets))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Payload != 0 {
		const prefix string = ",\"Payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Payload))
	}
	if in.JpgQuality != 0 {
		const prefix string = ",\"JpgQuality\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.JpgQuality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataTransmissionHandshake) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll159(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataTransmissionHandshake) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll159(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataTransmissionHandshake) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll159(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataTransmissionHandshake) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll159(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll160(in *jlexer.Lexer, out *DataStream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MessageRate":
			out.MessageRate = uint16(in.Uint16())
		case "StreamID":
			out.StreamID = uint8(in.Uint8())
		case "OnOff":
			out.OnOff = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll160(out *jwriter.Writer, in DataStream) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MessageRate != 0 {
		const prefix string = ",\"MessageRate\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.MessageRate))
	}
	if in.StreamID != 0 {
		const prefix string = ",\"StreamID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.StreamID))
	}
	if in.OnOff != 0 {
		const prefix string = ",\"OnOff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.OnOff))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataStream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll160(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataStream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll160(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataStream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll160(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataStream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll160(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll161(in *jlexer.Lexer, out *Data96) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll161(out *jwriter.Writer, in Data96) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.Type))
	}
	if in.Len != 0 {
		const prefix string = ",\"Len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Len))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data96) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll161(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data96) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll161(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data96) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll161(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data96) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll161(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll162(in *jlexer.Lexer, out *Data64) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll162(out *jwriter.Writer, in Data64) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.Type))
	}
	if in.Len != 0 {
		const prefix string = ",\"Len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Len))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data64) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll162(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data64) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll162(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data64) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll162(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data64) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll162(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll163(in *jlexer.Lexer, out *Data32) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll163(out *jwriter.Writer, in Data32) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.Type))
	}
	if in.Len != 0 {
		const prefix string = ",\"Len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Len))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data32) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll163(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data32) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll163(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data32) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll163(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data32) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll163(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll164(in *jlexer.Lexer, out *Data16) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll164(out *jwriter.Writer, in Data16) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.Type))
	}
	if in.Len != 0 {
		const prefix string = ",\"Len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Len))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data16) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll164(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data16) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll164(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data16) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll164(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data16) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll164(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll165(in *jlexer.Lexer, out *ControlSystemState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "XAcc":
			out.XAcc = float32(in.Float32())
		case "YAcc":
			out.YAcc = float32(in.Float32())
		case "ZAcc":
			out.ZAcc = float32(in.Float32())
		case "XVel":
			out.XVel = float32(in.Float32())
		case "YVel":
			out.YVel = float32(in.Float32())
		case "ZVel":
			out.ZVel = float32(in.Float32())
		case "XPos":
			out.XPos = float32(in.Float32())
		case "YPos":
			out.YPos = float32(in.Float32())
		case "ZPos":
			out.ZPos = float32(in.Float32())
		case "Airspeed":
			out.Airspeed = float32(in.Float32())
		case "VelVariance":
			if in.IsNull() {
				in.Skip()
				out.VelVariance = nil
			} else {
				in.Delim('[')
				if out.VelVariance == nil {
					if !in.IsDelim(']') {
						out.VelVariance = make([]float32, 0, 16)
					} else {
						out.VelVariance = []float32{}
					}
				} else {
					out.VelVariance = (out.VelVariance)[:0]
				}
				for !in.IsDelim(']') {
					var v133 float32
					v133 = float32(in.Float32())
					out.VelVariance = append(out.VelVariance, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PosVariance":
			if in.IsNull() {
				in.Skip()
				out.PosVariance = nil
			} else {
				in.Delim('[')
				if out.PosVariance == nil {
					if !in.IsDelim(']') {
						out.PosVariance = make([]float32, 0, 16)
					} else {
						out.PosVariance = []float32{}
					}
				} else {
					out.PosVariance = (out.PosVariance)[:0]
				}
				for !in.IsDelim(']') {
					var v134 float32
					v134 = float32(in.Float32())
					out.PosVariance = append(out.PosVariance, v134)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v135 float32
					v135 = float32(in.Float32())
					out.Q = append(out.Q, v135)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RollRate":
			out.RollRate = float32(in.Float32())
		case "PitchRate":
			out.PitchRate = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll165(out *jwriter.Writer, in ControlSystemState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.XAcc != 0 {
		const prefix string = ",\"XAcc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.XAcc))
	}
	if in.YAcc != 0 {
		const prefix string = ",\"YAcc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YAcc))
	}
	if in.ZAcc != 0 {
		const prefix string = ",\"ZAcc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ZAcc))
	}
	if in.XVel != 0 {
		const prefix string = ",\"XVel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.XVel))
	}
	if in.YVel != 0 {
		const prefix string = ",\"YVel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YVel))
	}
	if in.ZVel != 0 {
		const prefix string = ",\"ZVel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ZVel))
	}
	if in.XPos != 0 {
		const prefix string = ",\"XPos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.XPos))
	}
	if in.YPos != 0 {
		const prefix string = ",\"YPos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YPos))
	}
	if in.ZPos != 0 {
		const prefix string = ",\"ZPos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ZPos))
	}
	if in.Airspeed != 0 {
		const prefix string = ",\"Airspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Airspeed))
	}
	if len(in.VelVariance) != 0 {
		const prefix string = ",\"VelVariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v136, v137 := range in.VelVariance {
				if v136 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v137))
			}
			out.RawByte(']')
		}
	}
	if len(in.PosVariance) != 0 {
		const prefix string = ",\"PosVariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v138, v139 := range in.PosVariance {
				if v138 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v139))
			}
			out.RawByte(']')
		}
	}
	if len(in.Q) != 0 {
		const prefix string = ",\"Q\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v140, v141 := range in.Q {
				if v140 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v141))
			}
			out.RawByte(']')
		}
	}
	if in.RollRate != 0 {
		const prefix string = ",\"RollRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.RollRate))
	}
	if in.PitchRate != 0 {
		const prefix string = ",\"PitchRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.PitchRate))
	}
	if in.YawRate != 0 {
		const prefix string = ",\"YawRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.YawRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ControlSystemState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll165(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ControlSystemState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll165(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ControlSystemState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll165(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ControlSystemState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll165(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll166(in *jlexer.Lexer, out *CompassmotStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Current":
			out.Current = float32(in.Float32())
		case "Compensationx":
			out.Compensationx = float32(in.Float32())
		case "Compensationy":
			out.Compensationy = float32(in.Float32())
		case "Compensationz":
			out.Compensationz = float32(in.Float32())
		case "Throttle":
			out.Throttle = uint16(in.Uint16())
		case "Interference":
			out.Interference = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll166(out *jwriter.Writer, in CompassmotStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Current != 0 {
		const prefix string = ",\"Current\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Current))
	}
	if in.Compensationx != 0 {
		const prefix string = ",\"Compensationx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Compensationx))
	}
	if in.Compensationy != 0 {
		const prefix string = ",\"Compensationy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Compensationy))
	}
	if in.Compensationz != 0 {
		const prefix string = ",\"Compensationz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Compensationz))
	}
	if in.Throttle != 0 {
		const prefix string = ",\"Throttle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Throttle))
	}
	if in.Interference != 0 {
		const prefix string = ",\"Interference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Interference))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompassmotStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll166(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompassmotStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll166(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompassmotStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll166(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompassmotStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll166(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll167(in *jlexer.Lexer, out *CommandLong) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "Param5":
			out.Param5 = float32(in.Float32())
		case "Param6":
			out.Param6 = float32(in.Float32())
		case "Param7":
			out.Param7 = float32(in.Float32())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Confirmation":
			out.Confirmation = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll167(out *jwriter.Writer, in CommandLong) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Param1 != 0 {
		const prefix string = ",\"Param1\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	if in.Param2 != 0 {
		const prefix string = ",\"Param2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param2))
	}
	if in.Param3 != 0 {
		const prefix string = ",\"Param3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param3))
	}
	if in.Param4 != 0 {
		const prefix string = ",\"Param4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param4))
	}
	if in.Param5 != 0 {
		const prefix string = ",\"Param5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param5))
	}
	if in.Param6 != 0 {
		const prefix string = ",\"Param6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param6))
	}
	if in.Param7 != 0 {
		const prefix string = ",\"Param7\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param7))
	}
	if in.Command != 0 {
		const prefix string = ",\"Command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Command))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Confirmation != 0 {
		const prefix string = ",\"Confirmation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Confirmation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandLong) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll167(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandLong) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll167(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandLong) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll167(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandLong) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll167(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll168(in *jlexer.Lexer, out *CommandInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = int32(in.Int32())
		case "Y":
			out.Y = int32(in.Int32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll168(out *jwriter.Writer, in CommandInt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Param1 != 0 {
		const prefix string = ",\"Param1\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	if in.Param2 != 0 {
		const prefix string = ",\"Param2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param2))
	}
	if in.Param3 != 0 {
		const prefix string = ",\"Param3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param3))
	}
	if in.Param4 != 0 {
		const prefix string = ",\"Param4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Param4))
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	if in.Command != 0 {
		const prefix string = ",\"Command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Command))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	if in.Frame != 0 {
		const prefix string = ",\"Frame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Frame))
	}
	if in.Current != 0 {
		const prefix string = ",\"Current\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Current))
	}
	if in.Autocontinue != 0 {
		const prefix string = ",\"Autocontinue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll168(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll168(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll168(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll168(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll169(in *jlexer.Lexer, out *CommandCancel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll169(out *jwriter.Writer, in CommandCancel) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Command != 0 {
		const prefix string = ",\"Command\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Command))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandCancel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll169(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandCancel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll169(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandCancel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll169(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandCancel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll169(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll170(in *jlexer.Lexer, out *CommandAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "Result":
			out.Result = MAV_RESULT(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll170(out *jwriter.Writer, in CommandAck) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Command != 0 {
		const prefix string = ",\"Command\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Command))
	}
	if in.Result != 0 {
		const prefix string = ",\"Result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll170(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll170(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll170(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll170(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll171(in *jlexer.Lexer, out *Collision) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint32(in.Uint32())
		case "TimeToMinimumDelta":
			out.TimeToMinimumDelta = float32(in.Float32())
		case "AltitudeMinimumDelta":
			out.AltitudeMinimumDelta = float32(in.Float32())
		case "HorizontalMinimumDelta":
			out.HorizontalMinimumDelta = float32(in.Float32())
		case "Src":
			out.Src = MAV_COLLISION_SRC(in.Int())
		case "Action":
			out.Action = MAV_COLLISION_ACTION(in.Int())
		case "ThreatLevel":
			out.ThreatLevel = MAV_COLLISION_THREAT_LEVEL(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll171(out *jwriter.Writer, in Collision) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	if in.TimeToMinimumDelta != 0 {
		const prefix string = ",\"TimeToMinimumDelta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.TimeToMinimumDelta))
	}
	if in.AltitudeMinimumDelta != 0 {
		const prefix string = ",\"AltitudeMinimumDelta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltitudeMinimumDelta))
	}
	if in.HorizontalMinimumDelta != 0 {
		const prefix string = ",\"HorizontalMinimumDelta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.HorizontalMinimumDelta))
	}
	if in.Src != 0 {
		const prefix string = ",\"Src\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Src))
	}
	if in.Action != 0 {
		const prefix string = ",\"Action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Action))
	}
	if in.ThreatLevel != 0 {
		const prefix string = ",\"ThreatLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ThreatLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collision) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll171(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collision) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll171(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collision) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll171(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collision) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll171(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll172(in *jlexer.Lexer, out *ChangeOperatorControlAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GcsSystemID":
			out.GcsSystemID = uint8(in.Uint8())
		case "ControlRequest":
			out.ControlRequest = uint8(in.Uint8())
		case "Ack":
			out.Ack = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll172(out *jwriter.Writer, in ChangeOperatorControlAck) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GcsSystemID != 0 {
		const prefix string = ",\"GcsSystemID\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.GcsSystemID))
	}
	if in.ControlRequest != 0 {
		const prefix string = ",\"ControlRequest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ControlRequest))
	}
	if in.Ack != 0 {
		const prefix string = ",\"Ack\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Ack))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeOperatorControlAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll172(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeOperatorControlAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll172(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeOperatorControlAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll172(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeOperatorControlAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll172(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll173(in *jlexer.Lexer, out *ChangeOperatorControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "ControlRequest":
			out.ControlRequest = uint8(in.Uint8())
		case "Version":
			out.Version = uint8(in.Uint8())
		case "Passkey":
			out.Passkey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll173(out *jwriter.Writer, in ChangeOperatorControl) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.ControlRequest != 0 {
		const prefix string = ",\"ControlRequest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ControlRequest))
	}
	if in.Version != 0 {
		const prefix string = ",\"Version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Version))
	}
	if in.Passkey != "" {
		const prefix string = ",\"Passkey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Passkey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeOperatorControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll173(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeOperatorControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll173(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeOperatorControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll173(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeOperatorControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll173(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll174(in *jlexer.Lexer, out *CameraTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Seq":
			out.Seq = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll174(out *jwriter.Writer, in CameraTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Seq != 0 {
		const prefix string = ",\"Seq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CameraTrigger) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll174(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CameraTrigger) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll174(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CameraTrigger) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll174(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CameraTrigger) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll174(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll175(in *jlexer.Lexer, out *CameraStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "P1":
			out.P1 = float32(in.Float32())
		case "P2":
			out.P2 = float32(in.Float32())
		case "P3":
			out.P3 = float32(in.Float32())
		case "P4":
			out.P4 = float32(in.Float32())
		case "ImgIdx":
			out.ImgIdx = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "CamIdx":
			out.CamIdx = uint8(in.Uint8())
		case "EventID":
			out.EventID = CAMERA_STATUS_TYPES(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll175(out *jwriter.Writer, in CameraStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.P1 != 0 {
		const prefix string = ",\"P1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P1))
	}
	if in.P2 != 0 {
		const prefix string = ",\"P2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P2))
	}
	if in.P3 != 0 {
		const prefix string = ",\"P3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P3))
	}
	if in.P4 != 0 {
		const prefix string = ",\"P4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.P4))
	}
	if in.ImgIdx != 0 {
		const prefix string = ",\"ImgIdx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ImgIdx))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.CamIdx != 0 {
		const prefix string = ",\"CamIdx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CamIdx))
	}
	if in.EventID != 0 {
		const prefix string = ",\"EventID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EventID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CameraStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll175(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CameraStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll175(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CameraStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll175(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CameraStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll175(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll176(in *jlexer.Lexer, out *CameraFeedback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lng":
			out.Lng = int32(in.Int32())
		case "AltMsl":
			out.AltMsl = float32(in.Float32())
		case "AltRel":
			out.AltRel = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "FocLen":
			out.FocLen = float32(in.Float32())
		case "ImgIdx":
			out.ImgIdx = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "CamIdx":
			out.CamIdx = uint8(in.Uint8())
		case "Flags":
			out.Flags = CAMERA_FEEDBACK_FLAGS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll176(out *jwriter.Writer, in CameraFeedback) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lng != 0 {
		const prefix string = ",\"Lng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lng))
	}
	if in.AltMsl != 0 {
		const prefix string = ",\"AltMsl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltMsl))
	}
	if in.AltRel != 0 {
		const prefix string = ",\"AltRel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltRel))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.FocLen != 0 {
		const prefix string = ",\"FocLen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.FocLen))
	}
	if in.ImgIdx != 0 {
		const prefix string = ",\"ImgIdx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ImgIdx))
	}
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.CamIdx != 0 {
		const prefix string = ",\"CamIdx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.CamIdx))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CameraFeedback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll176(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CameraFeedback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll176(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CameraFeedback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll176(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CameraFeedback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll176(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll177(in *jlexer.Lexer, out *BatteryStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CurrentConsumed":
			out.CurrentConsumed = int32(in.Int32())
		case "EnergyConsumed":
			out.EnergyConsumed = int32(in.Int32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "Voltages":
			if in.IsNull() {
				in.Skip()
				out.Voltages = nil
			} else {
				in.Delim('[')
				if out.Voltages == nil {
					if !in.IsDelim(']') {
						out.Voltages = make([]uint16, 0, 32)
					} else {
						out.Voltages = []uint16{}
					}
				} else {
					out.Voltages = (out.Voltages)[:0]
				}
				for !in.IsDelim(']') {
					var v142 uint16
					v142 = uint16(in.Uint16())
					out.Voltages = append(out.Voltages, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CurrentBattery":
			out.CurrentBattery = int16(in.Int16())
		case "ID":
			out.ID = uint8(in.Uint8())
		case "BatteryFunction":
			out.BatteryFunction = MAV_BATTERY_FUNCTION(in.Int())
		case "Type":
			out.Type = MAV_BATTERY_TYPE(in.Int())
		case "BatteryRemaining":
			out.BatteryRemaining = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll177(out *jwriter.Writer, in BatteryStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CurrentConsumed != 0 {
		const prefix string = ",\"CurrentConsumed\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.CurrentConsumed))
	}
	if in.EnergyConsumed != 0 {
		const prefix string = ",\"EnergyConsumed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.EnergyConsumed))
	}
	if in.Temperature != 0 {
		const prefix string = ",\"Temperature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.Temperature))
	}
	if len(in.Voltages) != 0 {
		const prefix string = ",\"Voltages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.Voltages {
				if v143 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v144))
			}
			out.RawByte(']')
		}
	}
	if in.CurrentBattery != 0 {
		const prefix string = ",\"CurrentBattery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.CurrentBattery))
	}
	if in.ID != 0 {
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.ID))
	}
	if in.BatteryFunction != 0 {
		const prefix string = ",\"BatteryFunction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BatteryFunction))
	}
	if in.Type != 0 {
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.BatteryRemaining != 0 {
		const prefix string = ",\"BatteryRemaining\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int8(int8(in.BatteryRemaining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatteryStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll177(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatteryStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll177(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatteryStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll177(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatteryStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll177(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll178(in *jlexer.Lexer, out *Battery2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Voltage":
			out.Voltage = uint16(in.Uint16())
		case "CurrentBattery":
			out.CurrentBattery = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll178(out *jwriter.Writer, in Battery2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Voltage != 0 {
		const prefix string = ",\"Voltage\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Voltage))
	}
	if in.CurrentBattery != 0 {
		const prefix string = ",\"CurrentBattery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.CurrentBattery))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Battery2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll178(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Battery2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll178(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Battery2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll178(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Battery2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll178(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll179(in *jlexer.Lexer, out *AutopilotVersionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll179(out *jwriter.Writer, in AutopilotVersionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TargetSystem != 0 {
		const prefix string = ",\"TargetSystem\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	if in.TargetComponent != 0 {
		const prefix string = ",\"TargetComponent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutopilotVersionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll179(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutopilotVersionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll179(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutopilotVersionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll179(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutopilotVersionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll179(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll180(in *jlexer.Lexer, out *AutopilotVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Capabilities":
			out.Capabilities = MAV_PROTOCOL_CAPABILITY(in.Int())
		case "UID":
			out.UID = uint64(in.Uint64())
		case "FlightSwVersion":
			out.FlightSwVersion = uint32(in.Uint32())
		case "MiddlewareSwVersion":
			out.MiddlewareSwVersion = uint32(in.Uint32())
		case "OsSwVersion":
			out.OsSwVersion = uint32(in.Uint32())
		case "BoardVersion":
			out.BoardVersion = uint32(in.Uint32())
		case "VendorID":
			out.VendorID = uint16(in.Uint16())
		case "ProductID":
			out.ProductID = uint16(in.Uint16())
		case "FlightCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.FlightCustomVersion = nil
			} else {
				out.FlightCustomVersion = in.Bytes()
			}
		case "MiddlewareCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.MiddlewareCustomVersion = nil
			} else {
				out.MiddlewareCustomVersion = in.Bytes()
			}
		case "OsCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.OsCustomVersion = nil
			} else {
				out.OsCustomVersion = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll180(out *jwriter.Writer, in AutopilotVersion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Capabilities != 0 {
		const prefix string = ",\"Capabilities\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Capabilities))
	}
	if in.UID != 0 {
		const prefix string = ",\"UID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.UID))
	}
	if in.FlightSwVersion != 0 {
		const prefix string = ",\"FlightSwVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.FlightSwVersion))
	}
	if in.MiddlewareSwVersion != 0 {
		const prefix string = ",\"MiddlewareSwVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MiddlewareSwVersion))
	}
	if in.OsSwVersion != 0 {
		const prefix string = ",\"OsSwVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.OsSwVersion))
	}
	if in.BoardVersion != 0 {
		const prefix string = ",\"BoardVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.BoardVersion))
	}
	if in.VendorID != 0 {
		const prefix string = ",\"VendorID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.VendorID))
	}
	if in.ProductID != 0 {
		const prefix string = ",\"ProductID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.ProductID))
	}
	if len(in.FlightCustomVersion) != 0 {
		const prefix string = ",\"FlightCustomVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.FlightCustomVersion)
	}
	if len(in.MiddlewareCustomVersion) != 0 {
		const prefix string = ",\"MiddlewareCustomVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.MiddlewareCustomVersion)
	}
	if len(in.OsCustomVersion) != 0 {
		const prefix string = ",\"OsCustomVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.OsCustomVersion)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutopilotVersion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll180(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutopilotVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll180(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutopilotVersion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll180(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutopilotVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll180(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll181(in *jlexer.Lexer, out *AuthKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll181(out *jwriter.Writer, in AuthKey) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"Key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll181(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll181(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll181(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll181(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll182(in *jlexer.Lexer, out *AttitudeTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v154 float32
					v154 = float32(in.Float32())
					out.Q = append(out.Q, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BodyRollRate":
			out.BodyRollRate = float32(in.Float32())
		case "BodyPitchRate":
			out.BodyPitchRate = float32(in.Float32())
		case "BodyYawRate":
			out.BodyYawRate = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = ATTITUDE_TARGET_TYPEMASK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll182(out *jwriter.Writer, in AttitudeTarget) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if len(in.Q) != 0 {
		const prefix string = ",\"Q\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v155, v156 := range in.Q {
				if v155 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v156))
			}
			out.RawByte(']')
		}
	}
	if in.BodyRollRate != 0 {
		const prefix string = ",\"BodyRollRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BodyRollRate))
	}
	if in.BodyPitchRate != 0 {
		const prefix string = ",\"BodyPitchRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BodyPitchRate))
	}
	if in.BodyYawRate != 0 {
		const prefix string = ",\"BodyYawRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BodyYawRate))
	}
	if in.Thrust != 0 {
		const prefix string = ",\"Thrust\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Thrust))
	}
	if in.TypeMask != 0 {
		const prefix string = ",\"TypeMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TypeMask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll182(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll182(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll182(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll182(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll183(in *jlexer.Lexer, out *AttitudeQuaternionCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v157 float32
					v157 = float32(in.Float32())
					out.Q = append(out.Q, v157)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v158 float32
					v158 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v158)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll183(out *jwriter.Writer, in AttitudeQuaternionCov) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if len(in.Q) != 0 {
		const prefix string = ",\"Q\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v159, v160 := range in.Q {
				if v159 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v160))
			}
			out.RawByte(']')
		}
	}
	if in.Rollspeed != 0 {
		const prefix string = ",\"Rollspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rollspeed))
	}
	if in.Pitchspeed != 0 {
		const prefix string = ",\"Pitchspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitchspeed))
	}
	if in.Yawspeed != 0 {
		const prefix string = ",\"Yawspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yawspeed))
	}
	if len(in.Covariance) != 0 {
		const prefix string = ",\"Covariance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v161, v162 := range in.Covariance {
				if v161 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v162))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeQuaternionCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll183(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeQuaternionCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll183(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeQuaternionCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll183(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeQuaternionCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll183(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll184(in *jlexer.Lexer, out *AttitudeQuaternion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q1":
			out.Q1 = float32(in.Float32())
		case "Q2":
			out.Q2 = float32(in.Float32())
		case "Q3":
			out.Q3 = float32(in.Float32())
		case "Q4":
			out.Q4 = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll184(out *jwriter.Writer, in AttitudeQuaternion) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Q1 != 0 {
		const prefix string = ",\"Q1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Q1))
	}
	if in.Q2 != 0 {
		const prefix string = ",\"Q2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Q2))
	}
	if in.Q3 != 0 {
		const prefix string = ",\"Q3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Q3))
	}
	if in.Q4 != 0 {
		const prefix string = ",\"Q4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Q4))
	}
	if in.Rollspeed != 0 {
		const prefix string = ",\"Rollspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rollspeed))
	}
	if in.Pitchspeed != 0 {
		const prefix string = ",\"Pitchspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitchspeed))
	}
	if in.Yawspeed != 0 {
		const prefix string = ",\"Yawspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yawspeed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeQuaternion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll184(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeQuaternion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll184(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeQuaternion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll184(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeQuaternion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll184(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll185(in *jlexer.Lexer, out *Attitude) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll185(out *jwriter.Writer, in Attitude) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeBootMs != 0 {
		const prefix string = ",\"TimeBootMs\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.Rollspeed != 0 {
		const prefix string = ",\"Rollspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Rollspeed))
	}
	if in.Pitchspeed != 0 {
		const prefix string = ",\"Pitchspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitchspeed))
	}
	if in.Yawspeed != 0 {
		const prefix string = ",\"Yawspeed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yawspeed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attitude) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll185(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attitude) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll185(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attitude) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll185(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attitude) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll185(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll186(in *jlexer.Lexer, out *AttPosMocap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v163 float32
					v163 = float32(in.Float32())
					out.Q = append(out.Q, v163)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll186(out *jwriter.Writer, in AttPosMocap) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if len(in.Q) != 0 {
		const prefix string = ",\"Q\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v164, v165 := range in.Q {
				if v164 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v165))
			}
			out.RawByte(']')
		}
	}
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Y))
	}
	if in.Z != 0 {
		const prefix string = ",\"Z\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttPosMocap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll186(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttPosMocap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll186(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttPosMocap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll186(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttPosMocap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll186(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll187(in *jlexer.Lexer, out *ApAdc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Adc1":
			out.Adc1 = uint16(in.Uint16())
		case "Adc2":
			out.Adc2 = uint16(in.Uint16())
		case "Adc3":
			out.Adc3 = uint16(in.Uint16())
		case "Adc4":
			out.Adc4 = uint16(in.Uint16())
		case "Adc5":
			out.Adc5 = uint16(in.Uint16())
		case "Adc6":
			out.Adc6 = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll187(out *jwriter.Writer, in ApAdc) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Adc1 != 0 {
		const prefix string = ",\"Adc1\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Adc1))
	}
	if in.Adc2 != 0 {
		const prefix string = ",\"Adc2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Adc2))
	}
	if in.Adc3 != 0 {
		const prefix string = ",\"Adc3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Adc3))
	}
	if in.Adc4 != 0 {
		const prefix string = ",\"Adc4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Adc4))
	}
	if in.Adc5 != 0 {
		const prefix string = ",\"Adc5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Adc5))
	}
	if in.Adc6 != 0 {
		const prefix string = ",\"Adc6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Adc6))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApAdc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll187(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApAdc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll187(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApAdc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll187(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApAdc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll187(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll188(in *jlexer.Lexer, out *Altitude) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AltitudeMonotonic":
			out.AltitudeMonotonic = float32(in.Float32())
		case "AltitudeAmsl":
			out.AltitudeAmsl = float32(in.Float32())
		case "AltitudeLocal":
			out.AltitudeLocal = float32(in.Float32())
		case "AltitudeRelative":
			out.AltitudeRelative = float32(in.Float32())
		case "AltitudeTerrain":
			out.AltitudeTerrain = float32(in.Float32())
		case "BottomClearance":
			out.BottomClearance = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll188(out *jwriter.Writer, in Altitude) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if in.AltitudeMonotonic != 0 {
		const prefix string = ",\"AltitudeMonotonic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltitudeMonotonic))
	}
	if in.AltitudeAmsl != 0 {
		const prefix string = ",\"AltitudeAmsl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltitudeAmsl))
	}
	if in.AltitudeLocal != 0 {
		const prefix string = ",\"AltitudeLocal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltitudeLocal))
	}
	if in.AltitudeRelative != 0 {
		const prefix string = ",\"AltitudeRelative\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltitudeRelative))
	}
	if in.AltitudeTerrain != 0 {
		const prefix string = ",\"AltitudeTerrain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AltitudeTerrain))
	}
	if in.BottomClearance != 0 {
		const prefix string = ",\"BottomClearance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.BottomClearance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Altitude) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll188(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Altitude) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll188(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Altitude) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll188(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Altitude) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll188(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll189(in *jlexer.Lexer, out *AirspeedAutocal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "DiffPressure":
			out.DiffPressure = float32(in.Float32())
		case "Eas2tas":
			out.Eas2tas = float32(in.Float32())
		case "Ratio":
			out.Ratio = float32(in.Float32())
		case "StateX":
			out.StateX = float32(in.Float32())
		case "StateY":
			out.StateY = float32(in.Float32())
		case "StateZ":
			out.StateZ = float32(in.Float32())
		case "Pax":
			out.Pax = float32(in.Float32())
		case "Pby":
			out.Pby = float32(in.Float32())
		case "Pcz":
			out.Pcz = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll189(out *jwriter.Writer, in AirspeedAutocal) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Vx != 0 {
		const prefix string = ",\"Vx\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Vx))
	}
	if in.Vy != 0 {
		const prefix string = ",\"Vy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vy))
	}
	if in.Vz != 0 {
		const prefix string = ",\"Vz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Vz))
	}
	if in.DiffPressure != 0 {
		const prefix string = ",\"DiffPressure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DiffPressure))
	}
	if in.Eas2tas != 0 {
		const prefix string = ",\"Eas2tas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Eas2tas))
	}
	if in.Ratio != 0 {
		const prefix string = ",\"Ratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Ratio))
	}
	if in.StateX != 0 {
		const prefix string = ",\"StateX\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.StateX))
	}
	if in.StateY != 0 {
		const prefix string = ",\"StateY\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.StateY))
	}
	if in.StateZ != 0 {
		const prefix string = ",\"StateZ\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.StateZ))
	}
	if in.Pax != 0 {
		const prefix string = ",\"Pax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pax))
	}
	if in.Pby != 0 {
		const prefix string = ",\"Pby\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pby))
	}
	if in.Pcz != 0 {
		const prefix string = ",\"Pcz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pcz))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AirspeedAutocal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll189(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AirspeedAutocal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll189(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AirspeedAutocal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll189(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AirspeedAutocal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll189(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll190(in *jlexer.Lexer, out *Ahrs3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Altitude":
			out.Altitude = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lng":
			out.Lng = int32(in.Int32())
		case "V1":
			out.V1 = float32(in.Float32())
		case "V2":
			out.V2 = float32(in.Float32())
		case "V3":
			out.V3 = float32(in.Float32())
		case "V4":
			out.V4 = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll190(out *jwriter.Writer, in Ahrs3) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Altitude))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lng != 0 {
		const prefix string = ",\"Lng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lng))
	}
	if in.V1 != 0 {
		const prefix string = ",\"V1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.V1))
	}
	if in.V2 != 0 {
		const prefix string = ",\"V2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.V2))
	}
	if in.V3 != 0 {
		const prefix string = ",\"V3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.V3))
	}
	if in.V4 != 0 {
		const prefix string = ",\"V4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.V4))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ahrs3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll190(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ahrs3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll190(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ahrs3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll190(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ahrs3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll190(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll191(in *jlexer.Lexer, out *Ahrs2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Altitude":
			out.Altitude = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lng":
			out.Lng = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll191(out *jwriter.Writer, in Ahrs2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Roll != 0 {
		const prefix string = ",\"Roll\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Roll))
	}
	if in.Pitch != 0 {
		const prefix string = ",\"Pitch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Pitch))
	}
	if in.Yaw != 0 {
		const prefix string = ",\"Yaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Yaw))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Altitude))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lng != 0 {
		const prefix string = ",\"Lng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lng))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ahrs2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll191(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ahrs2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll191(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ahrs2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll191(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ahrs2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll191(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll192(in *jlexer.Lexer, out *Ahrs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Omegaix":
			out.Omegaix = float32(in.Float32())
		case "Omegaiy":
			out.Omegaiy = float32(in.Float32())
		case "Omegaiz":
			out.Omegaiz = float32(in.Float32())
		case "AccelWeight":
			out.AccelWeight = float32(in.Float32())
		case "RenormVal":
			out.RenormVal = float32(in.Float32())
		case "ErrorRp":
			out.ErrorRp = float32(in.Float32())
		case "ErrorYaw":
			out.ErrorYaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll192(out *jwriter.Writer, in Ahrs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Omegaix != 0 {
		const prefix string = ",\"Omegaix\":"
		first = false
		out.RawString(prefix[1:])
		out.Float32(float32(in.Omegaix))
	}
	if in.Omegaiy != 0 {
		const prefix string = ",\"Omegaiy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Omegaiy))
	}
	if in.Omegaiz != 0 {
		const prefix string = ",\"Omegaiz\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Omegaiz))
	}
	if in.AccelWeight != 0 {
		const prefix string = ",\"AccelWeight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.AccelWeight))
	}
	if in.RenormVal != 0 {
		const prefix string = ",\"RenormVal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.RenormVal))
	}
	if in.ErrorRp != 0 {
		const prefix string = ",\"ErrorRp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ErrorRp))
	}
	if in.ErrorYaw != 0 {
		const prefix string = ",\"ErrorYaw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ErrorYaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ahrs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll192(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ahrs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll192(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ahrs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll192(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ahrs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll192(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll193(in *jlexer.Lexer, out *AdsbVehicle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IcaoAddress":
			out.IcaoAddress = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "Heading":
			out.Heading = uint16(in.Uint16())
		case "HorVelocity":
			out.HorVelocity = uint16(in.Uint16())
		case "VerVelocity":
			out.VerVelocity = int16(in.Int16())
		case "Flags":
			out.Flags = ADSB_FLAGS(in.Int())
		case "Squawk":
			out.Squawk = uint16(in.Uint16())
		case "AltitudeType":
			out.AltitudeType = ADSB_ALTITUDE_TYPE(in.Int())
		case "Callsign":
			out.Callsign = string(in.String())
		case "EmitterType":
			out.EmitterType = ADSB_EMITTER_TYPE(in.Int())
		case "Tslc":
			out.Tslc = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll193(out *jwriter.Writer, in AdsbVehicle) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IcaoAddress != 0 {
		const prefix string = ",\"IcaoAddress\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.IcaoAddress))
	}
	if in.Lat != 0 {
		const prefix string = ",\"Lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"Lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Lon))
	}
	if in.Altitude != 0 {
		const prefix string = ",\"Altitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Altitude))
	}
	if in.Heading != 0 {
		const prefix string = ",\"Heading\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Heading))
	}
	if in.HorVelocity != 0 {
		const prefix string = ",\"HorVelocity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.HorVelocity))
	}
	if in.VerVelocity != 0 {
		const prefix string = ",\"VerVelocity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int16(int16(in.VerVelocity))
	}
	if in.Flags != 0 {
		const prefix string = ",\"Flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	if in.Squawk != 0 {
		const prefix string = ",\"Squawk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Squawk))
	}
	if in.AltitudeType != 0 {
		const prefix string = ",\"AltitudeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AltitudeType))
	}
	if in.Callsign != "" {
		const prefix string = ",\"Callsign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Callsign))
	}
	if in.EmitterType != 0 {
		const prefix string = ",\"EmitterType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EmitterType))
	}
	if in.Tslc != 0 {
		const prefix string = ",\"Tslc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Tslc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdsbVehicle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll193(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdsbVehicle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll193(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdsbVehicle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll193(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdsbVehicle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll193(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll194(in *jlexer.Lexer, out *ActuatorControlTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v166 float32
					v166 = float32(in.Float32())
					out.Controls = append(out.Controls, v166)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GroupMlx":
			out.GroupMlx = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll194(out *jwriter.Writer, in ActuatorControlTarget) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TimeUsec != 0 {
		const prefix string = ",\"TimeUsec\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	if len(in.Controls) != 0 {
		const prefix string = ",\"Controls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v167, v168 := range in.Controls {
				if v167 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v168))
			}
			out.RawByte(']')
		}
	}
	if in.GroupMlx != 0 {
		const prefix string = ",\"GroupMlx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.GroupMlx))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActuatorControlTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll194(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActuatorControlTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll194(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActuatorControlTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll194(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActuatorControlTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsAll194(l, v)
}
