// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package paparazzi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi(in *jlexer.Lexer, out *WindCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "WindX":
			out.WindX = float32(in.Float32())
		case "WindY":
			out.WindY = float32(in.Float32())
		case "WindZ":
			out.WindZ = float32(in.Float32())
		case "VarHoriz":
			out.VarHoriz = float32(in.Float32())
		case "VarVert":
			out.VarVert = float32(in.Float32())
		case "WindAlt":
			out.WindAlt = float32(in.Float32())
		case "HorizAccuracy":
			out.HorizAccuracy = float32(in.Float32())
		case "VertAccuracy":
			out.VertAccuracy = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi(out *jwriter.Writer, in WindCov) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"WindX\":"
		out.RawString(prefix)
		out.Float32(float32(in.WindX))
	}
	{
		const prefix string = ",\"WindY\":"
		out.RawString(prefix)
		out.Float32(float32(in.WindY))
	}
	{
		const prefix string = ",\"WindZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.WindZ))
	}
	{
		const prefix string = ",\"VarHoriz\":"
		out.RawString(prefix)
		out.Float32(float32(in.VarHoriz))
	}
	{
		const prefix string = ",\"VarVert\":"
		out.RawString(prefix)
		out.Float32(float32(in.VarVert))
	}
	{
		const prefix string = ",\"WindAlt\":"
		out.RawString(prefix)
		out.Float32(float32(in.WindAlt))
	}
	{
		const prefix string = ",\"HorizAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.HorizAccuracy))
	}
	{
		const prefix string = ",\"VertAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.VertAccuracy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WindCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WindCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WindCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WindCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi1(in *jlexer.Lexer, out *VisionSpeedEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi1(out *jwriter.Writer, in VisionSpeedEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Usec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisionSpeedEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisionSpeedEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisionSpeedEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisionSpeedEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi1(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi2(in *jlexer.Lexer, out *VisionPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi2(out *jwriter.Writer, in VisionPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Usec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisionPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisionPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisionPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisionPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi2(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi3(in *jlexer.Lexer, out *ViconPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi3(out *jwriter.Writer, in ViconPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Usec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ViconPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ViconPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ViconPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ViconPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi3(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi4(in *jlexer.Lexer, out *Vibration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "VibrationX":
			out.VibrationX = float32(in.Float32())
		case "VibrationY":
			out.VibrationY = float32(in.Float32())
		case "VibrationZ":
			out.VibrationZ = float32(in.Float32())
		case "Clipping0":
			out.Clipping0 = uint32(in.Uint32())
		case "Clipping1":
			out.Clipping1 = uint32(in.Uint32())
		case "Clipping2":
			out.Clipping2 = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi4(out *jwriter.Writer, in Vibration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"VibrationX\":"
		out.RawString(prefix)
		out.Float32(float32(in.VibrationX))
	}
	{
		const prefix string = ",\"VibrationY\":"
		out.RawString(prefix)
		out.Float32(float32(in.VibrationY))
	}
	{
		const prefix string = ",\"VibrationZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.VibrationZ))
	}
	{
		const prefix string = ",\"Clipping0\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Clipping0))
	}
	{
		const prefix string = ",\"Clipping1\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Clipping1))
	}
	{
		const prefix string = ",\"Clipping2\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Clipping2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vibration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vibration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vibration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vibration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi4(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi5(in *jlexer.Lexer, out *VfrHud) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Airspeed":
			out.Airspeed = float32(in.Float32())
		case "Groundspeed":
			out.Groundspeed = float32(in.Float32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Climb":
			out.Climb = float32(in.Float32())
		case "Heading":
			out.Heading = int16(in.Int16())
		case "Throttle":
			out.Throttle = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi5(out *jwriter.Writer, in VfrHud) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Airspeed\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Airspeed))
	}
	{
		const prefix string = ",\"Groundspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Groundspeed))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Climb\":"
		out.RawString(prefix)
		out.Float32(float32(in.Climb))
	}
	{
		const prefix string = ",\"Heading\":"
		out.RawString(prefix)
		out.Int16(int16(in.Heading))
	}
	{
		const prefix string = ",\"Throttle\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Throttle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VfrHud) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VfrHud) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VfrHud) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VfrHud) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi5(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi6(in *jlexer.Lexer, out *V2Extension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MessageType":
			out.MessageType = uint16(in.Uint16())
		case "TargetNetwork":
			out.TargetNetwork = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi6(out *jwriter.Writer, in V2Extension) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MessageType\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.MessageType))
	}
	{
		const prefix string = ",\"TargetNetwork\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetNetwork))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v V2Extension) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v V2Extension) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *V2Extension) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *V2Extension) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi6(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi7(in *jlexer.Lexer, out *Timesync) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Tc1":
			out.Tc1 = int64(in.Int64())
		case "Ts1":
			out.Ts1 = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi7(out *jwriter.Writer, in Timesync) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Tc1\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Tc1))
	}
	{
		const prefix string = ",\"Ts1\":"
		out.RawString(prefix)
		out.Int64(int64(in.Ts1))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Timesync) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Timesync) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Timesync) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Timesync) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi7(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi8(in *jlexer.Lexer, out *TerrainRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Mask":
			out.Mask = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "GridSpacing":
			out.GridSpacing = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi8(out *jwriter.Writer, in TerrainRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Mask\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Mask))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"GridSpacing\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.GridSpacing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi8(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi9(in *jlexer.Lexer, out *TerrainReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "TerrainHeight":
			out.TerrainHeight = float32(in.Float32())
		case "CurrentHeight":
			out.CurrentHeight = float32(in.Float32())
		case "Spacing":
			out.Spacing = uint16(in.Uint16())
		case "Pending":
			out.Pending = uint16(in.Uint16())
		case "Loaded":
			out.Loaded = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi9(out *jwriter.Writer, in TerrainReport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"TerrainHeight\":"
		out.RawString(prefix)
		out.Float32(float32(in.TerrainHeight))
	}
	{
		const prefix string = ",\"CurrentHeight\":"
		out.RawString(prefix)
		out.Float32(float32(in.CurrentHeight))
	}
	{
		const prefix string = ",\"Spacing\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Spacing))
	}
	{
		const prefix string = ",\"Pending\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Pending))
	}
	{
		const prefix string = ",\"Loaded\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Loaded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi9(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi10(in *jlexer.Lexer, out *TerrainData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "GridSpacing":
			out.GridSpacing = uint16(in.Uint16())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int16, 0, 32)
					} else {
						out.Data = []int16{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int16
					v4 = int16(in.Int16())
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Gridbit":
			out.Gridbit = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi10(out *jwriter.Writer, in TerrainData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"GridSpacing\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.GridSpacing))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int16(int16(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Gridbit\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Gridbit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi10(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi11(in *jlexer.Lexer, out *TerrainCheck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi11(out *jwriter.Writer, in TerrainCheck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainCheck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainCheck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainCheck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainCheck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi11(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi12(in *jlexer.Lexer, out *SystemTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUnixUsec":
			out.TimeUnixUsec = uint64(in.Uint64())
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi12(out *jwriter.Writer, in SystemTime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUnixUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUnixUsec))
	}
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeBootMs))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SystemTime) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SystemTime) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SystemTime) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SystemTime) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi12(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi13(in *jlexer.Lexer, out *SysStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OnboardControlSensorsPresent":
			out.OnboardControlSensorsPresent = MAV_SYS_STATUS_SENSOR(in.Int())
		case "OnboardControlSensorsEnabled":
			out.OnboardControlSensorsEnabled = MAV_SYS_STATUS_SENSOR(in.Int())
		case "OnboardControlSensorsHealth":
			out.OnboardControlSensorsHealth = MAV_SYS_STATUS_SENSOR(in.Int())
		case "Load":
			out.Load = uint16(in.Uint16())
		case "VoltageBattery":
			out.VoltageBattery = uint16(in.Uint16())
		case "CurrentBattery":
			out.CurrentBattery = int16(in.Int16())
		case "DropRateComm":
			out.DropRateComm = uint16(in.Uint16())
		case "ErrorsComm":
			out.ErrorsComm = uint16(in.Uint16())
		case "ErrorsCount1":
			out.ErrorsCount1 = uint16(in.Uint16())
		case "ErrorsCount2":
			out.ErrorsCount2 = uint16(in.Uint16())
		case "ErrorsCount3":
			out.ErrorsCount3 = uint16(in.Uint16())
		case "ErrorsCount4":
			out.ErrorsCount4 = uint16(in.Uint16())
		case "BatteryRemaining":
			out.BatteryRemaining = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi13(out *jwriter.Writer, in SysStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OnboardControlSensorsPresent\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OnboardControlSensorsPresent))
	}
	{
		const prefix string = ",\"OnboardControlSensorsEnabled\":"
		out.RawString(prefix)
		out.Int(int(in.OnboardControlSensorsEnabled))
	}
	{
		const prefix string = ",\"OnboardControlSensorsHealth\":"
		out.RawString(prefix)
		out.Int(int(in.OnboardControlSensorsHealth))
	}
	{
		const prefix string = ",\"Load\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Load))
	}
	{
		const prefix string = ",\"VoltageBattery\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.VoltageBattery))
	}
	{
		const prefix string = ",\"CurrentBattery\":"
		out.RawString(prefix)
		out.Int16(int16(in.CurrentBattery))
	}
	{
		const prefix string = ",\"DropRateComm\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DropRateComm))
	}
	{
		const prefix string = ",\"ErrorsComm\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsComm))
	}
	{
		const prefix string = ",\"ErrorsCount1\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsCount1))
	}
	{
		const prefix string = ",\"ErrorsCount2\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsCount2))
	}
	{
		const prefix string = ",\"ErrorsCount3\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsCount3))
	}
	{
		const prefix string = ",\"ErrorsCount4\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsCount4))
	}
	{
		const prefix string = ",\"BatteryRemaining\":"
		out.RawString(prefix)
		out.Int8(int8(in.BatteryRemaining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SysStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SysStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SysStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SysStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi13(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi14(in *jlexer.Lexer, out *Statustext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Severity":
			out.Severity = MAV_SEVERITY(in.Int())
		case "Text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi14(out *jwriter.Writer, in Statustext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Severity\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Severity))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Statustext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Statustext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Statustext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Statustext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi14(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi15(in *jlexer.Lexer, out *SimState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Q1":
			out.Q1 = float32(in.Float32())
		case "Q2":
			out.Q2 = float32(in.Float32())
		case "Q3":
			out.Q3 = float32(in.Float32())
		case "Q4":
			out.Q4 = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Lat":
			out.Lat = float32(in.Float32())
		case "Lon":
			out.Lon = float32(in.Float32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "StdDevHorz":
			out.StdDevHorz = float32(in.Float32())
		case "StdDevVert":
			out.StdDevVert = float32(in.Float32())
		case "Vn":
			out.Vn = float32(in.Float32())
		case "Ve":
			out.Ve = float32(in.Float32())
		case "Vd":
			out.Vd = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi15(out *jwriter.Writer, in SimState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Q1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Q1))
	}
	{
		const prefix string = ",\"Q2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q2))
	}
	{
		const prefix string = ",\"Q3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q3))
	}
	{
		const prefix string = ",\"Q4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q4))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zgyro))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Float32(float32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Float32(float32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"StdDevHorz\":"
		out.RawString(prefix)
		out.Float32(float32(in.StdDevHorz))
	}
	{
		const prefix string = ",\"StdDevVert\":"
		out.RawString(prefix)
		out.Float32(float32(in.StdDevVert))
	}
	{
		const prefix string = ",\"Vn\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vn))
	}
	{
		const prefix string = ",\"Ve\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ve))
	}
	{
		const prefix string = ",\"Vd\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SimState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SimState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SimState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SimState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi15(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi16(in *jlexer.Lexer, out *SetPositionTargetLocalNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi16(out *jwriter.Writer, in SetPositionTargetLocalNed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Afx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afx))
	}
	{
		const prefix string = ",\"Afy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afy))
	}
	{
		const prefix string = ",\"Afz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afz))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"CoordinateFrame\":"
		out.RawString(prefix)
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPositionTargetLocalNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetPositionTargetLocalNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPositionTargetLocalNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetPositionTargetLocalNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi16(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi17(in *jlexer.Lexer, out *SetPositionTargetGlobalInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "LatInt":
			out.LatInt = int32(in.Int32())
		case "LonInt":
			out.LonInt = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi17(out *jwriter.Writer, in SetPositionTargetGlobalInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"LatInt\":"
		out.RawString(prefix)
		out.Int32(int32(in.LatInt))
	}
	{
		const prefix string = ",\"LonInt\":"
		out.RawString(prefix)
		out.Int32(int32(in.LonInt))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Afx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afx))
	}
	{
		const prefix string = ",\"Afy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afy))
	}
	{
		const prefix string = ",\"Afz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afz))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"CoordinateFrame\":"
		out.RawString(prefix)
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPositionTargetGlobalInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetPositionTargetGlobalInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPositionTargetGlobalInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetPositionTargetGlobalInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi17(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi18(in *jlexer.Lexer, out *SetMode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "BaseMode":
			out.BaseMode = MAV_MODE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi18(out *jwriter.Writer, in SetMode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CustomMode\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"BaseMode\":"
		out.RawString(prefix)
		out.Int(int(in.BaseMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetMode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetMode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetMode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetMode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi18(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi19(in *jlexer.Lexer, out *SetHomePosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v7 float32
					v7 = float32(in.Float32())
					out.Q = append(out.Q, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ApproachX":
			out.ApproachX = float32(in.Float32())
		case "ApproachY":
			out.ApproachY = float32(in.Float32())
		case "ApproachZ":
			out.ApproachZ = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi19(out *jwriter.Writer, in SetHomePosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Q {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ApproachX\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachX))
	}
	{
		const prefix string = ",\"ApproachY\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachY))
	}
	{
		const prefix string = ",\"ApproachZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachZ))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetHomePosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetHomePosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetHomePosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetHomePosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi19(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi20(in *jlexer.Lexer, out *SetGpsGlobalOrigin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi20(out *jwriter.Writer, in SetGpsGlobalOrigin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetGpsGlobalOrigin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetGpsGlobalOrigin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetGpsGlobalOrigin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetGpsGlobalOrigin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi20(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi21(in *jlexer.Lexer, out *SetAttitudeTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v10 float32
					v10 = float32(in.Float32())
					out.Q = append(out.Q, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BodyRollRate":
			out.BodyRollRate = float32(in.Float32())
		case "BodyPitchRate":
			out.BodyPitchRate = float32(in.Float32())
		case "BodyYawRate":
			out.BodyYawRate = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "TypeMask":
			out.TypeMask = ATTITUDE_TARGET_TYPEMASK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi21(out *jwriter.Writer, in SetAttitudeTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Q {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BodyRollRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyRollRate))
	}
	{
		const prefix string = ",\"BodyPitchRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyPitchRate))
	}
	{
		const prefix string = ",\"BodyYawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyYawRate))
	}
	{
		const prefix string = ",\"Thrust\":"
		out.RawString(prefix)
		out.Float32(float32(in.Thrust))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetAttitudeTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetAttitudeTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetAttitudeTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetAttitudeTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi21(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi22(in *jlexer.Lexer, out *SetActuatorControlTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v13 float32
					v13 = float32(in.Float32())
					out.Controls = append(out.Controls, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GroupMlx":
			out.GroupMlx = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi22(out *jwriter.Writer, in SetActuatorControlTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Controls\":"
		out.RawString(prefix)
		if in.Controls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Controls {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GroupMlx\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GroupMlx))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetActuatorControlTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetActuatorControlTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetActuatorControlTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetActuatorControlTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi22(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi23(in *jlexer.Lexer, out *ServoOutputRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint32(in.Uint32())
		case "Servo1Raw":
			out.Servo1Raw = uint16(in.Uint16())
		case "Servo2Raw":
			out.Servo2Raw = uint16(in.Uint16())
		case "Servo3Raw":
			out.Servo3Raw = uint16(in.Uint16())
		case "Servo4Raw":
			out.Servo4Raw = uint16(in.Uint16())
		case "Servo5Raw":
			out.Servo5Raw = uint16(in.Uint16())
		case "Servo6Raw":
			out.Servo6Raw = uint16(in.Uint16())
		case "Servo7Raw":
			out.Servo7Raw = uint16(in.Uint16())
		case "Servo8Raw":
			out.Servo8Raw = uint16(in.Uint16())
		case "Port":
			out.Port = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi23(out *jwriter.Writer, in ServoOutputRaw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeUsec))
	}
	{
		const prefix string = ",\"Servo1Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo1Raw))
	}
	{
		const prefix string = ",\"Servo2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo2Raw))
	}
	{
		const prefix string = ",\"Servo3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo3Raw))
	}
	{
		const prefix string = ",\"Servo4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo4Raw))
	}
	{
		const prefix string = ",\"Servo5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo5Raw))
	}
	{
		const prefix string = ",\"Servo6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo6Raw))
	}
	{
		const prefix string = ",\"Servo7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo7Raw))
	}
	{
		const prefix string = ",\"Servo8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo8Raw))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Port))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServoOutputRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServoOutputRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServoOutputRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServoOutputRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi23(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi24(in *jlexer.Lexer, out *SerialControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Baudrate":
			out.Baudrate = uint32(in.Uint32())
		case "Timeout":
			out.Timeout = uint16(in.Uint16())
		case "Device":
			out.Device = SERIAL_CONTROL_DEV(in.Int())
		case "Flags":
			out.Flags = SERIAL_CONTROL_FLAG(in.Int())
		case "Count":
			out.Count = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi24(out *jwriter.Writer, in SerialControl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Baudrate\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Baudrate))
	}
	{
		const prefix string = ",\"Timeout\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Timeout))
	}
	{
		const prefix string = ",\"Device\":"
		out.RawString(prefix)
		out.Int(int(in.Device))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Count))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi24(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi25(in *jlexer.Lexer, out *ScriptRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi25(out *jwriter.Writer, in ScriptRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScriptRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScriptRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScriptRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScriptRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi25(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi26(in *jlexer.Lexer, out *ScriptRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi26(out *jwriter.Writer, in ScriptRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScriptRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScriptRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScriptRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScriptRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi26(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi27(in *jlexer.Lexer, out *ScriptItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi27(out *jwriter.Writer, in ScriptItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScriptItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScriptItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScriptItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScriptItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi27(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi28(in *jlexer.Lexer, out *ScriptCurrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi28(out *jwriter.Writer, in ScriptCurrent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScriptCurrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScriptCurrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScriptCurrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScriptCurrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi28(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi29(in *jlexer.Lexer, out *ScriptCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Count":
			out.Count = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi29(out *jwriter.Writer, in ScriptCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Count))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScriptCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScriptCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScriptCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScriptCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi29(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi30(in *jlexer.Lexer, out *ScaledPressure3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi30(out *jwriter.Writer, in ScaledPressure3) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"PressAbs\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressAbs))
	}
	{
		const prefix string = ",\"PressDiff\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressDiff))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi30(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi31(in *jlexer.Lexer, out *ScaledPressure2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi31(out *jwriter.Writer, in ScaledPressure2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"PressAbs\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressAbs))
	}
	{
		const prefix string = ",\"PressDiff\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressDiff))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi31(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi32(in *jlexer.Lexer, out *ScaledPressure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi32(out *jwriter.Writer, in ScaledPressure) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"PressAbs\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressAbs))
	}
	{
		const prefix string = ",\"PressDiff\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressDiff))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi32(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi33(in *jlexer.Lexer, out *ScaledImu3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi33(out *jwriter.Writer, in ScaledImu3) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi33(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi34(in *jlexer.Lexer, out *ScaledImu2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi34(out *jwriter.Writer, in ScaledImu2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi34(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi35(in *jlexer.Lexer, out *ScaledImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi35(out *jwriter.Writer, in ScaledImu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi35(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi36(in *jlexer.Lexer, out *SafetySetAllowedArea) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "P1x":
			out.P1x = float32(in.Float32())
		case "P1y":
			out.P1y = float32(in.Float32())
		case "P1z":
			out.P1z = float32(in.Float32())
		case "P2x":
			out.P2x = float32(in.Float32())
		case "P2y":
			out.P2y = float32(in.Float32())
		case "P2z":
			out.P2z = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi36(out *jwriter.Writer, in SafetySetAllowedArea) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"P1x\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.P1x))
	}
	{
		const prefix string = ",\"P1y\":"
		out.RawString(prefix)
		out.Float32(float32(in.P1y))
	}
	{
		const prefix string = ",\"P1z\":"
		out.RawString(prefix)
		out.Float32(float32(in.P1z))
	}
	{
		const prefix string = ",\"P2x\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2x))
	}
	{
		const prefix string = ",\"P2y\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2y))
	}
	{
		const prefix string = ",\"P2z\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2z))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafetySetAllowedArea) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafetySetAllowedArea) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafetySetAllowedArea) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafetySetAllowedArea) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi36(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi37(in *jlexer.Lexer, out *SafetyAllowedArea) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "P1x":
			out.P1x = float32(in.Float32())
		case "P1y":
			out.P1y = float32(in.Float32())
		case "P1z":
			out.P1z = float32(in.Float32())
		case "P2x":
			out.P2x = float32(in.Float32())
		case "P2y":
			out.P2y = float32(in.Float32())
		case "P2z":
			out.P2z = float32(in.Float32())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi37(out *jwriter.Writer, in SafetyAllowedArea) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"P1x\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.P1x))
	}
	{
		const prefix string = ",\"P1y\":"
		out.RawString(prefix)
		out.Float32(float32(in.P1y))
	}
	{
		const prefix string = ",\"P1z\":"
		out.RawString(prefix)
		out.Float32(float32(in.P1z))
	}
	{
		const prefix string = ",\"P2x\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2x))
	}
	{
		const prefix string = ",\"P2y\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2y))
	}
	{
		const prefix string = ",\"P2z\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2z))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafetyAllowedArea) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafetyAllowedArea) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafetyAllowedArea) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafetyAllowedArea) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi37(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi38(in *jlexer.Lexer, out *ResourceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RequestID":
			out.RequestID = uint8(in.Uint8())
		case "URIType":
			out.URIType = uint8(in.Uint8())
		case "URI":
			if in.IsNull() {
				in.Skip()
				out.URI = nil
			} else {
				out.URI = in.Bytes()
			}
		case "TransferType":
			out.TransferType = uint8(in.Uint8())
		case "Storage":
			if in.IsNull() {
				in.Skip()
				out.Storage = nil
			} else {
				out.Storage = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi38(out *jwriter.Writer, in ResourceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RequestID\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.RequestID))
	}
	{
		const prefix string = ",\"URIType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.URIType))
	}
	{
		const prefix string = ",\"URI\":"
		out.RawString(prefix)
		out.Base64Bytes(in.URI)
	}
	{
		const prefix string = ",\"TransferType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TransferType))
	}
	{
		const prefix string = ",\"Storage\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Storage)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi38(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi39(in *jlexer.Lexer, out *RequestDataStream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ReqMessageRate":
			out.ReqMessageRate = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ReqStreamID":
			out.ReqStreamID = uint8(in.Uint8())
		case "StartStop":
			out.StartStop = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi39(out *jwriter.Writer, in RequestDataStream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ReqMessageRate\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.ReqMessageRate))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ReqStreamID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ReqStreamID))
	}
	{
		const prefix string = ",\"StartStop\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.StartStop))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestDataStream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestDataStream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestDataStream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestDataStream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi39(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi40(in *jlexer.Lexer, out *RcChannelsScaled) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Scaled":
			out.Chan1Scaled = int16(in.Int16())
		case "Chan2Scaled":
			out.Chan2Scaled = int16(in.Int16())
		case "Chan3Scaled":
			out.Chan3Scaled = int16(in.Int16())
		case "Chan4Scaled":
			out.Chan4Scaled = int16(in.Int16())
		case "Chan5Scaled":
			out.Chan5Scaled = int16(in.Int16())
		case "Chan6Scaled":
			out.Chan6Scaled = int16(in.Int16())
		case "Chan7Scaled":
			out.Chan7Scaled = int16(in.Int16())
		case "Chan8Scaled":
			out.Chan8Scaled = int16(in.Int16())
		case "Port":
			out.Port = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi40(out *jwriter.Writer, in RcChannelsScaled) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Chan1Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan1Scaled))
	}
	{
		const prefix string = ",\"Chan2Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan2Scaled))
	}
	{
		const prefix string = ",\"Chan3Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan3Scaled))
	}
	{
		const prefix string = ",\"Chan4Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan4Scaled))
	}
	{
		const prefix string = ",\"Chan5Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan5Scaled))
	}
	{
		const prefix string = ",\"Chan6Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan6Scaled))
	}
	{
		const prefix string = ",\"Chan7Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan7Scaled))
	}
	{
		const prefix string = ",\"Chan8Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan8Scaled))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Port))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsScaled) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsScaled) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsScaled) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsScaled) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi40(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi41(in *jlexer.Lexer, out *RcChannelsRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Port":
			out.Port = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi41(out *jwriter.Writer, in RcChannelsRaw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Chan1Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan1Raw))
	}
	{
		const prefix string = ",\"Chan2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan2Raw))
	}
	{
		const prefix string = ",\"Chan3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan3Raw))
	}
	{
		const prefix string = ",\"Chan4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan4Raw))
	}
	{
		const prefix string = ",\"Chan5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan5Raw))
	}
	{
		const prefix string = ",\"Chan6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan6Raw))
	}
	{
		const prefix string = ",\"Chan7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan7Raw))
	}
	{
		const prefix string = ",\"Chan8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan8Raw))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Port))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi41(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi42(in *jlexer.Lexer, out *RcChannelsOverride) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi42(out *jwriter.Writer, in RcChannelsOverride) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Chan1Raw\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Chan1Raw))
	}
	{
		const prefix string = ",\"Chan2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan2Raw))
	}
	{
		const prefix string = ",\"Chan3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan3Raw))
	}
	{
		const prefix string = ",\"Chan4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan4Raw))
	}
	{
		const prefix string = ",\"Chan5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan5Raw))
	}
	{
		const prefix string = ",\"Chan6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan6Raw))
	}
	{
		const prefix string = ",\"Chan7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan7Raw))
	}
	{
		const prefix string = ",\"Chan8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan8Raw))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsOverride) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsOverride) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsOverride) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsOverride) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi42(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi43(in *jlexer.Lexer, out *RcChannels) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Chan9Raw":
			out.Chan9Raw = uint16(in.Uint16())
		case "Chan10Raw":
			out.Chan10Raw = uint16(in.Uint16())
		case "Chan11Raw":
			out.Chan11Raw = uint16(in.Uint16())
		case "Chan12Raw":
			out.Chan12Raw = uint16(in.Uint16())
		case "Chan13Raw":
			out.Chan13Raw = uint16(in.Uint16())
		case "Chan14Raw":
			out.Chan14Raw = uint16(in.Uint16())
		case "Chan15Raw":
			out.Chan15Raw = uint16(in.Uint16())
		case "Chan16Raw":
			out.Chan16Raw = uint16(in.Uint16())
		case "Chan17Raw":
			out.Chan17Raw = uint16(in.Uint16())
		case "Chan18Raw":
			out.Chan18Raw = uint16(in.Uint16())
		case "Chancount":
			out.Chancount = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi43(out *jwriter.Writer, in RcChannels) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Chan1Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan1Raw))
	}
	{
		const prefix string = ",\"Chan2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan2Raw))
	}
	{
		const prefix string = ",\"Chan3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan3Raw))
	}
	{
		const prefix string = ",\"Chan4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan4Raw))
	}
	{
		const prefix string = ",\"Chan5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan5Raw))
	}
	{
		const prefix string = ",\"Chan6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan6Raw))
	}
	{
		const prefix string = ",\"Chan7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan7Raw))
	}
	{
		const prefix string = ",\"Chan8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan8Raw))
	}
	{
		const prefix string = ",\"Chan9Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan9Raw))
	}
	{
		const prefix string = ",\"Chan10Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan10Raw))
	}
	{
		const prefix string = ",\"Chan11Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan11Raw))
	}
	{
		const prefix string = ",\"Chan12Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan12Raw))
	}
	{
		const prefix string = ",\"Chan13Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan13Raw))
	}
	{
		const prefix string = ",\"Chan14Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan14Raw))
	}
	{
		const prefix string = ",\"Chan15Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan15Raw))
	}
	{
		const prefix string = ",\"Chan16Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan16Raw))
	}
	{
		const prefix string = ",\"Chan17Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan17Raw))
	}
	{
		const prefix string = ",\"Chan18Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan18Raw))
	}
	{
		const prefix string = ",\"Chancount\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Chancount))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannels) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannels) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannels) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannels) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi43(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi44(in *jlexer.Lexer, out *RawPressure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "PressAbs":
			out.PressAbs = int16(in.Int16())
		case "PressDiff1":
			out.PressDiff1 = int16(in.Int16())
		case "PressDiff2":
			out.PressDiff2 = int16(in.Int16())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi44(out *jwriter.Writer, in RawPressure) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"PressAbs\":"
		out.RawString(prefix)
		out.Int16(int16(in.PressAbs))
	}
	{
		const prefix string = ",\"PressDiff1\":"
		out.RawString(prefix)
		out.Int16(int16(in.PressDiff1))
	}
	{
		const prefix string = ",\"PressDiff2\":"
		out.RawString(prefix)
		out.Int16(int16(in.PressDiff2))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawPressure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawPressure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawPressure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawPressure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi44(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi45(in *jlexer.Lexer, out *RawImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi45(out *jwriter.Writer, in RawImu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi45(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi46(in *jlexer.Lexer, out *RadioStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rxerrors":
			out.Rxerrors = uint16(in.Uint16())
		case "Fixed":
			out.Fixed = uint16(in.Uint16())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		case "Remrssi":
			out.Remrssi = uint8(in.Uint8())
		case "Txbuf":
			out.Txbuf = uint8(in.Uint8())
		case "Noise":
			out.Noise = uint8(in.Uint8())
		case "Remnoise":
			out.Remnoise = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi46(out *jwriter.Writer, in RadioStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Rxerrors\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Rxerrors))
	}
	{
		const prefix string = ",\"Fixed\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Fixed))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	{
		const prefix string = ",\"Remrssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Remrssi))
	}
	{
		const prefix string = ",\"Txbuf\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Txbuf))
	}
	{
		const prefix string = ",\"Noise\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Noise))
	}
	{
		const prefix string = ",\"Remnoise\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Remnoise))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RadioStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RadioStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RadioStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RadioStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi46(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi47(in *jlexer.Lexer, out *PowerStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Vcc":
			out.Vcc = uint16(in.Uint16())
		case "Vservo":
			out.Vservo = uint16(in.Uint16())
		case "Flags":
			out.Flags = MAV_POWER_STATUS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi47(out *jwriter.Writer, in PowerStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Vcc\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Vcc))
	}
	{
		const prefix string = ",\"Vservo\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Vservo))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PowerStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PowerStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PowerStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PowerStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi47(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi48(in *jlexer.Lexer, out *PositionTargetLocalNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi48(out *jwriter.Writer, in PositionTargetLocalNed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Afx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afx))
	}
	{
		const prefix string = ",\"Afy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afy))
	}
	{
		const prefix string = ",\"Afz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afz))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	{
		const prefix string = ",\"CoordinateFrame\":"
		out.RawString(prefix)
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionTargetLocalNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionTargetLocalNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionTargetLocalNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionTargetLocalNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi48(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi49(in *jlexer.Lexer, out *PositionTargetGlobalInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "LatInt":
			out.LatInt = int32(in.Int32())
		case "LonInt":
			out.LonInt = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi49(out *jwriter.Writer, in PositionTargetGlobalInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"LatInt\":"
		out.RawString(prefix)
		out.Int32(int32(in.LatInt))
	}
	{
		const prefix string = ",\"LonInt\":"
		out.RawString(prefix)
		out.Int32(int32(in.LonInt))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Afx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afx))
	}
	{
		const prefix string = ",\"Afy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afy))
	}
	{
		const prefix string = ",\"Afz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afz))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	{
		const prefix string = ",\"CoordinateFrame\":"
		out.RawString(prefix)
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionTargetGlobalInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionTargetGlobalInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionTargetGlobalInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionTargetGlobalInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi49(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi50(in *jlexer.Lexer, out *Ping) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Seq":
			out.Seq = uint32(in.Uint32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi50(out *jwriter.Writer, in Ping) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ping) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ping) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ping) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ping) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi50(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi51(in *jlexer.Lexer, out *ParamValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "ParamCount":
			out.ParamCount = uint16(in.Uint16())
		case "ParamIndex":
			out.ParamIndex = uint16(in.Uint16())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi51(out *jwriter.Writer, in ParamValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamValue\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	{
		const prefix string = ",\"ParamCount\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ParamCount))
	}
	{
		const prefix string = ",\"ParamIndex\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ParamIndex))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	{
		const prefix string = ",\"ParamType\":"
		out.RawString(prefix)
		out.Int(int(in.ParamType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi51(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi52(in *jlexer.Lexer, out *ParamSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi52(out *jwriter.Writer, in ParamSet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamValue\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	{
		const prefix string = ",\"ParamType\":"
		out.RawString(prefix)
		out.Int(int(in.ParamType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi52(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi53(in *jlexer.Lexer, out *ParamRequestRead) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamIndex":
			out.ParamIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi53(out *jwriter.Writer, in ParamRequestRead) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamIndex\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.ParamIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamRequestRead) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamRequestRead) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamRequestRead) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamRequestRead) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi53(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi54(in *jlexer.Lexer, out *ParamRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi54(out *jwriter.Writer, in ParamRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi54(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi55(in *jlexer.Lexer, out *ParamMapRc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue0":
			out.ParamValue0 = float32(in.Float32())
		case "Scale":
			out.Scale = float32(in.Float32())
		case "ParamValueMin":
			out.ParamValueMin = float32(in.Float32())
		case "ParamValueMax":
			out.ParamValueMax = float32(in.Float32())
		case "ParamIndex":
			out.ParamIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParameterRcChannelIndex":
			out.ParameterRcChannelIndex = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi55(out *jwriter.Writer, in ParamMapRc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamValue0\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue0))
	}
	{
		const prefix string = ",\"Scale\":"
		out.RawString(prefix)
		out.Float32(float32(in.Scale))
	}
	{
		const prefix string = ",\"ParamValueMin\":"
		out.RawString(prefix)
		out.Float32(float32(in.ParamValueMin))
	}
	{
		const prefix string = ",\"ParamValueMax\":"
		out.RawString(prefix)
		out.Float32(float32(in.ParamValueMax))
	}
	{
		const prefix string = ",\"ParamIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.ParamIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	{
		const prefix string = ",\"ParameterRcChannelIndex\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ParameterRcChannelIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamMapRc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamMapRc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamMapRc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamMapRc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi55(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi56(in *jlexer.Lexer, out *ParamAckTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		case "ParamResult":
			out.ParamResult = PARAM_ACK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi56(out *jwriter.Writer, in ParamAckTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamValue\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	{
		const prefix string = ",\"ParamType\":"
		out.RawString(prefix)
		out.Int(int(in.ParamType))
	}
	{
		const prefix string = ",\"ParamResult\":"
		out.RawString(prefix)
		out.Int(int(in.ParamResult))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamAckTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamAckTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamAckTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamAckTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi56(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi57(in *jlexer.Lexer, out *OpticalFlowRad) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "IntegrationTimeUs":
			out.IntegrationTimeUs = uint32(in.Uint32())
		case "IntegratedX":
			out.IntegratedX = float32(in.Float32())
		case "IntegratedY":
			out.IntegratedY = float32(in.Float32())
		case "IntegratedXgyro":
			out.IntegratedXgyro = float32(in.Float32())
		case "IntegratedYgyro":
			out.IntegratedYgyro = float32(in.Float32())
		case "IntegratedZgyro":
			out.IntegratedZgyro = float32(in.Float32())
		case "TimeDeltaDistanceUs":
			out.TimeDeltaDistanceUs = uint32(in.Uint32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi57(out *jwriter.Writer, in OpticalFlowRad) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"IntegrationTimeUs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.IntegrationTimeUs))
	}
	{
		const prefix string = ",\"IntegratedX\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedX))
	}
	{
		const prefix string = ",\"IntegratedY\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedY))
	}
	{
		const prefix string = ",\"IntegratedXgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedXgyro))
	}
	{
		const prefix string = ",\"IntegratedYgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedYgyro))
	}
	{
		const prefix string = ",\"IntegratedZgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedZgyro))
	}
	{
		const prefix string = ",\"TimeDeltaDistanceUs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeDeltaDistanceUs))
	}
	{
		const prefix string = ",\"Distance\":"
		out.RawString(prefix)
		out.Float32(float32(in.Distance))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	{
		const prefix string = ",\"SensorID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SensorID))
	}
	{
		const prefix string = ",\"Quality\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpticalFlowRad) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpticalFlowRad) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpticalFlowRad) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpticalFlowRad) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi57(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi58(in *jlexer.Lexer, out *OpticalFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "FlowCompMX":
			out.FlowCompMX = float32(in.Float32())
		case "FlowCompMY":
			out.FlowCompMY = float32(in.Float32())
		case "GroundDistance":
			out.GroundDistance = float32(in.Float32())
		case "FlowX":
			out.FlowX = int16(in.Int16())
		case "FlowY":
			out.FlowY = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi58(out *jwriter.Writer, in OpticalFlow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"FlowCompMX\":"
		out.RawString(prefix)
		out.Float32(float32(in.FlowCompMX))
	}
	{
		const prefix string = ",\"FlowCompMY\":"
		out.RawString(prefix)
		out.Float32(float32(in.FlowCompMY))
	}
	{
		const prefix string = ",\"GroundDistance\":"
		out.RawString(prefix)
		out.Float32(float32(in.GroundDistance))
	}
	{
		const prefix string = ",\"FlowX\":"
		out.RawString(prefix)
		out.Int16(int16(in.FlowX))
	}
	{
		const prefix string = ",\"FlowY\":"
		out.RawString(prefix)
		out.Int16(int16(in.FlowY))
	}
	{
		const prefix string = ",\"SensorID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SensorID))
	}
	{
		const prefix string = ",\"Quality\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpticalFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpticalFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpticalFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpticalFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi58(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi59(in *jlexer.Lexer, out *NavControllerOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NavRoll":
			out.NavRoll = float32(in.Float32())
		case "NavPitch":
			out.NavPitch = float32(in.Float32())
		case "AltError":
			out.AltError = float32(in.Float32())
		case "AspdError":
			out.AspdError = float32(in.Float32())
		case "XtrackError":
			out.XtrackError = float32(in.Float32())
		case "NavBearing":
			out.NavBearing = int16(in.Int16())
		case "TargetBearing":
			out.TargetBearing = int16(in.Int16())
		case "WpDist":
			out.WpDist = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi59(out *jwriter.Writer, in NavControllerOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NavRoll\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.NavRoll))
	}
	{
		const prefix string = ",\"NavPitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.NavPitch))
	}
	{
		const prefix string = ",\"AltError\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltError))
	}
	{
		const prefix string = ",\"AspdError\":"
		out.RawString(prefix)
		out.Float32(float32(in.AspdError))
	}
	{
		const prefix string = ",\"XtrackError\":"
		out.RawString(prefix)
		out.Float32(float32(in.XtrackError))
	}
	{
		const prefix string = ",\"NavBearing\":"
		out.RawString(prefix)
		out.Int16(int16(in.NavBearing))
	}
	{
		const prefix string = ",\"TargetBearing\":"
		out.RawString(prefix)
		out.Int16(int16(in.TargetBearing))
	}
	{
		const prefix string = ",\"WpDist\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.WpDist))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NavControllerOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NavControllerOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NavControllerOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NavControllerOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi59(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi60(in *jlexer.Lexer, out *NamedValueInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = int32(in.Int32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi60(out *jwriter.Writer, in NamedValueInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Int32(int32(in.Value))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamedValueInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamedValueInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamedValueInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamedValueInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi60(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi61(in *jlexer.Lexer, out *NamedValueFloat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = float32(in.Float32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi61(out *jwriter.Writer, in NamedValueFloat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Float32(float32(in.Value))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamedValueFloat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamedValueFloat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamedValueFloat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamedValueFloat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi61(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi62(in *jlexer.Lexer, out *MissionWritePartialList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi62(out *jwriter.Writer, in MissionWritePartialList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StartIndex\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	{
		const prefix string = ",\"EndIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.EndIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionWritePartialList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionWritePartialList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionWritePartialList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionWritePartialList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi62(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi63(in *jlexer.Lexer, out *MissionSetCurrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi63(out *jwriter.Writer, in MissionSetCurrent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionSetCurrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionSetCurrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionSetCurrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionSetCurrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi63(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi64(in *jlexer.Lexer, out *MissionRequestPartialList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi64(out *jwriter.Writer, in MissionRequestPartialList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StartIndex\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	{
		const prefix string = ",\"EndIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.EndIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestPartialList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestPartialList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestPartialList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestPartialList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi64(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi65(in *jlexer.Lexer, out *MissionRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi65(out *jwriter.Writer, in MissionRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi65(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi66(in *jlexer.Lexer, out *MissionRequestInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi66(out *jwriter.Writer, in MissionRequestInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi66(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi67(in *jlexer.Lexer, out *MissionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi67(out *jwriter.Writer, in MissionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi67(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi68(in *jlexer.Lexer, out *MissionItemReached) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi68(out *jwriter.Writer, in MissionItemReached) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItemReached) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItemReached) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItemReached) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItemReached) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi68(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi69(in *jlexer.Lexer, out *MissionItemInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = int32(in.Int32())
		case "Y":
			out.Y = int32(in.Int32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi69(out *jwriter.Writer, in MissionItemInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Param1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	{
		const prefix string = ",\"Param2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param2))
	}
	{
		const prefix string = ",\"Param3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param3))
	}
	{
		const prefix string = ",\"Param4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param4))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Int32(int32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Int32(int32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	{
		const prefix string = ",\"Current\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Current))
	}
	{
		const prefix string = ",\"Autocontinue\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItemInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItemInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItemInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItemInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi69(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi70(in *jlexer.Lexer, out *MissionItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi70(out *jwriter.Writer, in MissionItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Param1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	{
		const prefix string = ",\"Param2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param2))
	}
	{
		const prefix string = ",\"Param3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param3))
	}
	{
		const prefix string = ",\"Param4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param4))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	{
		const prefix string = ",\"Current\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Current))
	}
	{
		const prefix string = ",\"Autocontinue\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi70(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi71(in *jlexer.Lexer, out *MissionCurrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi71(out *jwriter.Writer, in MissionCurrent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionCurrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionCurrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionCurrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionCurrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi71(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi72(in *jlexer.Lexer, out *MissionCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Count":
			out.Count = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi72(out *jwriter.Writer, in MissionCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Count))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi72(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi73(in *jlexer.Lexer, out *MissionClearAll) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi73(out *jwriter.Writer, in MissionClearAll) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionClearAll) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionClearAll) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionClearAll) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionClearAll) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi73(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi74(in *jlexer.Lexer, out *MissionChanged) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "OriginSysid":
			out.OriginSysid = uint8(in.Uint8())
		case "OriginCompid":
			out.OriginCompid = MAV_COMPONENT(in.Int())
		case "MissionType":
			out.MissionType = MAV_MISSION_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi74(out *jwriter.Writer, in MissionChanged) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StartIndex\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	{
		const prefix string = ",\"EndIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.EndIndex))
	}
	{
		const prefix string = ",\"OriginSysid\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.OriginSysid))
	}
	{
		const prefix string = ",\"OriginCompid\":"
		out.RawString(prefix)
		out.Int(int(in.OriginCompid))
	}
	{
		const prefix string = ",\"MissionType\":"
		out.RawString(prefix)
		out.Int(int(in.MissionType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionChanged) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionChanged) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionChanged) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionChanged) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi74(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi75(in *jlexer.Lexer, out *MissionAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Type":
			out.Type = MAV_MISSION_RESULT(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi75(out *jwriter.Writer, in MissionAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi75(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi76(in *jlexer.Lexer, out *MessageInterval) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IntervalUs":
			out.IntervalUs = int32(in.Int32())
		case "MessageID":
			out.MessageID = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi76(out *jwriter.Writer, in MessageInterval) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IntervalUs\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.IntervalUs))
	}
	{
		const prefix string = ",\"MessageID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageInterval) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageInterval) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageInterval) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageInterval) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi76(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi77(in *jlexer.Lexer, out *MemoryVect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Address":
			out.Address = uint16(in.Uint16())
		case "Ver":
			out.Ver = uint8(in.Uint8())
		case "Type":
			out.Type = uint8(in.Uint8())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				in.Delim('[')
				if out.Value == nil {
					if !in.IsDelim(']') {
						out.Value = make([]int8, 0, 64)
					} else {
						out.Value = []int8{}
					}
				} else {
					out.Value = (out.Value)[:0]
				}
				for !in.IsDelim(']') {
					var v25 int8
					v25 = int8(in.Int8())
					out.Value = append(out.Value, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi77(out *jwriter.Writer, in MemoryVect) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Address))
	}
	{
		const prefix string = ",\"Ver\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Ver))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Type))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		if in.Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Value {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v27))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoryVect) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryVect) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryVect) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryVect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi77(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi78(in *jlexer.Lexer, out *ManualSetpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "ModeSwitch":
			out.ModeSwitch = uint8(in.Uint8())
		case "ManualOverrideSwitch":
			out.ManualOverrideSwitch = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi78(out *jwriter.Writer, in ManualSetpoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"Thrust\":"
		out.RawString(prefix)
		out.Float32(float32(in.Thrust))
	}
	{
		const prefix string = ",\"ModeSwitch\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ModeSwitch))
	}
	{
		const prefix string = ",\"ManualOverrideSwitch\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ManualOverrideSwitch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManualSetpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManualSetpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManualSetpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManualSetpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi78(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi79(in *jlexer.Lexer, out *ManualControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "X":
			out.X = int16(in.Int16())
		case "Y":
			out.Y = int16(in.Int16())
		case "Z":
			out.Z = int16(in.Int16())
		case "R":
			out.R = int16(in.Int16())
		case "Buttons":
			out.Buttons = uint16(in.Uint16())
		case "Target":
			out.Target = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi79(out *jwriter.Writer, in ManualControl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Int16(int16(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Int16(int16(in.Z))
	}
	{
		const prefix string = ",\"R\":"
		out.RawString(prefix)
		out.Int16(int16(in.R))
	}
	{
		const prefix string = ",\"Buttons\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Buttons))
	}
	{
		const prefix string = ",\"Target\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Target))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManualControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManualControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManualControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManualControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi79(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi80(in *jlexer.Lexer, out *MagCalReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Fitness":
			out.Fitness = float32(in.Float32())
		case "OfsX":
			out.OfsX = float32(in.Float32())
		case "OfsY":
			out.OfsY = float32(in.Float32())
		case "OfsZ":
			out.OfsZ = float32(in.Float32())
		case "DiagX":
			out.DiagX = float32(in.Float32())
		case "DiagY":
			out.DiagY = float32(in.Float32())
		case "DiagZ":
			out.DiagZ = float32(in.Float32())
		case "OffdiagX":
			out.OffdiagX = float32(in.Float32())
		case "OffdiagY":
			out.OffdiagY = float32(in.Float32())
		case "OffdiagZ":
			out.OffdiagZ = float32(in.Float32())
		case "CompassID":
			out.CompassID = uint8(in.Uint8())
		case "CalMask":
			out.CalMask = uint8(in.Uint8())
		case "CalStatus":
			out.CalStatus = MAG_CAL_STATUS(in.Int())
		case "Autosaved":
			out.Autosaved = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi80(out *jwriter.Writer, in MagCalReport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Fitness\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Fitness))
	}
	{
		const prefix string = ",\"OfsX\":"
		out.RawString(prefix)
		out.Float32(float32(in.OfsX))
	}
	{
		const prefix string = ",\"OfsY\":"
		out.RawString(prefix)
		out.Float32(float32(in.OfsY))
	}
	{
		const prefix string = ",\"OfsZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.OfsZ))
	}
	{
		const prefix string = ",\"DiagX\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiagX))
	}
	{
		const prefix string = ",\"DiagY\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiagY))
	}
	{
		const prefix string = ",\"DiagZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiagZ))
	}
	{
		const prefix string = ",\"OffdiagX\":"
		out.RawString(prefix)
		out.Float32(float32(in.OffdiagX))
	}
	{
		const prefix string = ",\"OffdiagY\":"
		out.RawString(prefix)
		out.Float32(float32(in.OffdiagY))
	}
	{
		const prefix string = ",\"OffdiagZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.OffdiagZ))
	}
	{
		const prefix string = ",\"CompassID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.CompassID))
	}
	{
		const prefix string = ",\"CalMask\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.CalMask))
	}
	{
		const prefix string = ",\"CalStatus\":"
		out.RawString(prefix)
		out.Int(int(in.CalStatus))
	}
	{
		const prefix string = ",\"Autosaved\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Autosaved))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MagCalReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MagCalReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MagCalReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MagCalReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi80(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi81(in *jlexer.Lexer, out *LogRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Start":
			out.Start = uint16(in.Uint16())
		case "End":
			out.End = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi81(out *jwriter.Writer, in LogRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Start\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Start))
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.End))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi81(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi82(in *jlexer.Lexer, out *LogRequestEnd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi82(out *jwriter.Writer, in LogRequestEnd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestEnd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestEnd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestEnd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestEnd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi82(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi83(in *jlexer.Lexer, out *LogRequestData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ofs":
			out.Ofs = uint32(in.Uint32())
		case "Count":
			out.Count = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi83(out *jwriter.Writer, in LogRequestData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ofs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Ofs))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Count))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ID))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi83(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi84(in *jlexer.Lexer, out *LogErase) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi84(out *jwriter.Writer, in LogErase) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogErase) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogErase) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogErase) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogErase) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi84(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi85(in *jlexer.Lexer, out *LogEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUtc":
			out.TimeUtc = uint32(in.Uint32())
		case "Size":
			out.Size = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "NumLogs":
			out.NumLogs = uint16(in.Uint16())
		case "LastLogNum":
			out.LastLogNum = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi85(out *jwriter.Writer, in LogEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUtc\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeUtc))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Size))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ID))
	}
	{
		const prefix string = ",\"NumLogs\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.NumLogs))
	}
	{
		const prefix string = ",\"LastLogNum\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.LastLogNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi85(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi86(in *jlexer.Lexer, out *LogData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ofs":
			out.Ofs = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "Count":
			out.Count = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi86(out *jwriter.Writer, in LogData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ofs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Ofs))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ID))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Count))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi86(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi87(in *jlexer.Lexer, out *LocalPositionNedSystemGlobalOffset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi87(out *jwriter.Writer, in LocalPositionNedSystemGlobalOffset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNedSystemGlobalOffset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNedSystemGlobalOffset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNedSystemGlobalOffset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNedSystemGlobalOffset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi87(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi88(in *jlexer.Lexer, out *LocalPositionNedCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Ax":
			out.Ax = float32(in.Float32())
		case "Ay":
			out.Ay = float32(in.Float32())
		case "Az":
			out.Az = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v31 float32
					v31 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstimatorType":
			out.EstimatorType = MAV_ESTIMATOR_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi88(out *jwriter.Writer, in LocalPositionNedCov) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Ax\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ax))
	}
	{
		const prefix string = ",\"Ay\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ay))
	}
	{
		const prefix string = ",\"Az\":"
		out.RawString(prefix)
		out.Float32(float32(in.Az))
	}
	{
		const prefix string = ",\"Covariance\":"
		out.RawString(prefix)
		if in.Covariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Covariance {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v33))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EstimatorType\":"
		out.RawString(prefix)
		out.Int(int(in.EstimatorType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNedCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNedCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNedCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNedCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi88(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi89(in *jlexer.Lexer, out *LocalPositionNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi89(out *jwriter.Writer, in LocalPositionNed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi89(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi89(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi89(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi89(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi90(in *jlexer.Lexer, out *LinkNodeStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "TxRate":
			out.TxRate = uint32(in.Uint32())
		case "RxRate":
			out.RxRate = uint32(in.Uint32())
		case "MessagesSent":
			out.MessagesSent = uint32(in.Uint32())
		case "MessagesReceived":
			out.MessagesReceived = uint32(in.Uint32())
		case "MessagesLost":
			out.MessagesLost = uint32(in.Uint32())
		case "RxParseErr":
			out.RxParseErr = uint16(in.Uint16())
		case "TxOverflows":
			out.TxOverflows = uint16(in.Uint16())
		case "RxOverflows":
			out.RxOverflows = uint16(in.Uint16())
		case "TxBuf":
			out.TxBuf = uint8(in.Uint8())
		case "RxBuf":
			out.RxBuf = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi90(out *jwriter.Writer, in LinkNodeStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"TxRate\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TxRate))
	}
	{
		const prefix string = ",\"RxRate\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.RxRate))
	}
	{
		const prefix string = ",\"MessagesSent\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MessagesSent))
	}
	{
		const prefix string = ",\"MessagesReceived\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MessagesReceived))
	}
	{
		const prefix string = ",\"MessagesLost\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MessagesLost))
	}
	{
		const prefix string = ",\"RxParseErr\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.RxParseErr))
	}
	{
		const prefix string = ",\"TxOverflows\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TxOverflows))
	}
	{
		const prefix string = ",\"RxOverflows\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.RxOverflows))
	}
	{
		const prefix string = ",\"TxBuf\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TxBuf))
	}
	{
		const prefix string = ",\"RxBuf\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RxBuf))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinkNodeStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi90(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinkNodeStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi90(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinkNodeStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi90(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinkNodeStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi90(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi91(in *jlexer.Lexer, out *LandingTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AngleX":
			out.AngleX = float32(in.Float32())
		case "AngleY":
			out.AngleY = float32(in.Float32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "SizeX":
			out.SizeX = float32(in.Float32())
		case "SizeY":
			out.SizeY = float32(in.Float32())
		case "TargetNum":
			out.TargetNum = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi91(out *jwriter.Writer, in LandingTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"AngleX\":"
		out.RawString(prefix)
		out.Float32(float32(in.AngleX))
	}
	{
		const prefix string = ",\"AngleY\":"
		out.RawString(prefix)
		out.Float32(float32(in.AngleY))
	}
	{
		const prefix string = ",\"Distance\":"
		out.RawString(prefix)
		out.Float32(float32(in.Distance))
	}
	{
		const prefix string = ",\"SizeX\":"
		out.RawString(prefix)
		out.Float32(float32(in.SizeX))
	}
	{
		const prefix string = ",\"SizeY\":"
		out.RawString(prefix)
		out.Float32(float32(in.SizeY))
	}
	{
		const prefix string = ",\"TargetNum\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetNum))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LandingTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi91(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LandingTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi91(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LandingTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi91(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LandingTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi91(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi92(in *jlexer.Lexer, out *HomePosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v34 float32
					v34 = float32(in.Float32())
					out.Q = append(out.Q, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ApproachX":
			out.ApproachX = float32(in.Float32())
		case "ApproachY":
			out.ApproachY = float32(in.Float32())
		case "ApproachZ":
			out.ApproachZ = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi92(out *jwriter.Writer, in HomePosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Q {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v36))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ApproachX\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachX))
	}
	{
		const prefix string = ",\"ApproachY\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachY))
	}
	{
		const prefix string = ",\"ApproachZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachZ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HomePosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi92(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HomePosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi92(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HomePosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi92(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HomePosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi92(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi93(in *jlexer.Lexer, out *HilStateQuaternion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AttitudeQuaternion":
			if in.IsNull() {
				in.Skip()
				out.AttitudeQuaternion = nil
			} else {
				in.Delim('[')
				if out.AttitudeQuaternion == nil {
					if !in.IsDelim(']') {
						out.AttitudeQuaternion = make([]float32, 0, 16)
					} else {
						out.AttitudeQuaternion = []float32{}
					}
				} else {
					out.AttitudeQuaternion = (out.AttitudeQuaternion)[:0]
				}
				for !in.IsDelim(']') {
					var v37 float32
					v37 = float32(in.Float32())
					out.AttitudeQuaternion = append(out.AttitudeQuaternion, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "IndAirspeed":
			out.IndAirspeed = uint16(in.Uint16())
		case "TrueAirspeed":
			out.TrueAirspeed = uint16(in.Uint16())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi93(out *jwriter.Writer, in HilStateQuaternion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"AttitudeQuaternion\":"
		out.RawString(prefix)
		if in.AttitudeQuaternion == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.AttitudeQuaternion {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vz))
	}
	{
		const prefix string = ",\"IndAirspeed\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.IndAirspeed))
	}
	{
		const prefix string = ",\"TrueAirspeed\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TrueAirspeed))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilStateQuaternion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi93(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilStateQuaternion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi93(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilStateQuaternion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi93(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilStateQuaternion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi93(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi94(in *jlexer.Lexer, out *HilState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi94(out *jwriter.Writer, in HilState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vz))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi94(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi94(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi94(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi94(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi95(in *jlexer.Lexer, out *HilSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Xmag":
			out.Xmag = float32(in.Float32())
		case "Ymag":
			out.Ymag = float32(in.Float32())
		case "Zmag":
			out.Zmag = float32(in.Float32())
		case "AbsPressure":
			out.AbsPressure = float32(in.Float32())
		case "DiffPressure":
			out.DiffPressure = float32(in.Float32())
		case "PressureAlt":
			out.PressureAlt = float32(in.Float32())
		case "Temperature":
			out.Temperature = float32(in.Float32())
		case "FieldsUpdated":
			out.FieldsUpdated = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi95(out *jwriter.Writer, in HilSensor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zmag))
	}
	{
		const prefix string = ",\"AbsPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.AbsPressure))
	}
	{
		const prefix string = ",\"DiffPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiffPressure))
	}
	{
		const prefix string = ",\"PressureAlt\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressureAlt))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.Temperature))
	}
	{
		const prefix string = ",\"FieldsUpdated\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.FieldsUpdated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi95(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi95(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi95(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi95(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi96(in *jlexer.Lexer, out *HilRcInputsRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Chan9Raw":
			out.Chan9Raw = uint16(in.Uint16())
		case "Chan10Raw":
			out.Chan10Raw = uint16(in.Uint16())
		case "Chan11Raw":
			out.Chan11Raw = uint16(in.Uint16())
		case "Chan12Raw":
			out.Chan12Raw = uint16(in.Uint16())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi96(out *jwriter.Writer, in HilRcInputsRaw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Chan1Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan1Raw))
	}
	{
		const prefix string = ",\"Chan2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan2Raw))
	}
	{
		const prefix string = ",\"Chan3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan3Raw))
	}
	{
		const prefix string = ",\"Chan4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan4Raw))
	}
	{
		const prefix string = ",\"Chan5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan5Raw))
	}
	{
		const prefix string = ",\"Chan6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan6Raw))
	}
	{
		const prefix string = ",\"Chan7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan7Raw))
	}
	{
		const prefix string = ",\"Chan8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan8Raw))
	}
	{
		const prefix string = ",\"Chan9Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan9Raw))
	}
	{
		const prefix string = ",\"Chan10Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan10Raw))
	}
	{
		const prefix string = ",\"Chan11Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan11Raw))
	}
	{
		const prefix string = ",\"Chan12Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan12Raw))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilRcInputsRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi96(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilRcInputsRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi96(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilRcInputsRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi96(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilRcInputsRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi96(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi97(in *jlexer.Lexer, out *HilOpticalFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "IntegrationTimeUs":
			out.IntegrationTimeUs = uint32(in.Uint32())
		case "IntegratedX":
			out.IntegratedX = float32(in.Float32())
		case "IntegratedY":
			out.IntegratedY = float32(in.Float32())
		case "IntegratedXgyro":
			out.IntegratedXgyro = float32(in.Float32())
		case "IntegratedYgyro":
			out.IntegratedYgyro = float32(in.Float32())
		case "IntegratedZgyro":
			out.IntegratedZgyro = float32(in.Float32())
		case "TimeDeltaDistanceUs":
			out.TimeDeltaDistanceUs = uint32(in.Uint32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi97(out *jwriter.Writer, in HilOpticalFlow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"IntegrationTimeUs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.IntegrationTimeUs))
	}
	{
		const prefix string = ",\"IntegratedX\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedX))
	}
	{
		const prefix string = ",\"IntegratedY\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedY))
	}
	{
		const prefix string = ",\"IntegratedXgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedXgyro))
	}
	{
		const prefix string = ",\"IntegratedYgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedYgyro))
	}
	{
		const prefix string = ",\"IntegratedZgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedZgyro))
	}
	{
		const prefix string = ",\"TimeDeltaDistanceUs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeDeltaDistanceUs))
	}
	{
		const prefix string = ",\"Distance\":"
		out.RawString(prefix)
		out.Float32(float32(in.Distance))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	{
		const prefix string = ",\"SensorID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SensorID))
	}
	{
		const prefix string = ",\"Quality\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilOpticalFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi97(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilOpticalFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi97(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilOpticalFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi97(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilOpticalFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi97(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi98(in *jlexer.Lexer, out *HilGps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Vn":
			out.Vn = int16(in.Int16())
		case "Ve":
			out.Ve = int16(in.Int16())
		case "Vd":
			out.Vd = int16(in.Int16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = uint8(in.Uint8())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi98(out *jwriter.Writer, in HilGps) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"Eph\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Eph))
	}
	{
		const prefix string = ",\"Epv\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Epv))
	}
	{
		const prefix string = ",\"Vel\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Vel))
	}
	{
		const prefix string = ",\"Vn\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vn))
	}
	{
		const prefix string = ",\"Ve\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ve))
	}
	{
		const prefix string = ",\"Vd\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vd))
	}
	{
		const prefix string = ",\"Cog\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Cog))
	}
	{
		const prefix string = ",\"FixType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.FixType))
	}
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilGps) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi98(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilGps) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi98(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilGps) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi98(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilGps) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi98(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi99(in *jlexer.Lexer, out *HilControls) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "RollAilerons":
			out.RollAilerons = float32(in.Float32())
		case "PitchElevator":
			out.PitchElevator = float32(in.Float32())
		case "YawRudder":
			out.YawRudder = float32(in.Float32())
		case "Throttle":
			out.Throttle = float32(in.Float32())
		case "Aux1":
			out.Aux1 = float32(in.Float32())
		case "Aux2":
			out.Aux2 = float32(in.Float32())
		case "Aux3":
			out.Aux3 = float32(in.Float32())
		case "Aux4":
			out.Aux4 = float32(in.Float32())
		case "Mode":
			out.Mode = MAV_MODE(in.Int())
		case "NavMode":
			out.NavMode = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi99(out *jwriter.Writer, in HilControls) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"RollAilerons\":"
		out.RawString(prefix)
		out.Float32(float32(in.RollAilerons))
	}
	{
		const prefix string = ",\"PitchElevator\":"
		out.RawString(prefix)
		out.Float32(float32(in.PitchElevator))
	}
	{
		const prefix string = ",\"YawRudder\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRudder))
	}
	{
		const prefix string = ",\"Throttle\":"
		out.RawString(prefix)
		out.Float32(float32(in.Throttle))
	}
	{
		const prefix string = ",\"Aux1\":"
		out.RawString(prefix)
		out.Float32(float32(in.Aux1))
	}
	{
		const prefix string = ",\"Aux2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Aux2))
	}
	{
		const prefix string = ",\"Aux3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Aux3))
	}
	{
		const prefix string = ",\"Aux4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Aux4))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.Int(int(in.Mode))
	}
	{
		const prefix string = ",\"NavMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.NavMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilControls) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi99(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilControls) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi99(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilControls) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi99(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilControls) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi99(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi100(in *jlexer.Lexer, out *HilActuatorControls) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Flags":
			out.Flags = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v40 float32
					v40 = float32(in.Float32())
					out.Controls = append(out.Controls, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Mode":
			out.Mode = MAV_MODE_FLAG(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi100(out *jwriter.Writer, in HilActuatorControls) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Flags))
	}
	{
		const prefix string = ",\"Controls\":"
		out.RawString(prefix)
		if in.Controls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Controls {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v42))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.Int(int(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilActuatorControls) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi100(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilActuatorControls) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi100(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilActuatorControls) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi100(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilActuatorControls) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi100(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi101(in *jlexer.Lexer, out *HighresImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Xmag":
			out.Xmag = float32(in.Float32())
		case "Ymag":
			out.Ymag = float32(in.Float32())
		case "Zmag":
			out.Zmag = float32(in.Float32())
		case "AbsPressure":
			out.AbsPressure = float32(in.Float32())
		case "DiffPressure":
			out.DiffPressure = float32(in.Float32())
		case "PressureAlt":
			out.PressureAlt = float32(in.Float32())
		case "Temperature":
			out.Temperature = float32(in.Float32())
		case "FieldsUpdated":
			out.FieldsUpdated = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi101(out *jwriter.Writer, in HighresImu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zmag))
	}
	{
		const prefix string = ",\"AbsPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.AbsPressure))
	}
	{
		const prefix string = ",\"DiffPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiffPressure))
	}
	{
		const prefix string = ",\"PressureAlt\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressureAlt))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.Temperature))
	}
	{
		const prefix string = ",\"FieldsUpdated\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.FieldsUpdated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighresImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi101(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighresImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi101(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighresImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi101(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighresImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi101(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi102(in *jlexer.Lexer, out *HighLatency2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint32(in.Uint32())
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "CustomMode":
			out.CustomMode = uint16(in.Uint16())
		case "Altitude":
			out.Altitude = int16(in.Int16())
		case "TargetAltitude":
			out.TargetAltitude = int16(in.Int16())
		case "TargetDistance":
			out.TargetDistance = uint16(in.Uint16())
		case "WpNum":
			out.WpNum = uint16(in.Uint16())
		case "FailureFlags":
			out.FailureFlags = HL_FAILURE_FLAG(in.Int())
		case "Type":
			out.Type = MAV_TYPE(in.Int())
		case "Autopilot":
			out.Autopilot = MAV_AUTOPILOT(in.Int())
		case "Heading":
			out.Heading = uint8(in.Uint8())
		case "TargetHeading":
			out.TargetHeading = uint8(in.Uint8())
		case "Throttle":
			out.Throttle = uint8(in.Uint8())
		case "Airspeed":
			out.Airspeed = uint8(in.Uint8())
		case "AirspeedSp":
			out.AirspeedSp = uint8(in.Uint8())
		case "Groundspeed":
			out.Groundspeed = uint8(in.Uint8())
		case "Windspeed":
			out.Windspeed = uint8(in.Uint8())
		case "WindHeading":
			out.WindHeading = uint8(in.Uint8())
		case "Eph":
			out.Eph = uint8(in.Uint8())
		case "Epv":
			out.Epv = uint8(in.Uint8())
		case "TemperatureAir":
			out.TemperatureAir = int8(in.Int8())
		case "ClimbRate":
			out.ClimbRate = int8(in.Int8())
		case "Battery":
			out.Battery = int8(in.Int8())
		case "Custom0":
			out.Custom0 = int8(in.Int8())
		case "Custom1":
			out.Custom1 = int8(in.Int8())
		case "Custom2":
			out.Custom2 = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi102(out *jwriter.Writer, in HighLatency2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Timestamp))
	}
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"CustomMode\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.CustomMode))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int16(int16(in.Altitude))
	}
	{
		const prefix string = ",\"TargetAltitude\":"
		out.RawString(prefix)
		out.Int16(int16(in.TargetAltitude))
	}
	{
		const prefix string = ",\"TargetDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TargetDistance))
	}
	{
		const prefix string = ",\"WpNum\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.WpNum))
	}
	{
		const prefix string = ",\"FailureFlags\":"
		out.RawString(prefix)
		out.Int(int(in.FailureFlags))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"Autopilot\":"
		out.RawString(prefix)
		out.Int(int(in.Autopilot))
	}
	{
		const prefix string = ",\"Heading\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Heading))
	}
	{
		const prefix string = ",\"TargetHeading\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetHeading))
	}
	{
		const prefix string = ",\"Throttle\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Throttle))
	}
	{
		const prefix string = ",\"Airspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Airspeed))
	}
	{
		const prefix string = ",\"AirspeedSp\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.AirspeedSp))
	}
	{
		const prefix string = ",\"Groundspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Groundspeed))
	}
	{
		const prefix string = ",\"Windspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Windspeed))
	}
	{
		const prefix string = ",\"WindHeading\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.WindHeading))
	}
	{
		const prefix string = ",\"Eph\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Eph))
	}
	{
		const prefix string = ",\"Epv\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Epv))
	}
	{
		const prefix string = ",\"TemperatureAir\":"
		out.RawString(prefix)
		out.Int8(int8(in.TemperatureAir))
	}
	{
		const prefix string = ",\"ClimbRate\":"
		out.RawString(prefix)
		out.Int8(int8(in.ClimbRate))
	}
	{
		const prefix string = ",\"Battery\":"
		out.RawString(prefix)
		out.Int8(int8(in.Battery))
	}
	{
		const prefix string = ",\"Custom0\":"
		out.RawString(prefix)
		out.Int8(int8(in.Custom0))
	}
	{
		const prefix string = ",\"Custom1\":"
		out.RawString(prefix)
		out.Int8(int8(in.Custom1))
	}
	{
		const prefix string = ",\"Custom2\":"
		out.RawString(prefix)
		out.Int8(int8(in.Custom2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighLatency2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi102(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighLatency2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi102(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighLatency2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi102(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighLatency2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi102(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi103(in *jlexer.Lexer, out *HighLatency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Roll":
			out.Roll = int16(in.Int16())
		case "Pitch":
			out.Pitch = int16(in.Int16())
		case "Heading":
			out.Heading = uint16(in.Uint16())
		case "HeadingSp":
			out.HeadingSp = int16(in.Int16())
		case "AltitudeAmsl":
			out.AltitudeAmsl = int16(in.Int16())
		case "AltitudeSp":
			out.AltitudeSp = int16(in.Int16())
		case "WpDistance":
			out.WpDistance = uint16(in.Uint16())
		case "BaseMode":
			out.BaseMode = MAV_MODE_FLAG(in.Int())
		case "LandedState":
			out.LandedState = MAV_LANDED_STATE(in.Int())
		case "Throttle":
			out.Throttle = int8(in.Int8())
		case "Airspeed":
			out.Airspeed = uint8(in.Uint8())
		case "AirspeedSp":
			out.AirspeedSp = uint8(in.Uint8())
		case "Groundspeed":
			out.Groundspeed = uint8(in.Uint8())
		case "ClimbRate":
			out.ClimbRate = int8(in.Int8())
		case "GpsNsat":
			out.GpsNsat = uint8(in.Uint8())
		case "GpsFixType":
			out.GpsFixType = GPS_FIX_TYPE(in.Int())
		case "BatteryRemaining":
			out.BatteryRemaining = uint8(in.Uint8())
		case "Temperature":
			out.Temperature = int8(in.Int8())
		case "TemperatureAir":
			out.TemperatureAir = int8(in.Int8())
		case "Failsafe":
			out.Failsafe = uint8(in.Uint8())
		case "WpNum":
			out.WpNum = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi103(out *jwriter.Writer, in HighLatency) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CustomMode\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Int16(int16(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Int16(int16(in.Pitch))
	}
	{
		const prefix string = ",\"Heading\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Heading))
	}
	{
		const prefix string = ",\"HeadingSp\":"
		out.RawString(prefix)
		out.Int16(int16(in.HeadingSp))
	}
	{
		const prefix string = ",\"AltitudeAmsl\":"
		out.RawString(prefix)
		out.Int16(int16(in.AltitudeAmsl))
	}
	{
		const prefix string = ",\"AltitudeSp\":"
		out.RawString(prefix)
		out.Int16(int16(in.AltitudeSp))
	}
	{
		const prefix string = ",\"WpDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.WpDistance))
	}
	{
		const prefix string = ",\"BaseMode\":"
		out.RawString(prefix)
		out.Int(int(in.BaseMode))
	}
	{
		const prefix string = ",\"LandedState\":"
		out.RawString(prefix)
		out.Int(int(in.LandedState))
	}
	{
		const prefix string = ",\"Throttle\":"
		out.RawString(prefix)
		out.Int8(int8(in.Throttle))
	}
	{
		const prefix string = ",\"Airspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Airspeed))
	}
	{
		const prefix string = ",\"AirspeedSp\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.AirspeedSp))
	}
	{
		const prefix string = ",\"Groundspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Groundspeed))
	}
	{
		const prefix string = ",\"ClimbRate\":"
		out.RawString(prefix)
		out.Int8(int8(in.ClimbRate))
	}
	{
		const prefix string = ",\"GpsNsat\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GpsNsat))
	}
	{
		const prefix string = ",\"GpsFixType\":"
		out.RawString(prefix)
		out.Int(int(in.GpsFixType))
	}
	{
		const prefix string = ",\"BatteryRemaining\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.BatteryRemaining))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int8(int8(in.Temperature))
	}
	{
		const prefix string = ",\"TemperatureAir\":"
		out.RawString(prefix)
		out.Int8(int8(in.TemperatureAir))
	}
	{
		const prefix string = ",\"Failsafe\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Failsafe))
	}
	{
		const prefix string = ",\"WpNum\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.WpNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighLatency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi103(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighLatency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi103(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighLatency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi103(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighLatency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi103(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi104(in *jlexer.Lexer, out *Heartbeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "Type":
			out.Type = MAV_TYPE(in.Int())
		case "Autopilot":
			out.Autopilot = MAV_AUTOPILOT(in.Int())
		case "BaseMode":
			out.BaseMode = MAV_MODE_FLAG(in.Int())
		case "SystemStatus":
			out.SystemStatus = MAV_STATE(in.Int())
		case "MavlinkVersion":
			out.MavlinkVersion = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi104(out *jwriter.Writer, in Heartbeat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CustomMode\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"Autopilot\":"
		out.RawString(prefix)
		out.Int(int(in.Autopilot))
	}
	{
		const prefix string = ",\"BaseMode\":"
		out.RawString(prefix)
		out.Int(int(in.BaseMode))
	}
	{
		const prefix string = ",\"SystemStatus\":"
		out.RawString(prefix)
		out.Int(int(in.SystemStatus))
	}
	{
		const prefix string = ",\"MavlinkVersion\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.MavlinkVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Heartbeat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi104(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Heartbeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi104(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Heartbeat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi104(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Heartbeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi104(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi105(in *jlexer.Lexer, out *GpsStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		case "SatellitePrn":
			if in.IsNull() {
				in.Skip()
				out.SatellitePrn = nil
			} else {
				out.SatellitePrn = in.Bytes()
			}
		case "SatelliteUsed":
			if in.IsNull() {
				in.Skip()
				out.SatelliteUsed = nil
			} else {
				out.SatelliteUsed = in.Bytes()
			}
		case "SatelliteElevation":
			if in.IsNull() {
				in.Skip()
				out.SatelliteElevation = nil
			} else {
				out.SatelliteElevation = in.Bytes()
			}
		case "SatelliteAzimuth":
			if in.IsNull() {
				in.Skip()
				out.SatelliteAzimuth = nil
			} else {
				out.SatelliteAzimuth = in.Bytes()
			}
		case "SatelliteSnr":
			if in.IsNull() {
				in.Skip()
				out.SatelliteSnr = nil
			} else {
				out.SatelliteSnr = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi105(out *jwriter.Writer, in GpsStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.SatellitesVisible))
	}
	{
		const prefix string = ",\"SatellitePrn\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatellitePrn)
	}
	{
		const prefix string = ",\"SatelliteUsed\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatelliteUsed)
	}
	{
		const prefix string = ",\"SatelliteElevation\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatelliteElevation)
	}
	{
		const prefix string = ",\"SatelliteAzimuth\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatelliteAzimuth)
	}
	{
		const prefix string = ",\"SatelliteSnr\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatelliteSnr)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi105(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi105(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi105(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi105(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi106(in *jlexer.Lexer, out *GpsRtk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeLastBaselineMs":
			out.TimeLastBaselineMs = uint32(in.Uint32())
		case "Tow":
			out.Tow = uint32(in.Uint32())
		case "BaselineAMm":
			out.BaselineAMm = int32(in.Int32())
		case "BaselineBMm":
			out.BaselineBMm = int32(in.Int32())
		case "BaselineCMm":
			out.BaselineCMm = int32(in.Int32())
		case "Accuracy":
			out.Accuracy = uint32(in.Uint32())
		case "IarNumHypotheses":
			out.IarNumHypotheses = int32(in.Int32())
		case "Wn":
			out.Wn = uint16(in.Uint16())
		case "RtkReceiverID":
			out.RtkReceiverID = uint8(in.Uint8())
		case "RtkHealth":
			out.RtkHealth = uint8(in.Uint8())
		case "RtkRate":
			out.RtkRate = uint8(in.Uint8())
		case "Nsats":
			out.Nsats = uint8(in.Uint8())
		case "BaselineCoordsType":
			out.BaselineCoordsType = RTK_BASELINE_COORDINATE_SYSTEM(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi106(out *jwriter.Writer, in GpsRtk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeLastBaselineMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeLastBaselineMs))
	}
	{
		const prefix string = ",\"Tow\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Tow))
	}
	{
		const prefix string = ",\"BaselineAMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineAMm))
	}
	{
		const prefix string = ",\"BaselineBMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineBMm))
	}
	{
		const prefix string = ",\"BaselineCMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineCMm))
	}
	{
		const prefix string = ",\"Accuracy\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Accuracy))
	}
	{
		const prefix string = ",\"IarNumHypotheses\":"
		out.RawString(prefix)
		out.Int32(int32(in.IarNumHypotheses))
	}
	{
		const prefix string = ",\"Wn\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Wn))
	}
	{
		const prefix string = ",\"RtkReceiverID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkReceiverID))
	}
	{
		const prefix string = ",\"RtkHealth\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkHealth))
	}
	{
		const prefix string = ",\"RtkRate\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkRate))
	}
	{
		const prefix string = ",\"Nsats\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Nsats))
	}
	{
		const prefix string = ",\"BaselineCoordsType\":"
		out.RawString(prefix)
		out.Int(int(in.BaselineCoordsType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRtk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi106(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRtk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi106(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRtk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi106(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRtk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi106(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi107(in *jlexer.Lexer, out *GpsRtcmData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Flags":
			out.Flags = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi107(out *jwriter.Writer, in GpsRtcmData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.Flags))
	}
	{
		const prefix string = ",\"Len\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Len))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRtcmData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi107(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRtcmData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi107(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRtcmData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi107(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRtcmData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi107(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi108(in *jlexer.Lexer, out *GpsRawInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = GPS_FIX_TYPE(in.Int())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi108(out *jwriter.Writer, in GpsRawInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"Eph\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Eph))
	}
	{
		const prefix string = ",\"Epv\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Epv))
	}
	{
		const prefix string = ",\"Vel\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Vel))
	}
	{
		const prefix string = ",\"Cog\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Cog))
	}
	{
		const prefix string = ",\"FixType\":"
		out.RawString(prefix)
		out.Int(int(in.FixType))
	}
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRawInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi108(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRawInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi108(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRawInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi108(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRawInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi108(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi109(in *jlexer.Lexer, out *GpsInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "TimeWeekMs":
			out.TimeWeekMs = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Hdop":
			out.Hdop = float32(in.Float32())
		case "Vdop":
			out.Vdop = float32(in.Float32())
		case "Vn":
			out.Vn = float32(in.Float32())
		case "Ve":
			out.Ve = float32(in.Float32())
		case "Vd":
			out.Vd = float32(in.Float32())
		case "SpeedAccuracy":
			out.SpeedAccuracy = float32(in.Float32())
		case "HorizAccuracy":
			out.HorizAccuracy = float32(in.Float32())
		case "VertAccuracy":
			out.VertAccuracy = float32(in.Float32())
		case "IgnoreFlags":
			out.IgnoreFlags = GPS_INPUT_IGNORE_FLAGS(in.Int())
		case "TimeWeek":
			out.TimeWeek = uint16(in.Uint16())
		case "GpsID":
			out.GpsID = uint8(in.Uint8())
		case "FixType":
			out.FixType = uint8(in.Uint8())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi109(out *jwriter.Writer, in GpsInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"TimeWeekMs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeWeekMs))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Hdop\":"
		out.RawString(prefix)
		out.Float32(float32(in.Hdop))
	}
	{
		const prefix string = ",\"Vdop\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vdop))
	}
	{
		const prefix string = ",\"Vn\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vn))
	}
	{
		const prefix string = ",\"Ve\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ve))
	}
	{
		const prefix string = ",\"Vd\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vd))
	}
	{
		const prefix string = ",\"SpeedAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.SpeedAccuracy))
	}
	{
		const prefix string = ",\"HorizAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.HorizAccuracy))
	}
	{
		const prefix string = ",\"VertAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.VertAccuracy))
	}
	{
		const prefix string = ",\"IgnoreFlags\":"
		out.RawString(prefix)
		out.Int(int(in.IgnoreFlags))
	}
	{
		const prefix string = ",\"TimeWeek\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TimeWeek))
	}
	{
		const prefix string = ",\"GpsID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GpsID))
	}
	{
		const prefix string = ",\"FixType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.FixType))
	}
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi109(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi109(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi109(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi109(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi110(in *jlexer.Lexer, out *GpsInjectData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi110(out *jwriter.Writer, in GpsInjectData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Len\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Len))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsInjectData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsInjectData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsInjectData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsInjectData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi110(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi111(in *jlexer.Lexer, out *GpsGlobalOrigin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi111(out *jwriter.Writer, in GpsGlobalOrigin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsGlobalOrigin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsGlobalOrigin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsGlobalOrigin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsGlobalOrigin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi111(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi112(in *jlexer.Lexer, out *Gps2Rtk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeLastBaselineMs":
			out.TimeLastBaselineMs = uint32(in.Uint32())
		case "Tow":
			out.Tow = uint32(in.Uint32())
		case "BaselineAMm":
			out.BaselineAMm = int32(in.Int32())
		case "BaselineBMm":
			out.BaselineBMm = int32(in.Int32())
		case "BaselineCMm":
			out.BaselineCMm = int32(in.Int32())
		case "Accuracy":
			out.Accuracy = uint32(in.Uint32())
		case "IarNumHypotheses":
			out.IarNumHypotheses = int32(in.Int32())
		case "Wn":
			out.Wn = uint16(in.Uint16())
		case "RtkReceiverID":
			out.RtkReceiverID = uint8(in.Uint8())
		case "RtkHealth":
			out.RtkHealth = uint8(in.Uint8())
		case "RtkRate":
			out.RtkRate = uint8(in.Uint8())
		case "Nsats":
			out.Nsats = uint8(in.Uint8())
		case "BaselineCoordsType":
			out.BaselineCoordsType = RTK_BASELINE_COORDINATE_SYSTEM(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi112(out *jwriter.Writer, in Gps2Rtk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeLastBaselineMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeLastBaselineMs))
	}
	{
		const prefix string = ",\"Tow\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Tow))
	}
	{
		const prefix string = ",\"BaselineAMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineAMm))
	}
	{
		const prefix string = ",\"BaselineBMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineBMm))
	}
	{
		const prefix string = ",\"BaselineCMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineCMm))
	}
	{
		const prefix string = ",\"Accuracy\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Accuracy))
	}
	{
		const prefix string = ",\"IarNumHypotheses\":"
		out.RawString(prefix)
		out.Int32(int32(in.IarNumHypotheses))
	}
	{
		const prefix string = ",\"Wn\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Wn))
	}
	{
		const prefix string = ",\"RtkReceiverID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkReceiverID))
	}
	{
		const prefix string = ",\"RtkHealth\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkHealth))
	}
	{
		const prefix string = ",\"RtkRate\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkRate))
	}
	{
		const prefix string = ",\"Nsats\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Nsats))
	}
	{
		const prefix string = ",\"BaselineCoordsType\":"
		out.RawString(prefix)
		out.Int(int(in.BaselineCoordsType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gps2Rtk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi112(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gps2Rtk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi112(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gps2Rtk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi112(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gps2Rtk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi112(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi113(in *jlexer.Lexer, out *Gps2Raw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "DgpsAge":
			out.DgpsAge = uint32(in.Uint32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = GPS_FIX_TYPE(in.Int())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		case "DgpsNumch":
			out.DgpsNumch = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi113(out *jwriter.Writer, in Gps2Raw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"DgpsAge\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.DgpsAge))
	}
	{
		const prefix string = ",\"Eph\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Eph))
	}
	{
		const prefix string = ",\"Epv\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Epv))
	}
	{
		const prefix string = ",\"Vel\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Vel))
	}
	{
		const prefix string = ",\"Cog\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Cog))
	}
	{
		const prefix string = ",\"FixType\":"
		out.RawString(prefix)
		out.Int(int(in.FixType))
	}
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SatellitesVisible))
	}
	{
		const prefix string = ",\"DgpsNumch\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.DgpsNumch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gps2Raw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi113(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gps2Raw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi113(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gps2Raw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi113(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gps2Raw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi113(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi114(in *jlexer.Lexer, out *GlobalVisionPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi114(out *jwriter.Writer, in GlobalVisionPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Usec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalVisionPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi114(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalVisionPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi114(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalVisionPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi114(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalVisionPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi114(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi115(in *jlexer.Lexer, out *GlobalPositionIntCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "RelativeAlt":
			out.RelativeAlt = int32(in.Int32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v64 float32
					v64 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstimatorType":
			out.EstimatorType = MAV_ESTIMATOR_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi115(out *jwriter.Writer, in GlobalPositionIntCov) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"RelativeAlt\":"
		out.RawString(prefix)
		out.Int32(int32(in.RelativeAlt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Covariance\":"
		out.RawString(prefix)
		if in.Covariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Covariance {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v66))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EstimatorType\":"
		out.RawString(prefix)
		out.Int(int(in.EstimatorType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPositionIntCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi115(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPositionIntCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi115(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPositionIntCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi115(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPositionIntCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi115(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi116(in *jlexer.Lexer, out *GlobalPositionInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "RelativeAlt":
			out.RelativeAlt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "Hdg":
			out.Hdg = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi116(out *jwriter.Writer, in GlobalPositionInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"RelativeAlt\":"
		out.RawString(prefix)
		out.Int32(int32(in.RelativeAlt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vz))
	}
	{
		const prefix string = ",\"Hdg\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Hdg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPositionInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi116(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPositionInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi116(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPositionInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi116(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPositionInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi116(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi117(in *jlexer.Lexer, out *FollowTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "CustomState":
			out.CustomState = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vel":
			if in.IsNull() {
				in.Skip()
				out.Vel = nil
			} else {
				in.Delim('[')
				if out.Vel == nil {
					if !in.IsDelim(']') {
						out.Vel = make([]float32, 0, 16)
					} else {
						out.Vel = []float32{}
					}
				} else {
					out.Vel = (out.Vel)[:0]
				}
				for !in.IsDelim(']') {
					var v67 float32
					v67 = float32(in.Float32())
					out.Vel = append(out.Vel, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Acc":
			if in.IsNull() {
				in.Skip()
				out.Acc = nil
			} else {
				in.Delim('[')
				if out.Acc == nil {
					if !in.IsDelim(']') {
						out.Acc = make([]float32, 0, 16)
					} else {
						out.Acc = []float32{}
					}
				} else {
					out.Acc = (out.Acc)[:0]
				}
				for !in.IsDelim(']') {
					var v68 float32
					v68 = float32(in.Float32())
					out.Acc = append(out.Acc, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AttitudeQ":
			if in.IsNull() {
				in.Skip()
				out.AttitudeQ = nil
			} else {
				in.Delim('[')
				if out.AttitudeQ == nil {
					if !in.IsDelim(']') {
						out.AttitudeQ = make([]float32, 0, 16)
					} else {
						out.AttitudeQ = []float32{}
					}
				} else {
					out.AttitudeQ = (out.AttitudeQ)[:0]
				}
				for !in.IsDelim(']') {
					var v69 float32
					v69 = float32(in.Float32())
					out.AttitudeQ = append(out.AttitudeQ, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rates":
			if in.IsNull() {
				in.Skip()
				out.Rates = nil
			} else {
				in.Delim('[')
				if out.Rates == nil {
					if !in.IsDelim(']') {
						out.Rates = make([]float32, 0, 16)
					} else {
						out.Rates = []float32{}
					}
				} else {
					out.Rates = (out.Rates)[:0]
				}
				for !in.IsDelim(']') {
					var v70 float32
					v70 = float32(in.Float32())
					out.Rates = append(out.Rates, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PositionCov":
			if in.IsNull() {
				in.Skip()
				out.PositionCov = nil
			} else {
				in.Delim('[')
				if out.PositionCov == nil {
					if !in.IsDelim(']') {
						out.PositionCov = make([]float32, 0, 16)
					} else {
						out.PositionCov = []float32{}
					}
				} else {
					out.PositionCov = (out.PositionCov)[:0]
				}
				for !in.IsDelim(']') {
					var v71 float32
					v71 = float32(in.Float32())
					out.PositionCov = append(out.PositionCov, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstCapabilities":
			out.EstCapabilities = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi117(out *jwriter.Writer, in FollowTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"CustomState\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CustomState))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Vel\":"
		out.RawString(prefix)
		if in.Vel == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v72, v73 := range in.Vel {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v73))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Acc\":"
		out.RawString(prefix)
		if in.Acc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.Acc {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v75))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AttitudeQ\":"
		out.RawString(prefix)
		if in.AttitudeQ == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v76, v77 := range in.AttitudeQ {
				if v76 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v77))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Rates\":"
		out.RawString(prefix)
		if in.Rates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.Rates {
				if v78 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v79))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PositionCov\":"
		out.RawString(prefix)
		if in.PositionCov == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.PositionCov {
				if v80 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v81))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EstCapabilities\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.EstCapabilities))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FollowTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi117(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FollowTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi117(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FollowTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi117(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FollowTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi117(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi118(in *jlexer.Lexer, out *FileTransferProtocol) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetNetwork":
			out.TargetNetwork = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi118(out *jwriter.Writer, in FileTransferProtocol) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetNetwork\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetNetwork))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileTransferProtocol) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi118(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileTransferProtocol) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi118(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileTransferProtocol) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi118(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileTransferProtocol) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi118(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi119(in *jlexer.Lexer, out *FenceStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BreachTime":
			out.BreachTime = uint32(in.Uint32())
		case "BreachCount":
			out.BreachCount = uint16(in.Uint16())
		case "BreachStatus":
			out.BreachStatus = uint8(in.Uint8())
		case "BreachType":
			out.BreachType = FENCE_BREACH(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi119(out *jwriter.Writer, in FenceStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BreachTime\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.BreachTime))
	}
	{
		const prefix string = ",\"BreachCount\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.BreachCount))
	}
	{
		const prefix string = ",\"BreachStatus\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.BreachStatus))
	}
	{
		const prefix string = ",\"BreachType\":"
		out.RawString(prefix)
		out.Int(int(in.BreachType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FenceStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi119(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FenceStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi119(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FenceStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi119(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FenceStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi119(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi120(in *jlexer.Lexer, out *ExtendedSysState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VtolState":
			out.VtolState = MAV_VTOL_STATE(in.Int())
		case "LandedState":
			out.LandedState = MAV_LANDED_STATE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi120(out *jwriter.Writer, in ExtendedSysState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VtolState\":"
		out.RawString(prefix[1:])
		out.Int(int(in.VtolState))
	}
	{
		const prefix string = ",\"LandedState\":"
		out.RawString(prefix)
		out.Int(int(in.LandedState))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtendedSysState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi120(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtendedSysState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi120(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtendedSysState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi120(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtendedSysState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi120(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi121(in *jlexer.Lexer, out *EstimatorStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "VelRatio":
			out.VelRatio = float32(in.Float32())
		case "PosHorizRatio":
			out.PosHorizRatio = float32(in.Float32())
		case "PosVertRatio":
			out.PosVertRatio = float32(in.Float32())
		case "MagRatio":
			out.MagRatio = float32(in.Float32())
		case "HaglRatio":
			out.HaglRatio = float32(in.Float32())
		case "TasRatio":
			out.TasRatio = float32(in.Float32())
		case "PosHorizAccuracy":
			out.PosHorizAccuracy = float32(in.Float32())
		case "PosVertAccuracy":
			out.PosVertAccuracy = float32(in.Float32())
		case "Flags":
			out.Flags = ESTIMATOR_STATUS_FLAGS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi121(out *jwriter.Writer, in EstimatorStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"VelRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.VelRatio))
	}
	{
		const prefix string = ",\"PosHorizRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.PosHorizRatio))
	}
	{
		const prefix string = ",\"PosVertRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.PosVertRatio))
	}
	{
		const prefix string = ",\"MagRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.MagRatio))
	}
	{
		const prefix string = ",\"HaglRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.HaglRatio))
	}
	{
		const prefix string = ",\"TasRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.TasRatio))
	}
	{
		const prefix string = ",\"PosHorizAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.PosHorizAccuracy))
	}
	{
		const prefix string = ",\"PosVertAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.PosVertAccuracy))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EstimatorStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi121(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EstimatorStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi121(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EstimatorStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi121(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EstimatorStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi121(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi122(in *jlexer.Lexer, out *EncapsulatedData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seqnr":
			out.Seqnr = uint16(in.Uint16())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi122(out *jwriter.Writer, in EncapsulatedData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seqnr\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seqnr))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EncapsulatedData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi122(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EncapsulatedData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi122(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EncapsulatedData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi122(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EncapsulatedData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi122(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi123(in *jlexer.Lexer, out *EfiStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "EcuIndex":
			out.EcuIndex = float32(in.Float32())
		case "Rpm":
			out.Rpm = float32(in.Float32())
		case "FuelConsumed":
			out.FuelConsumed = float32(in.Float32())
		case "FuelFlow":
			out.FuelFlow = float32(in.Float32())
		case "EngineLoad":
			out.EngineLoad = float32(in.Float32())
		case "ThrottlePosition":
			out.ThrottlePosition = float32(in.Float32())
		case "SparkDwellTime":
			out.SparkDwellTime = float32(in.Float32())
		case "BarometricPressure":
			out.BarometricPressure = float32(in.Float32())
		case "IntakeManifoldPressure":
			out.IntakeManifoldPressure = float32(in.Float32())
		case "IntakeManifoldTemperature":
			out.IntakeManifoldTemperature = float32(in.Float32())
		case "CylinderHeadTemperature":
			out.CylinderHeadTemperature = float32(in.Float32())
		case "IgnitionTiming":
			out.IgnitionTiming = float32(in.Float32())
		case "InjectionTime":
			out.InjectionTime = float32(in.Float32())
		case "ExhaustGasTemperature":
			out.ExhaustGasTemperature = float32(in.Float32())
		case "ThrottleOut":
			out.ThrottleOut = float32(in.Float32())
		case "PtCompensation":
			out.PtCompensation = float32(in.Float32())
		case "Health":
			out.Health = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi123(out *jwriter.Writer, in EfiStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"EcuIndex\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.EcuIndex))
	}
	{
		const prefix string = ",\"Rpm\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rpm))
	}
	{
		const prefix string = ",\"FuelConsumed\":"
		out.RawString(prefix)
		out.Float32(float32(in.FuelConsumed))
	}
	{
		const prefix string = ",\"FuelFlow\":"
		out.RawString(prefix)
		out.Float32(float32(in.FuelFlow))
	}
	{
		const prefix string = ",\"EngineLoad\":"
		out.RawString(prefix)
		out.Float32(float32(in.EngineLoad))
	}
	{
		const prefix string = ",\"ThrottlePosition\":"
		out.RawString(prefix)
		out.Float32(float32(in.ThrottlePosition))
	}
	{
		const prefix string = ",\"SparkDwellTime\":"
		out.RawString(prefix)
		out.Float32(float32(in.SparkDwellTime))
	}
	{
		const prefix string = ",\"BarometricPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.BarometricPressure))
	}
	{
		const prefix string = ",\"IntakeManifoldPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntakeManifoldPressure))
	}
	{
		const prefix string = ",\"IntakeManifoldTemperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntakeManifoldTemperature))
	}
	{
		const prefix string = ",\"CylinderHeadTemperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.CylinderHeadTemperature))
	}
	{
		const prefix string = ",\"IgnitionTiming\":"
		out.RawString(prefix)
		out.Float32(float32(in.IgnitionTiming))
	}
	{
		const prefix string = ",\"InjectionTime\":"
		out.RawString(prefix)
		out.Float32(float32(in.InjectionTime))
	}
	{
		const prefix string = ",\"ExhaustGasTemperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.ExhaustGasTemperature))
	}
	{
		const prefix string = ",\"ThrottleOut\":"
		out.RawString(prefix)
		out.Float32(float32(in.ThrottleOut))
	}
	{
		const prefix string = ",\"PtCompensation\":"
		out.RawString(prefix)
		out.Float32(float32(in.PtCompensation))
	}
	{
		const prefix string = ",\"Health\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Health))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EfiStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi123(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EfiStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi123(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EfiStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi123(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EfiStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi123(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi124(in *jlexer.Lexer, out *DistanceSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "MinDistance":
			out.MinDistance = uint16(in.Uint16())
		case "MaxDistance":
			out.MaxDistance = uint16(in.Uint16())
		case "CurrentDistance":
			out.CurrentDistance = uint16(in.Uint16())
		case "Type":
			out.Type = MAV_DISTANCE_SENSOR(in.Int())
		case "ID":
			out.ID = uint8(in.Uint8())
		case "Orientation":
			out.Orientation = MAV_SENSOR_ORIENTATION(in.Int())
		case "Covariance":
			out.Covariance = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi124(out *jwriter.Writer, in DistanceSensor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"MinDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MinDistance))
	}
	{
		const prefix string = ",\"MaxDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MaxDistance))
	}
	{
		const prefix string = ",\"CurrentDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.CurrentDistance))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ID))
	}
	{
		const prefix string = ",\"Orientation\":"
		out.RawString(prefix)
		out.Int(int(in.Orientation))
	}
	{
		const prefix string = ",\"Covariance\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Covariance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DistanceSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi124(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DistanceSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi124(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DistanceSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi124(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DistanceSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi124(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi125(in *jlexer.Lexer, out *DebugVect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi125(out *jwriter.Writer, in DebugVect) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DebugVect) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi125(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DebugVect) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi125(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DebugVect) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi125(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DebugVect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi125(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi126(in *jlexer.Lexer, out *Debug) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = float32(in.Float32())
		case "Ind":
			out.Ind = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi126(out *jwriter.Writer, in Debug) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Float32(float32(in.Value))
	}
	{
		const prefix string = ",\"Ind\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Ind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Debug) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi126(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Debug) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi126(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Debug) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi126(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Debug) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi126(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi127(in *jlexer.Lexer, out *DataTransmissionHandshake) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Size":
			out.Size = uint32(in.Uint32())
		case "Width":
			out.Width = uint16(in.Uint16())
		case "Height":
			out.Height = uint16(in.Uint16())
		case "Packets":
			out.Packets = uint16(in.Uint16())
		case "Type":
			out.Type = MAVLINK_DATA_STREAM_TYPE(in.Int())
		case "Payload":
			out.Payload = uint8(in.Uint8())
		case "JpgQuality":
			out.JpgQuality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi127(out *jwriter.Writer, in DataTransmissionHandshake) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Size))
	}
	{
		const prefix string = ",\"Width\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Width))
	}
	{
		const prefix string = ",\"Height\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Height))
	}
	{
		const prefix string = ",\"Packets\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Packets))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Payload))
	}
	{
		const prefix string = ",\"JpgQuality\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.JpgQuality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataTransmissionHandshake) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi127(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataTransmissionHandshake) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi127(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataTransmissionHandshake) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi127(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataTransmissionHandshake) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi127(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi128(in *jlexer.Lexer, out *DataStream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MessageRate":
			out.MessageRate = uint16(in.Uint16())
		case "StreamID":
			out.StreamID = uint8(in.Uint8())
		case "OnOff":
			out.OnOff = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi128(out *jwriter.Writer, in DataStream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MessageRate\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.MessageRate))
	}
	{
		const prefix string = ",\"StreamID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.StreamID))
	}
	{
		const prefix string = ",\"OnOff\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.OnOff))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataStream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi128(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataStream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi128(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataStream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi128(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataStream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi128(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi129(in *jlexer.Lexer, out *ControlSystemState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "XAcc":
			out.XAcc = float32(in.Float32())
		case "YAcc":
			out.YAcc = float32(in.Float32())
		case "ZAcc":
			out.ZAcc = float32(in.Float32())
		case "XVel":
			out.XVel = float32(in.Float32())
		case "YVel":
			out.YVel = float32(in.Float32())
		case "ZVel":
			out.ZVel = float32(in.Float32())
		case "XPos":
			out.XPos = float32(in.Float32())
		case "YPos":
			out.YPos = float32(in.Float32())
		case "ZPos":
			out.ZPos = float32(in.Float32())
		case "Airspeed":
			out.Airspeed = float32(in.Float32())
		case "VelVariance":
			if in.IsNull() {
				in.Skip()
				out.VelVariance = nil
			} else {
				in.Delim('[')
				if out.VelVariance == nil {
					if !in.IsDelim(']') {
						out.VelVariance = make([]float32, 0, 16)
					} else {
						out.VelVariance = []float32{}
					}
				} else {
					out.VelVariance = (out.VelVariance)[:0]
				}
				for !in.IsDelim(']') {
					var v88 float32
					v88 = float32(in.Float32())
					out.VelVariance = append(out.VelVariance, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PosVariance":
			if in.IsNull() {
				in.Skip()
				out.PosVariance = nil
			} else {
				in.Delim('[')
				if out.PosVariance == nil {
					if !in.IsDelim(']') {
						out.PosVariance = make([]float32, 0, 16)
					} else {
						out.PosVariance = []float32{}
					}
				} else {
					out.PosVariance = (out.PosVariance)[:0]
				}
				for !in.IsDelim(']') {
					var v89 float32
					v89 = float32(in.Float32())
					out.PosVariance = append(out.PosVariance, v89)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v90 float32
					v90 = float32(in.Float32())
					out.Q = append(out.Q, v90)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RollRate":
			out.RollRate = float32(in.Float32())
		case "PitchRate":
			out.PitchRate = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi129(out *jwriter.Writer, in ControlSystemState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"XAcc\":"
		out.RawString(prefix)
		out.Float32(float32(in.XAcc))
	}
	{
		const prefix string = ",\"YAcc\":"
		out.RawString(prefix)
		out.Float32(float32(in.YAcc))
	}
	{
		const prefix string = ",\"ZAcc\":"
		out.RawString(prefix)
		out.Float32(float32(in.ZAcc))
	}
	{
		const prefix string = ",\"XVel\":"
		out.RawString(prefix)
		out.Float32(float32(in.XVel))
	}
	{
		const prefix string = ",\"YVel\":"
		out.RawString(prefix)
		out.Float32(float32(in.YVel))
	}
	{
		const prefix string = ",\"ZVel\":"
		out.RawString(prefix)
		out.Float32(float32(in.ZVel))
	}
	{
		const prefix string = ",\"XPos\":"
		out.RawString(prefix)
		out.Float32(float32(in.XPos))
	}
	{
		const prefix string = ",\"YPos\":"
		out.RawString(prefix)
		out.Float32(float32(in.YPos))
	}
	{
		const prefix string = ",\"ZPos\":"
		out.RawString(prefix)
		out.Float32(float32(in.ZPos))
	}
	{
		const prefix string = ",\"Airspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Airspeed))
	}
	{
		const prefix string = ",\"VelVariance\":"
		out.RawString(prefix)
		if in.VelVariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v91, v92 := range in.VelVariance {
				if v91 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v92))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PosVariance\":"
		out.RawString(prefix)
		if in.PosVariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v93, v94 := range in.PosVariance {
				if v93 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v94))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.Q {
				if v95 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v96))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RollRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.RollRate))
	}
	{
		const prefix string = ",\"PitchRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.PitchRate))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ControlSystemState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi129(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ControlSystemState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi129(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ControlSystemState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi129(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ControlSystemState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi129(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi130(in *jlexer.Lexer, out *CommandLong) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "Param5":
			out.Param5 = float32(in.Float32())
		case "Param6":
			out.Param6 = float32(in.Float32())
		case "Param7":
			out.Param7 = float32(in.Float32())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Confirmation":
			out.Confirmation = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi130(out *jwriter.Writer, in CommandLong) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Param1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	{
		const prefix string = ",\"Param2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param2))
	}
	{
		const prefix string = ",\"Param3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param3))
	}
	{
		const prefix string = ",\"Param4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param4))
	}
	{
		const prefix string = ",\"Param5\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param5))
	}
	{
		const prefix string = ",\"Param6\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param6))
	}
	{
		const prefix string = ",\"Param7\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param7))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Confirmation\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Confirmation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandLong) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi130(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandLong) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi130(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandLong) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi130(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandLong) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi130(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi131(in *jlexer.Lexer, out *CommandInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = int32(in.Int32())
		case "Y":
			out.Y = int32(in.Int32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi131(out *jwriter.Writer, in CommandInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Param1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	{
		const prefix string = ",\"Param2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param2))
	}
	{
		const prefix string = ",\"Param3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param3))
	}
	{
		const prefix string = ",\"Param4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param4))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Int32(int32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Int32(int32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	{
		const prefix string = ",\"Current\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Current))
	}
	{
		const prefix string = ",\"Autocontinue\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi131(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi131(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi131(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi131(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi132(in *jlexer.Lexer, out *CommandCancel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi132(out *jwriter.Writer, in CommandCancel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandCancel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi132(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandCancel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi132(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandCancel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi132(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandCancel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi132(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi133(in *jlexer.Lexer, out *CommandAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "Result":
			out.Result = MAV_RESULT(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi133(out *jwriter.Writer, in CommandAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		out.Int(int(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi133(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi133(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi133(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi133(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi134(in *jlexer.Lexer, out *Collision) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint32(in.Uint32())
		case "TimeToMinimumDelta":
			out.TimeToMinimumDelta = float32(in.Float32())
		case "AltitudeMinimumDelta":
			out.AltitudeMinimumDelta = float32(in.Float32())
		case "HorizontalMinimumDelta":
			out.HorizontalMinimumDelta = float32(in.Float32())
		case "Src":
			out.Src = MAV_COLLISION_SRC(in.Int())
		case "Action":
			out.Action = MAV_COLLISION_ACTION(in.Int())
		case "ThreatLevel":
			out.ThreatLevel = MAV_COLLISION_THREAT_LEVEL(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi134(out *jwriter.Writer, in Collision) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"TimeToMinimumDelta\":"
		out.RawString(prefix)
		out.Float32(float32(in.TimeToMinimumDelta))
	}
	{
		const prefix string = ",\"AltitudeMinimumDelta\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeMinimumDelta))
	}
	{
		const prefix string = ",\"HorizontalMinimumDelta\":"
		out.RawString(prefix)
		out.Float32(float32(in.HorizontalMinimumDelta))
	}
	{
		const prefix string = ",\"Src\":"
		out.RawString(prefix)
		out.Int(int(in.Src))
	}
	{
		const prefix string = ",\"Action\":"
		out.RawString(prefix)
		out.Int(int(in.Action))
	}
	{
		const prefix string = ",\"ThreatLevel\":"
		out.RawString(prefix)
		out.Int(int(in.ThreatLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collision) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi134(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collision) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi134(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collision) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi134(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collision) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi134(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi135(in *jlexer.Lexer, out *ChangeOperatorControlAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GcsSystemID":
			out.GcsSystemID = uint8(in.Uint8())
		case "ControlRequest":
			out.ControlRequest = uint8(in.Uint8())
		case "Ack":
			out.Ack = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi135(out *jwriter.Writer, in ChangeOperatorControlAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GcsSystemID\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.GcsSystemID))
	}
	{
		const prefix string = ",\"ControlRequest\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ControlRequest))
	}
	{
		const prefix string = ",\"Ack\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Ack))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeOperatorControlAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi135(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeOperatorControlAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi135(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeOperatorControlAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi135(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeOperatorControlAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi135(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi136(in *jlexer.Lexer, out *ChangeOperatorControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "ControlRequest":
			out.ControlRequest = uint8(in.Uint8())
		case "Version":
			out.Version = uint8(in.Uint8())
		case "Passkey":
			out.Passkey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi136(out *jwriter.Writer, in ChangeOperatorControl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"ControlRequest\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ControlRequest))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Version))
	}
	{
		const prefix string = ",\"Passkey\":"
		out.RawString(prefix)
		out.String(string(in.Passkey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeOperatorControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi136(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeOperatorControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi136(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeOperatorControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi136(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeOperatorControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi136(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi137(in *jlexer.Lexer, out *CameraTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Seq":
			out.Seq = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi137(out *jwriter.Writer, in CameraTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CameraTrigger) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi137(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CameraTrigger) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi137(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CameraTrigger) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi137(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CameraTrigger) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi137(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi138(in *jlexer.Lexer, out *BatteryStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CurrentConsumed":
			out.CurrentConsumed = int32(in.Int32())
		case "EnergyConsumed":
			out.EnergyConsumed = int32(in.Int32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "Voltages":
			if in.IsNull() {
				in.Skip()
				out.Voltages = nil
			} else {
				in.Delim('[')
				if out.Voltages == nil {
					if !in.IsDelim(']') {
						out.Voltages = make([]uint16, 0, 32)
					} else {
						out.Voltages = []uint16{}
					}
				} else {
					out.Voltages = (out.Voltages)[:0]
				}
				for !in.IsDelim(']') {
					var v97 uint16
					v97 = uint16(in.Uint16())
					out.Voltages = append(out.Voltages, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CurrentBattery":
			out.CurrentBattery = int16(in.Int16())
		case "ID":
			out.ID = uint8(in.Uint8())
		case "BatteryFunction":
			out.BatteryFunction = MAV_BATTERY_FUNCTION(in.Int())
		case "Type":
			out.Type = MAV_BATTERY_TYPE(in.Int())
		case "BatteryRemaining":
			out.BatteryRemaining = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi138(out *jwriter.Writer, in BatteryStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CurrentConsumed\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.CurrentConsumed))
	}
	{
		const prefix string = ",\"EnergyConsumed\":"
		out.RawString(prefix)
		out.Int32(int32(in.EnergyConsumed))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	{
		const prefix string = ",\"Voltages\":"
		out.RawString(prefix)
		if in.Voltages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v98, v99 := range in.Voltages {
				if v98 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v99))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CurrentBattery\":"
		out.RawString(prefix)
		out.Int16(int16(in.CurrentBattery))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ID))
	}
	{
		const prefix string = ",\"BatteryFunction\":"
		out.RawString(prefix)
		out.Int(int(in.BatteryFunction))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"BatteryRemaining\":"
		out.RawString(prefix)
		out.Int8(int8(in.BatteryRemaining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatteryStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi138(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatteryStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi138(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatteryStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi138(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatteryStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi138(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi139(in *jlexer.Lexer, out *AutopilotVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Capabilities":
			out.Capabilities = MAV_PROTOCOL_CAPABILITY(in.Int())
		case "UID":
			out.UID = uint64(in.Uint64())
		case "FlightSwVersion":
			out.FlightSwVersion = uint32(in.Uint32())
		case "MiddlewareSwVersion":
			out.MiddlewareSwVersion = uint32(in.Uint32())
		case "OsSwVersion":
			out.OsSwVersion = uint32(in.Uint32())
		case "BoardVersion":
			out.BoardVersion = uint32(in.Uint32())
		case "VendorID":
			out.VendorID = uint16(in.Uint16())
		case "ProductID":
			out.ProductID = uint16(in.Uint16())
		case "FlightCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.FlightCustomVersion = nil
			} else {
				out.FlightCustomVersion = in.Bytes()
			}
		case "MiddlewareCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.MiddlewareCustomVersion = nil
			} else {
				out.MiddlewareCustomVersion = in.Bytes()
			}
		case "OsCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.OsCustomVersion = nil
			} else {
				out.OsCustomVersion = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi139(out *jwriter.Writer, in AutopilotVersion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Capabilities\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Capabilities))
	}
	{
		const prefix string = ",\"UID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UID))
	}
	{
		const prefix string = ",\"FlightSwVersion\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.FlightSwVersion))
	}
	{
		const prefix string = ",\"MiddlewareSwVersion\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MiddlewareSwVersion))
	}
	{
		const prefix string = ",\"OsSwVersion\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.OsSwVersion))
	}
	{
		const prefix string = ",\"BoardVersion\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.BoardVersion))
	}
	{
		const prefix string = ",\"VendorID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.VendorID))
	}
	{
		const prefix string = ",\"ProductID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ProductID))
	}
	{
		const prefix string = ",\"FlightCustomVersion\":"
		out.RawString(prefix)
		out.Base64Bytes(in.FlightCustomVersion)
	}
	{
		const prefix string = ",\"MiddlewareCustomVersion\":"
		out.RawString(prefix)
		out.Base64Bytes(in.MiddlewareCustomVersion)
	}
	{
		const prefix string = ",\"OsCustomVersion\":"
		out.RawString(prefix)
		out.Base64Bytes(in.OsCustomVersion)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutopilotVersion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi139(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutopilotVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi139(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutopilotVersion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi139(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutopilotVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi139(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi140(in *jlexer.Lexer, out *AuthKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi140(out *jwriter.Writer, in AuthKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi140(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi140(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi140(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi140(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi141(in *jlexer.Lexer, out *AttitudeTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v109 float32
					v109 = float32(in.Float32())
					out.Q = append(out.Q, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BodyRollRate":
			out.BodyRollRate = float32(in.Float32())
		case "BodyPitchRate":
			out.BodyPitchRate = float32(in.Float32())
		case "BodyYawRate":
			out.BodyYawRate = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = ATTITUDE_TARGET_TYPEMASK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi141(out *jwriter.Writer, in AttitudeTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.Q {
				if v110 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v111))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BodyRollRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyRollRate))
	}
	{
		const prefix string = ",\"BodyPitchRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyPitchRate))
	}
	{
		const prefix string = ",\"BodyYawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyYawRate))
	}
	{
		const prefix string = ",\"Thrust\":"
		out.RawString(prefix)
		out.Float32(float32(in.Thrust))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi141(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi141(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi141(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi141(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi142(in *jlexer.Lexer, out *AttitudeQuaternionCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v112 float32
					v112 = float32(in.Float32())
					out.Q = append(out.Q, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v113 float32
					v113 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v113)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi142(out *jwriter.Writer, in AttitudeQuaternionCov) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v114, v115 := range in.Q {
				if v114 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v115))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	{
		const prefix string = ",\"Covariance\":"
		out.RawString(prefix)
		if in.Covariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v116, v117 := range in.Covariance {
				if v116 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v117))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeQuaternionCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi142(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeQuaternionCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi142(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeQuaternionCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi142(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeQuaternionCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi142(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi143(in *jlexer.Lexer, out *AttitudeQuaternion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q1":
			out.Q1 = float32(in.Float32())
		case "Q2":
			out.Q2 = float32(in.Float32())
		case "Q3":
			out.Q3 = float32(in.Float32())
		case "Q4":
			out.Q4 = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi143(out *jwriter.Writer, in AttitudeQuaternion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Q1\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q1))
	}
	{
		const prefix string = ",\"Q2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q2))
	}
	{
		const prefix string = ",\"Q3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q3))
	}
	{
		const prefix string = ",\"Q4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q4))
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeQuaternion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi143(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeQuaternion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi143(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeQuaternion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi143(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeQuaternion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi143(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi144(in *jlexer.Lexer, out *Attitude) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi144(out *jwriter.Writer, in Attitude) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attitude) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi144(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attitude) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi144(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attitude) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi144(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attitude) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi144(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi145(in *jlexer.Lexer, out *AttPosMocap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v118 float32
					v118 = float32(in.Float32())
					out.Q = append(out.Q, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi145(out *jwriter.Writer, in AttPosMocap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v119, v120 := range in.Q {
				if v119 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v120))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttPosMocap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi145(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttPosMocap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi145(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttPosMocap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi145(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttPosMocap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi145(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi146(in *jlexer.Lexer, out *Altitude) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AltitudeMonotonic":
			out.AltitudeMonotonic = float32(in.Float32())
		case "AltitudeAmsl":
			out.AltitudeAmsl = float32(in.Float32())
		case "AltitudeLocal":
			out.AltitudeLocal = float32(in.Float32())
		case "AltitudeRelative":
			out.AltitudeRelative = float32(in.Float32())
		case "AltitudeTerrain":
			out.AltitudeTerrain = float32(in.Float32())
		case "BottomClearance":
			out.BottomClearance = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi146(out *jwriter.Writer, in Altitude) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"AltitudeMonotonic\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeMonotonic))
	}
	{
		const prefix string = ",\"AltitudeAmsl\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeAmsl))
	}
	{
		const prefix string = ",\"AltitudeLocal\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeLocal))
	}
	{
		const prefix string = ",\"AltitudeRelative\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeRelative))
	}
	{
		const prefix string = ",\"AltitudeTerrain\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeTerrain))
	}
	{
		const prefix string = ",\"BottomClearance\":"
		out.RawString(prefix)
		out.Float32(float32(in.BottomClearance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Altitude) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi146(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Altitude) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi146(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Altitude) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi146(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Altitude) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi146(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi147(in *jlexer.Lexer, out *AdsbVehicle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IcaoAddress":
			out.IcaoAddress = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "Heading":
			out.Heading = uint16(in.Uint16())
		case "HorVelocity":
			out.HorVelocity = uint16(in.Uint16())
		case "VerVelocity":
			out.VerVelocity = int16(in.Int16())
		case "Flags":
			out.Flags = ADSB_FLAGS(in.Int())
		case "Squawk":
			out.Squawk = uint16(in.Uint16())
		case "AltitudeType":
			out.AltitudeType = ADSB_ALTITUDE_TYPE(in.Int())
		case "Callsign":
			out.Callsign = string(in.String())
		case "EmitterType":
			out.EmitterType = ADSB_EMITTER_TYPE(in.Int())
		case "Tslc":
			out.Tslc = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi147(out *jwriter.Writer, in AdsbVehicle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IcaoAddress\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.IcaoAddress))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	{
		const prefix string = ",\"Heading\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Heading))
	}
	{
		const prefix string = ",\"HorVelocity\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.HorVelocity))
	}
	{
		const prefix string = ",\"VerVelocity\":"
		out.RawString(prefix)
		out.Int16(int16(in.VerVelocity))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	{
		const prefix string = ",\"Squawk\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Squawk))
	}
	{
		const prefix string = ",\"AltitudeType\":"
		out.RawString(prefix)
		out.Int(int(in.AltitudeType))
	}
	{
		const prefix string = ",\"Callsign\":"
		out.RawString(prefix)
		out.String(string(in.Callsign))
	}
	{
		const prefix string = ",\"EmitterType\":"
		out.RawString(prefix)
		out.Int(int(in.EmitterType))
	}
	{
		const prefix string = ",\"Tslc\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Tslc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdsbVehicle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi147(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdsbVehicle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi147(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdsbVehicle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi147(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdsbVehicle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi147(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi148(in *jlexer.Lexer, out *ActuatorControlTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v121 float32
					v121 = float32(in.Float32())
					out.Controls = append(out.Controls, v121)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GroupMlx":
			out.GroupMlx = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi148(out *jwriter.Writer, in ActuatorControlTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Controls\":"
		out.RawString(prefix)
		if in.Controls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v122, v123 := range in.Controls {
				if v122 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v123))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GroupMlx\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GroupMlx))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActuatorControlTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi148(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActuatorControlTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi148(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActuatorControlTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi148(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActuatorControlTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsPaparazzi148(l, v)
}
