// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package matrixpilot

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot(in *jlexer.Lexer, out *WindCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "WindX":
			out.WindX = float32(in.Float32())
		case "WindY":
			out.WindY = float32(in.Float32())
		case "WindZ":
			out.WindZ = float32(in.Float32())
		case "VarHoriz":
			out.VarHoriz = float32(in.Float32())
		case "VarVert":
			out.VarVert = float32(in.Float32())
		case "WindAlt":
			out.WindAlt = float32(in.Float32())
		case "HorizAccuracy":
			out.HorizAccuracy = float32(in.Float32())
		case "VertAccuracy":
			out.VertAccuracy = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot(out *jwriter.Writer, in WindCov) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"WindX\":"
		out.RawString(prefix)
		out.Float32(float32(in.WindX))
	}
	{
		const prefix string = ",\"WindY\":"
		out.RawString(prefix)
		out.Float32(float32(in.WindY))
	}
	{
		const prefix string = ",\"WindZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.WindZ))
	}
	{
		const prefix string = ",\"VarHoriz\":"
		out.RawString(prefix)
		out.Float32(float32(in.VarHoriz))
	}
	{
		const prefix string = ",\"VarVert\":"
		out.RawString(prefix)
		out.Float32(float32(in.VarVert))
	}
	{
		const prefix string = ",\"WindAlt\":"
		out.RawString(prefix)
		out.Float32(float32(in.WindAlt))
	}
	{
		const prefix string = ",\"HorizAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.HorizAccuracy))
	}
	{
		const prefix string = ",\"VertAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.VertAccuracy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WindCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WindCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WindCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WindCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot1(in *jlexer.Lexer, out *VisionSpeedEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot1(out *jwriter.Writer, in VisionSpeedEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Usec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisionSpeedEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisionSpeedEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisionSpeedEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisionSpeedEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot1(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot2(in *jlexer.Lexer, out *VisionPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot2(out *jwriter.Writer, in VisionPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Usec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisionPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisionPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisionPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisionPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot2(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot3(in *jlexer.Lexer, out *ViconPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot3(out *jwriter.Writer, in ViconPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Usec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ViconPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ViconPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ViconPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ViconPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot3(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot4(in *jlexer.Lexer, out *Vibration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "VibrationX":
			out.VibrationX = float32(in.Float32())
		case "VibrationY":
			out.VibrationY = float32(in.Float32())
		case "VibrationZ":
			out.VibrationZ = float32(in.Float32())
		case "Clipping0":
			out.Clipping0 = uint32(in.Uint32())
		case "Clipping1":
			out.Clipping1 = uint32(in.Uint32())
		case "Clipping2":
			out.Clipping2 = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot4(out *jwriter.Writer, in Vibration) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"VibrationX\":"
		out.RawString(prefix)
		out.Float32(float32(in.VibrationX))
	}
	{
		const prefix string = ",\"VibrationY\":"
		out.RawString(prefix)
		out.Float32(float32(in.VibrationY))
	}
	{
		const prefix string = ",\"VibrationZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.VibrationZ))
	}
	{
		const prefix string = ",\"Clipping0\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Clipping0))
	}
	{
		const prefix string = ",\"Clipping1\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Clipping1))
	}
	{
		const prefix string = ",\"Clipping2\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Clipping2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vibration) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vibration) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vibration) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vibration) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot4(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot5(in *jlexer.Lexer, out *VfrHud) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Airspeed":
			out.Airspeed = float32(in.Float32())
		case "Groundspeed":
			out.Groundspeed = float32(in.Float32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Climb":
			out.Climb = float32(in.Float32())
		case "Heading":
			out.Heading = int16(in.Int16())
		case "Throttle":
			out.Throttle = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot5(out *jwriter.Writer, in VfrHud) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Airspeed\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Airspeed))
	}
	{
		const prefix string = ",\"Groundspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Groundspeed))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Climb\":"
		out.RawString(prefix)
		out.Float32(float32(in.Climb))
	}
	{
		const prefix string = ",\"Heading\":"
		out.RawString(prefix)
		out.Int16(int16(in.Heading))
	}
	{
		const prefix string = ",\"Throttle\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Throttle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VfrHud) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VfrHud) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VfrHud) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VfrHud) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot5(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot6(in *jlexer.Lexer, out *V2Extension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MessageType":
			out.MessageType = uint16(in.Uint16())
		case "TargetNetwork":
			out.TargetNetwork = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot6(out *jwriter.Writer, in V2Extension) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MessageType\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.MessageType))
	}
	{
		const prefix string = ",\"TargetNetwork\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetNetwork))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v V2Extension) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v V2Extension) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *V2Extension) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *V2Extension) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot6(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot7(in *jlexer.Lexer, out *Timesync) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Tc1":
			out.Tc1 = int64(in.Int64())
		case "Ts1":
			out.Ts1 = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot7(out *jwriter.Writer, in Timesync) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Tc1\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Tc1))
	}
	{
		const prefix string = ",\"Ts1\":"
		out.RawString(prefix)
		out.Int64(int64(in.Ts1))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Timesync) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Timesync) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Timesync) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Timesync) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot7(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot8(in *jlexer.Lexer, out *TerrainRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Mask":
			out.Mask = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "GridSpacing":
			out.GridSpacing = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot8(out *jwriter.Writer, in TerrainRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Mask\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Mask))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"GridSpacing\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.GridSpacing))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot8(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot9(in *jlexer.Lexer, out *TerrainReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "TerrainHeight":
			out.TerrainHeight = float32(in.Float32())
		case "CurrentHeight":
			out.CurrentHeight = float32(in.Float32())
		case "Spacing":
			out.Spacing = uint16(in.Uint16())
		case "Pending":
			out.Pending = uint16(in.Uint16())
		case "Loaded":
			out.Loaded = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot9(out *jwriter.Writer, in TerrainReport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"TerrainHeight\":"
		out.RawString(prefix)
		out.Float32(float32(in.TerrainHeight))
	}
	{
		const prefix string = ",\"CurrentHeight\":"
		out.RawString(prefix)
		out.Float32(float32(in.CurrentHeight))
	}
	{
		const prefix string = ",\"Spacing\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Spacing))
	}
	{
		const prefix string = ",\"Pending\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Pending))
	}
	{
		const prefix string = ",\"Loaded\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Loaded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot9(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot10(in *jlexer.Lexer, out *TerrainData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "GridSpacing":
			out.GridSpacing = uint16(in.Uint16())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int16, 0, 32)
					} else {
						out.Data = []int16{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int16
					v4 = int16(in.Int16())
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Gridbit":
			out.Gridbit = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot10(out *jwriter.Writer, in TerrainData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"GridSpacing\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.GridSpacing))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int16(int16(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Gridbit\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Gridbit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot10(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot11(in *jlexer.Lexer, out *TerrainCheck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot11(out *jwriter.Writer, in TerrainCheck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TerrainCheck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TerrainCheck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TerrainCheck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TerrainCheck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot11(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot12(in *jlexer.Lexer, out *SystemTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUnixUsec":
			out.TimeUnixUsec = uint64(in.Uint64())
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot12(out *jwriter.Writer, in SystemTime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUnixUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUnixUsec))
	}
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeBootMs))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SystemTime) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SystemTime) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SystemTime) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SystemTime) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot12(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot13(in *jlexer.Lexer, out *SysStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OnboardControlSensorsPresent":
			out.OnboardControlSensorsPresent = MAV_SYS_STATUS_SENSOR(in.Int())
		case "OnboardControlSensorsEnabled":
			out.OnboardControlSensorsEnabled = MAV_SYS_STATUS_SENSOR(in.Int())
		case "OnboardControlSensorsHealth":
			out.OnboardControlSensorsHealth = MAV_SYS_STATUS_SENSOR(in.Int())
		case "Load":
			out.Load = uint16(in.Uint16())
		case "VoltageBattery":
			out.VoltageBattery = uint16(in.Uint16())
		case "CurrentBattery":
			out.CurrentBattery = int16(in.Int16())
		case "DropRateComm":
			out.DropRateComm = uint16(in.Uint16())
		case "ErrorsComm":
			out.ErrorsComm = uint16(in.Uint16())
		case "ErrorsCount1":
			out.ErrorsCount1 = uint16(in.Uint16())
		case "ErrorsCount2":
			out.ErrorsCount2 = uint16(in.Uint16())
		case "ErrorsCount3":
			out.ErrorsCount3 = uint16(in.Uint16())
		case "ErrorsCount4":
			out.ErrorsCount4 = uint16(in.Uint16())
		case "BatteryRemaining":
			out.BatteryRemaining = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot13(out *jwriter.Writer, in SysStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OnboardControlSensorsPresent\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OnboardControlSensorsPresent))
	}
	{
		const prefix string = ",\"OnboardControlSensorsEnabled\":"
		out.RawString(prefix)
		out.Int(int(in.OnboardControlSensorsEnabled))
	}
	{
		const prefix string = ",\"OnboardControlSensorsHealth\":"
		out.RawString(prefix)
		out.Int(int(in.OnboardControlSensorsHealth))
	}
	{
		const prefix string = ",\"Load\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Load))
	}
	{
		const prefix string = ",\"VoltageBattery\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.VoltageBattery))
	}
	{
		const prefix string = ",\"CurrentBattery\":"
		out.RawString(prefix)
		out.Int16(int16(in.CurrentBattery))
	}
	{
		const prefix string = ",\"DropRateComm\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DropRateComm))
	}
	{
		const prefix string = ",\"ErrorsComm\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsComm))
	}
	{
		const prefix string = ",\"ErrorsCount1\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsCount1))
	}
	{
		const prefix string = ",\"ErrorsCount2\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsCount2))
	}
	{
		const prefix string = ",\"ErrorsCount3\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsCount3))
	}
	{
		const prefix string = ",\"ErrorsCount4\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ErrorsCount4))
	}
	{
		const prefix string = ",\"BatteryRemaining\":"
		out.RawString(prefix)
		out.Int8(int8(in.BatteryRemaining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SysStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SysStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SysStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SysStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot13(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot14(in *jlexer.Lexer, out *Statustext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Severity":
			out.Severity = MAV_SEVERITY(in.Int())
		case "Text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot14(out *jwriter.Writer, in Statustext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Severity\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Severity))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Statustext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Statustext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Statustext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Statustext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot14(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot15(in *jlexer.Lexer, out *SimState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Q1":
			out.Q1 = float32(in.Float32())
		case "Q2":
			out.Q2 = float32(in.Float32())
		case "Q3":
			out.Q3 = float32(in.Float32())
		case "Q4":
			out.Q4 = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Lat":
			out.Lat = float32(in.Float32())
		case "Lon":
			out.Lon = float32(in.Float32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "StdDevHorz":
			out.StdDevHorz = float32(in.Float32())
		case "StdDevVert":
			out.StdDevVert = float32(in.Float32())
		case "Vn":
			out.Vn = float32(in.Float32())
		case "Ve":
			out.Ve = float32(in.Float32())
		case "Vd":
			out.Vd = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot15(out *jwriter.Writer, in SimState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Q1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Q1))
	}
	{
		const prefix string = ",\"Q2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q2))
	}
	{
		const prefix string = ",\"Q3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q3))
	}
	{
		const prefix string = ",\"Q4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q4))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zgyro))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Float32(float32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Float32(float32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"StdDevHorz\":"
		out.RawString(prefix)
		out.Float32(float32(in.StdDevHorz))
	}
	{
		const prefix string = ",\"StdDevVert\":"
		out.RawString(prefix)
		out.Float32(float32(in.StdDevVert))
	}
	{
		const prefix string = ",\"Vn\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vn))
	}
	{
		const prefix string = ",\"Ve\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ve))
	}
	{
		const prefix string = ",\"Vd\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SimState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SimState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SimState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SimState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot15(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot16(in *jlexer.Lexer, out *SetPositionTargetLocalNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot16(out *jwriter.Writer, in SetPositionTargetLocalNed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Afx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afx))
	}
	{
		const prefix string = ",\"Afy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afy))
	}
	{
		const prefix string = ",\"Afz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afz))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"CoordinateFrame\":"
		out.RawString(prefix)
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPositionTargetLocalNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetPositionTargetLocalNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPositionTargetLocalNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetPositionTargetLocalNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot16(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot17(in *jlexer.Lexer, out *SetPositionTargetGlobalInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "LatInt":
			out.LatInt = int32(in.Int32())
		case "LonInt":
			out.LonInt = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot17(out *jwriter.Writer, in SetPositionTargetGlobalInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"LatInt\":"
		out.RawString(prefix)
		out.Int32(int32(in.LatInt))
	}
	{
		const prefix string = ",\"LonInt\":"
		out.RawString(prefix)
		out.Int32(int32(in.LonInt))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Afx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afx))
	}
	{
		const prefix string = ",\"Afy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afy))
	}
	{
		const prefix string = ",\"Afz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afz))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"CoordinateFrame\":"
		out.RawString(prefix)
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPositionTargetGlobalInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetPositionTargetGlobalInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPositionTargetGlobalInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetPositionTargetGlobalInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot17(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot18(in *jlexer.Lexer, out *SetMode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "BaseMode":
			out.BaseMode = MAV_MODE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot18(out *jwriter.Writer, in SetMode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CustomMode\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"BaseMode\":"
		out.RawString(prefix)
		out.Int(int(in.BaseMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetMode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetMode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetMode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetMode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot18(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot19(in *jlexer.Lexer, out *SetHomePosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v7 float32
					v7 = float32(in.Float32())
					out.Q = append(out.Q, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ApproachX":
			out.ApproachX = float32(in.Float32())
		case "ApproachY":
			out.ApproachY = float32(in.Float32())
		case "ApproachZ":
			out.ApproachZ = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot19(out *jwriter.Writer, in SetHomePosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Q {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ApproachX\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachX))
	}
	{
		const prefix string = ",\"ApproachY\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachY))
	}
	{
		const prefix string = ",\"ApproachZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachZ))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetHomePosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetHomePosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetHomePosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetHomePosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot19(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot20(in *jlexer.Lexer, out *SetGpsGlobalOrigin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot20(out *jwriter.Writer, in SetGpsGlobalOrigin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetGpsGlobalOrigin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetGpsGlobalOrigin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetGpsGlobalOrigin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetGpsGlobalOrigin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot20(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot21(in *jlexer.Lexer, out *SetAttitudeTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v10 float32
					v10 = float32(in.Float32())
					out.Q = append(out.Q, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BodyRollRate":
			out.BodyRollRate = float32(in.Float32())
		case "BodyPitchRate":
			out.BodyPitchRate = float32(in.Float32())
		case "BodyYawRate":
			out.BodyYawRate = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "TypeMask":
			out.TypeMask = ATTITUDE_TARGET_TYPEMASK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot21(out *jwriter.Writer, in SetAttitudeTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Q {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BodyRollRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyRollRate))
	}
	{
		const prefix string = ",\"BodyPitchRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyPitchRate))
	}
	{
		const prefix string = ",\"BodyYawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyYawRate))
	}
	{
		const prefix string = ",\"Thrust\":"
		out.RawString(prefix)
		out.Float32(float32(in.Thrust))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetAttitudeTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetAttitudeTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetAttitudeTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetAttitudeTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot21(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot22(in *jlexer.Lexer, out *SetActuatorControlTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v13 float32
					v13 = float32(in.Float32())
					out.Controls = append(out.Controls, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GroupMlx":
			out.GroupMlx = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot22(out *jwriter.Writer, in SetActuatorControlTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Controls\":"
		out.RawString(prefix)
		if in.Controls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Controls {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GroupMlx\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GroupMlx))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetActuatorControlTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetActuatorControlTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetActuatorControlTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetActuatorControlTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot22(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot23(in *jlexer.Lexer, out *ServoOutputRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint32(in.Uint32())
		case "Servo1Raw":
			out.Servo1Raw = uint16(in.Uint16())
		case "Servo2Raw":
			out.Servo2Raw = uint16(in.Uint16())
		case "Servo3Raw":
			out.Servo3Raw = uint16(in.Uint16())
		case "Servo4Raw":
			out.Servo4Raw = uint16(in.Uint16())
		case "Servo5Raw":
			out.Servo5Raw = uint16(in.Uint16())
		case "Servo6Raw":
			out.Servo6Raw = uint16(in.Uint16())
		case "Servo7Raw":
			out.Servo7Raw = uint16(in.Uint16())
		case "Servo8Raw":
			out.Servo8Raw = uint16(in.Uint16())
		case "Port":
			out.Port = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot23(out *jwriter.Writer, in ServoOutputRaw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeUsec))
	}
	{
		const prefix string = ",\"Servo1Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo1Raw))
	}
	{
		const prefix string = ",\"Servo2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo2Raw))
	}
	{
		const prefix string = ",\"Servo3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo3Raw))
	}
	{
		const prefix string = ",\"Servo4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo4Raw))
	}
	{
		const prefix string = ",\"Servo5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo5Raw))
	}
	{
		const prefix string = ",\"Servo6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo6Raw))
	}
	{
		const prefix string = ",\"Servo7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo7Raw))
	}
	{
		const prefix string = ",\"Servo8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Servo8Raw))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Port))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServoOutputRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServoOutputRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServoOutputRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServoOutputRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot23(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot24(in *jlexer.Lexer, out *SerialUdbExtraF8) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueHeightTargetMax":
			out.SueHeightTargetMax = float32(in.Float32())
		case "SueHeightTargetMin":
			out.SueHeightTargetMin = float32(in.Float32())
		case "SueAltHoldThrottleMin":
			out.SueAltHoldThrottleMin = float32(in.Float32())
		case "SueAltHoldThrottleMax":
			out.SueAltHoldThrottleMax = float32(in.Float32())
		case "SueAltHoldPitchMin":
			out.SueAltHoldPitchMin = float32(in.Float32())
		case "SueAltHoldPitchMax":
			out.SueAltHoldPitchMax = float32(in.Float32())
		case "SueAltHoldPitchHigh":
			out.SueAltHoldPitchHigh = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot24(out *jwriter.Writer, in SerialUdbExtraF8) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueHeightTargetMax\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.SueHeightTargetMax))
	}
	{
		const prefix string = ",\"SueHeightTargetMin\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueHeightTargetMin))
	}
	{
		const prefix string = ",\"SueAltHoldThrottleMin\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueAltHoldThrottleMin))
	}
	{
		const prefix string = ",\"SueAltHoldThrottleMax\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueAltHoldThrottleMax))
	}
	{
		const prefix string = ",\"SueAltHoldPitchMin\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueAltHoldPitchMin))
	}
	{
		const prefix string = ",\"SueAltHoldPitchMax\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueAltHoldPitchMax))
	}
	{
		const prefix string = ",\"SueAltHoldPitchHigh\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueAltHoldPitchHigh))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF8) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF8) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF8) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF8) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot24(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot25(in *jlexer.Lexer, out *SerialUdbExtraF7) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueYawkpRudder":
			out.SueYawkpRudder = float32(in.Float32())
		case "SueYawkdRudder":
			out.SueYawkdRudder = float32(in.Float32())
		case "SueRollkpRudder":
			out.SueRollkpRudder = float32(in.Float32())
		case "SueRollkdRudder":
			out.SueRollkdRudder = float32(in.Float32())
		case "SueRudderBoost":
			out.SueRudderBoost = float32(in.Float32())
		case "SueRtlPitchDown":
			out.SueRtlPitchDown = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot25(out *jwriter.Writer, in SerialUdbExtraF7) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueYawkpRudder\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.SueYawkpRudder))
	}
	{
		const prefix string = ",\"SueYawkdRudder\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueYawkdRudder))
	}
	{
		const prefix string = ",\"SueRollkpRudder\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueRollkpRudder))
	}
	{
		const prefix string = ",\"SueRollkdRudder\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueRollkdRudder))
	}
	{
		const prefix string = ",\"SueRudderBoost\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueRudderBoost))
	}
	{
		const prefix string = ",\"SueRtlPitchDown\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueRtlPitchDown))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF7) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF7) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF7) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF7) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot25(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot26(in *jlexer.Lexer, out *SerialUdbExtraF6) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SuePitchgain":
			out.SuePitchgain = float32(in.Float32())
		case "SuePitchkd":
			out.SuePitchkd = float32(in.Float32())
		case "SueRudderElevMix":
			out.SueRudderElevMix = float32(in.Float32())
		case "SueRollElevMix":
			out.SueRollElevMix = float32(in.Float32())
		case "SueElevatorBoost":
			out.SueElevatorBoost = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot26(out *jwriter.Writer, in SerialUdbExtraF6) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SuePitchgain\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.SuePitchgain))
	}
	{
		const prefix string = ",\"SuePitchkd\":"
		out.RawString(prefix)
		out.Float32(float32(in.SuePitchkd))
	}
	{
		const prefix string = ",\"SueRudderElevMix\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueRudderElevMix))
	}
	{
		const prefix string = ",\"SueRollElevMix\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueRollElevMix))
	}
	{
		const prefix string = ",\"SueElevatorBoost\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueElevatorBoost))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF6) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF6) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF6) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF6) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot26(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot27(in *jlexer.Lexer, out *SerialUdbExtraF5) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueYawkpAileron":
			out.SueYawkpAileron = float32(in.Float32())
		case "SueYawkdAileron":
			out.SueYawkdAileron = float32(in.Float32())
		case "SueRollkp":
			out.SueRollkp = float32(in.Float32())
		case "SueRollkd":
			out.SueRollkd = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot27(out *jwriter.Writer, in SerialUdbExtraF5) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueYawkpAileron\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.SueYawkpAileron))
	}
	{
		const prefix string = ",\"SueYawkdAileron\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueYawkdAileron))
	}
	{
		const prefix string = ",\"SueRollkp\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueRollkp))
	}
	{
		const prefix string = ",\"SueRollkd\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueRollkd))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF5) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF5) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF5) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF5) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot27(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot28(in *jlexer.Lexer, out *SerialUdbExtraF4) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueRollStabilizationAilerons":
			out.SueRollStabilizationAilerons = uint8(in.Uint8())
		case "SueRollStabilizationRudder":
			out.SueRollStabilizationRudder = uint8(in.Uint8())
		case "SuePitchStabilization":
			out.SuePitchStabilization = uint8(in.Uint8())
		case "SueYawStabilizationRudder":
			out.SueYawStabilizationRudder = uint8(in.Uint8())
		case "SueYawStabilizationAileron":
			out.SueYawStabilizationAileron = uint8(in.Uint8())
		case "SueAileronNavigation":
			out.SueAileronNavigation = uint8(in.Uint8())
		case "SueRudderNavigation":
			out.SueRudderNavigation = uint8(in.Uint8())
		case "SueAltitudeholdStabilized":
			out.SueAltitudeholdStabilized = uint8(in.Uint8())
		case "SueAltitudeholdWaypoint":
			out.SueAltitudeholdWaypoint = uint8(in.Uint8())
		case "SueRacingMode":
			out.SueRacingMode = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot28(out *jwriter.Writer, in SerialUdbExtraF4) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueRollStabilizationAilerons\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.SueRollStabilizationAilerons))
	}
	{
		const prefix string = ",\"SueRollStabilizationRudder\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueRollStabilizationRudder))
	}
	{
		const prefix string = ",\"SuePitchStabilization\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SuePitchStabilization))
	}
	{
		const prefix string = ",\"SueYawStabilizationRudder\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueYawStabilizationRudder))
	}
	{
		const prefix string = ",\"SueYawStabilizationAileron\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueYawStabilizationAileron))
	}
	{
		const prefix string = ",\"SueAileronNavigation\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueAileronNavigation))
	}
	{
		const prefix string = ",\"SueRudderNavigation\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueRudderNavigation))
	}
	{
		const prefix string = ",\"SueAltitudeholdStabilized\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueAltitudeholdStabilized))
	}
	{
		const prefix string = ",\"SueAltitudeholdWaypoint\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueAltitudeholdWaypoint))
	}
	{
		const prefix string = ",\"SueRacingMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueRacingMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF4) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF4) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF4) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF4) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot28(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot29(in *jlexer.Lexer, out *SerialUdbExtraF2B) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueTime":
			out.SueTime = uint32(in.Uint32())
		case "SueFlags":
			out.SueFlags = uint32(in.Uint32())
		case "SueBaromPress":
			out.SueBaromPress = int32(in.Int32())
		case "SueBaromAlt":
			out.SueBaromAlt = int32(in.Int32())
		case "SuePwmInput1":
			out.SuePwmInput1 = int16(in.Int16())
		case "SuePwmInput2":
			out.SuePwmInput2 = int16(in.Int16())
		case "SuePwmInput3":
			out.SuePwmInput3 = int16(in.Int16())
		case "SuePwmInput4":
			out.SuePwmInput4 = int16(in.Int16())
		case "SuePwmInput5":
			out.SuePwmInput5 = int16(in.Int16())
		case "SuePwmInput6":
			out.SuePwmInput6 = int16(in.Int16())
		case "SuePwmInput7":
			out.SuePwmInput7 = int16(in.Int16())
		case "SuePwmInput8":
			out.SuePwmInput8 = int16(in.Int16())
		case "SuePwmInput9":
			out.SuePwmInput9 = int16(in.Int16())
		case "SuePwmInput10":
			out.SuePwmInput10 = int16(in.Int16())
		case "SuePwmInput11":
			out.SuePwmInput11 = int16(in.Int16())
		case "SuePwmInput12":
			out.SuePwmInput12 = int16(in.Int16())
		case "SuePwmOutput1":
			out.SuePwmOutput1 = int16(in.Int16())
		case "SuePwmOutput2":
			out.SuePwmOutput2 = int16(in.Int16())
		case "SuePwmOutput3":
			out.SuePwmOutput3 = int16(in.Int16())
		case "SuePwmOutput4":
			out.SuePwmOutput4 = int16(in.Int16())
		case "SuePwmOutput5":
			out.SuePwmOutput5 = int16(in.Int16())
		case "SuePwmOutput6":
			out.SuePwmOutput6 = int16(in.Int16())
		case "SuePwmOutput7":
			out.SuePwmOutput7 = int16(in.Int16())
		case "SuePwmOutput8":
			out.SuePwmOutput8 = int16(in.Int16())
		case "SuePwmOutput9":
			out.SuePwmOutput9 = int16(in.Int16())
		case "SuePwmOutput10":
			out.SuePwmOutput10 = int16(in.Int16())
		case "SuePwmOutput11":
			out.SuePwmOutput11 = int16(in.Int16())
		case "SuePwmOutput12":
			out.SuePwmOutput12 = int16(in.Int16())
		case "SueImuLocationX":
			out.SueImuLocationX = int16(in.Int16())
		case "SueImuLocationY":
			out.SueImuLocationY = int16(in.Int16())
		case "SueImuLocationZ":
			out.SueImuLocationZ = int16(in.Int16())
		case "SueLocationErrorEarthX":
			out.SueLocationErrorEarthX = int16(in.Int16())
		case "SueLocationErrorEarthY":
			out.SueLocationErrorEarthY = int16(in.Int16())
		case "SueLocationErrorEarthZ":
			out.SueLocationErrorEarthZ = int16(in.Int16())
		case "SueOscFails":
			out.SueOscFails = int16(in.Int16())
		case "SueImuVelocityX":
			out.SueImuVelocityX = int16(in.Int16())
		case "SueImuVelocityY":
			out.SueImuVelocityY = int16(in.Int16())
		case "SueImuVelocityZ":
			out.SueImuVelocityZ = int16(in.Int16())
		case "SueWaypointGoalX":
			out.SueWaypointGoalX = int16(in.Int16())
		case "SueWaypointGoalY":
			out.SueWaypointGoalY = int16(in.Int16())
		case "SueWaypointGoalZ":
			out.SueWaypointGoalZ = int16(in.Int16())
		case "SueAeroX":
			out.SueAeroX = int16(in.Int16())
		case "SueAeroY":
			out.SueAeroY = int16(in.Int16())
		case "SueAeroZ":
			out.SueAeroZ = int16(in.Int16())
		case "SueBaromTemp":
			out.SueBaromTemp = int16(in.Int16())
		case "SueBatVolt":
			out.SueBatVolt = int16(in.Int16())
		case "SueBatAmp":
			out.SueBatAmp = int16(in.Int16())
		case "SueBatAmpHours":
			out.SueBatAmpHours = int16(in.Int16())
		case "SueDesiredHeight":
			out.SueDesiredHeight = int16(in.Int16())
		case "SueMemoryStackFree":
			out.SueMemoryStackFree = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot29(out *jwriter.Writer, in SerialUdbExtraF2B) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueTime\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.SueTime))
	}
	{
		const prefix string = ",\"SueFlags\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.SueFlags))
	}
	{
		const prefix string = ",\"SueBaromPress\":"
		out.RawString(prefix)
		out.Int32(int32(in.SueBaromPress))
	}
	{
		const prefix string = ",\"SueBaromAlt\":"
		out.RawString(prefix)
		out.Int32(int32(in.SueBaromAlt))
	}
	{
		const prefix string = ",\"SuePwmInput1\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput1))
	}
	{
		const prefix string = ",\"SuePwmInput2\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput2))
	}
	{
		const prefix string = ",\"SuePwmInput3\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput3))
	}
	{
		const prefix string = ",\"SuePwmInput4\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput4))
	}
	{
		const prefix string = ",\"SuePwmInput5\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput5))
	}
	{
		const prefix string = ",\"SuePwmInput6\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput6))
	}
	{
		const prefix string = ",\"SuePwmInput7\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput7))
	}
	{
		const prefix string = ",\"SuePwmInput8\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput8))
	}
	{
		const prefix string = ",\"SuePwmInput9\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput9))
	}
	{
		const prefix string = ",\"SuePwmInput10\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput10))
	}
	{
		const prefix string = ",\"SuePwmInput11\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput11))
	}
	{
		const prefix string = ",\"SuePwmInput12\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmInput12))
	}
	{
		const prefix string = ",\"SuePwmOutput1\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput1))
	}
	{
		const prefix string = ",\"SuePwmOutput2\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput2))
	}
	{
		const prefix string = ",\"SuePwmOutput3\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput3))
	}
	{
		const prefix string = ",\"SuePwmOutput4\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput4))
	}
	{
		const prefix string = ",\"SuePwmOutput5\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput5))
	}
	{
		const prefix string = ",\"SuePwmOutput6\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput6))
	}
	{
		const prefix string = ",\"SuePwmOutput7\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput7))
	}
	{
		const prefix string = ",\"SuePwmOutput8\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput8))
	}
	{
		const prefix string = ",\"SuePwmOutput9\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput9))
	}
	{
		const prefix string = ",\"SuePwmOutput10\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput10))
	}
	{
		const prefix string = ",\"SuePwmOutput11\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput11))
	}
	{
		const prefix string = ",\"SuePwmOutput12\":"
		out.RawString(prefix)
		out.Int16(int16(in.SuePwmOutput12))
	}
	{
		const prefix string = ",\"SueImuLocationX\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueImuLocationX))
	}
	{
		const prefix string = ",\"SueImuLocationY\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueImuLocationY))
	}
	{
		const prefix string = ",\"SueImuLocationZ\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueImuLocationZ))
	}
	{
		const prefix string = ",\"SueLocationErrorEarthX\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueLocationErrorEarthX))
	}
	{
		const prefix string = ",\"SueLocationErrorEarthY\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueLocationErrorEarthY))
	}
	{
		const prefix string = ",\"SueLocationErrorEarthZ\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueLocationErrorEarthZ))
	}
	{
		const prefix string = ",\"SueOscFails\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueOscFails))
	}
	{
		const prefix string = ",\"SueImuVelocityX\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueImuVelocityX))
	}
	{
		const prefix string = ",\"SueImuVelocityY\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueImuVelocityY))
	}
	{
		const prefix string = ",\"SueImuVelocityZ\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueImuVelocityZ))
	}
	{
		const prefix string = ",\"SueWaypointGoalX\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueWaypointGoalX))
	}
	{
		const prefix string = ",\"SueWaypointGoalY\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueWaypointGoalY))
	}
	{
		const prefix string = ",\"SueWaypointGoalZ\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueWaypointGoalZ))
	}
	{
		const prefix string = ",\"SueAeroX\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueAeroX))
	}
	{
		const prefix string = ",\"SueAeroY\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueAeroY))
	}
	{
		const prefix string = ",\"SueAeroZ\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueAeroZ))
	}
	{
		const prefix string = ",\"SueBaromTemp\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueBaromTemp))
	}
	{
		const prefix string = ",\"SueBatVolt\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueBatVolt))
	}
	{
		const prefix string = ",\"SueBatAmp\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueBatAmp))
	}
	{
		const prefix string = ",\"SueBatAmpHours\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueBatAmpHours))
	}
	{
		const prefix string = ",\"SueDesiredHeight\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueDesiredHeight))
	}
	{
		const prefix string = ",\"SueMemoryStackFree\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueMemoryStackFree))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF2B) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF2B) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF2B) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF2B) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot29(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot30(in *jlexer.Lexer, out *SerialUdbExtraF2A) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueTime":
			out.SueTime = uint32(in.Uint32())
		case "SueLatitude":
			out.SueLatitude = int32(in.Int32())
		case "SueLongitude":
			out.SueLongitude = int32(in.Int32())
		case "SueAltitude":
			out.SueAltitude = int32(in.Int32())
		case "SueWaypointIndex":
			out.SueWaypointIndex = uint16(in.Uint16())
		case "SueRmat0":
			out.SueRmat0 = int16(in.Int16())
		case "SueRmat1":
			out.SueRmat1 = int16(in.Int16())
		case "SueRmat2":
			out.SueRmat2 = int16(in.Int16())
		case "SueRmat3":
			out.SueRmat3 = int16(in.Int16())
		case "SueRmat4":
			out.SueRmat4 = int16(in.Int16())
		case "SueRmat5":
			out.SueRmat5 = int16(in.Int16())
		case "SueRmat6":
			out.SueRmat6 = int16(in.Int16())
		case "SueRmat7":
			out.SueRmat7 = int16(in.Int16())
		case "SueRmat8":
			out.SueRmat8 = int16(in.Int16())
		case "SueCog":
			out.SueCog = uint16(in.Uint16())
		case "SueSog":
			out.SueSog = int16(in.Int16())
		case "SueCPULoad":
			out.SueCPULoad = uint16(in.Uint16())
		case "SueAirSpeed3dimu":
			out.SueAirSpeed3dimu = uint16(in.Uint16())
		case "SueEstimatedWind0":
			out.SueEstimatedWind0 = int16(in.Int16())
		case "SueEstimatedWind1":
			out.SueEstimatedWind1 = int16(in.Int16())
		case "SueEstimatedWind2":
			out.SueEstimatedWind2 = int16(in.Int16())
		case "SueMagfieldearth0":
			out.SueMagfieldearth0 = int16(in.Int16())
		case "SueMagfieldearth1":
			out.SueMagfieldearth1 = int16(in.Int16())
		case "SueMagfieldearth2":
			out.SueMagfieldearth2 = int16(in.Int16())
		case "SueSvs":
			out.SueSvs = int16(in.Int16())
		case "SueHdop":
			out.SueHdop = int16(in.Int16())
		case "SueStatus":
			out.SueStatus = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot30(out *jwriter.Writer, in SerialUdbExtraF2A) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueTime\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.SueTime))
	}
	{
		const prefix string = ",\"SueLatitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.SueLatitude))
	}
	{
		const prefix string = ",\"SueLongitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.SueLongitude))
	}
	{
		const prefix string = ",\"SueAltitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.SueAltitude))
	}
	{
		const prefix string = ",\"SueWaypointIndex\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SueWaypointIndex))
	}
	{
		const prefix string = ",\"SueRmat0\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat0))
	}
	{
		const prefix string = ",\"SueRmat1\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat1))
	}
	{
		const prefix string = ",\"SueRmat2\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat2))
	}
	{
		const prefix string = ",\"SueRmat3\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat3))
	}
	{
		const prefix string = ",\"SueRmat4\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat4))
	}
	{
		const prefix string = ",\"SueRmat5\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat5))
	}
	{
		const prefix string = ",\"SueRmat6\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat6))
	}
	{
		const prefix string = ",\"SueRmat7\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat7))
	}
	{
		const prefix string = ",\"SueRmat8\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRmat8))
	}
	{
		const prefix string = ",\"SueCog\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SueCog))
	}
	{
		const prefix string = ",\"SueSog\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueSog))
	}
	{
		const prefix string = ",\"SueCPULoad\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SueCPULoad))
	}
	{
		const prefix string = ",\"SueAirSpeed3dimu\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SueAirSpeed3dimu))
	}
	{
		const prefix string = ",\"SueEstimatedWind0\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueEstimatedWind0))
	}
	{
		const prefix string = ",\"SueEstimatedWind1\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueEstimatedWind1))
	}
	{
		const prefix string = ",\"SueEstimatedWind2\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueEstimatedWind2))
	}
	{
		const prefix string = ",\"SueMagfieldearth0\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueMagfieldearth0))
	}
	{
		const prefix string = ",\"SueMagfieldearth1\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueMagfieldearth1))
	}
	{
		const prefix string = ",\"SueMagfieldearth2\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueMagfieldearth2))
	}
	{
		const prefix string = ",\"SueSvs\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueSvs))
	}
	{
		const prefix string = ",\"SueHdop\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueHdop))
	}
	{
		const prefix string = ",\"SueStatus\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF2A) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF2A) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF2A) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF2A) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot30(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot31(in *jlexer.Lexer, out *SerialUdbExtraF22) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueAccelXAtCalibration":
			out.SueAccelXAtCalibration = int16(in.Int16())
		case "SueAccelYAtCalibration":
			out.SueAccelYAtCalibration = int16(in.Int16())
		case "SueAccelZAtCalibration":
			out.SueAccelZAtCalibration = int16(in.Int16())
		case "SueGyroXAtCalibration":
			out.SueGyroXAtCalibration = int16(in.Int16())
		case "SueGyroYAtCalibration":
			out.SueGyroYAtCalibration = int16(in.Int16())
		case "SueGyroZAtCalibration":
			out.SueGyroZAtCalibration = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot31(out *jwriter.Writer, in SerialUdbExtraF22) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueAccelXAtCalibration\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.SueAccelXAtCalibration))
	}
	{
		const prefix string = ",\"SueAccelYAtCalibration\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueAccelYAtCalibration))
	}
	{
		const prefix string = ",\"SueAccelZAtCalibration\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueAccelZAtCalibration))
	}
	{
		const prefix string = ",\"SueGyroXAtCalibration\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueGyroXAtCalibration))
	}
	{
		const prefix string = ",\"SueGyroYAtCalibration\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueGyroYAtCalibration))
	}
	{
		const prefix string = ",\"SueGyroZAtCalibration\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueGyroZAtCalibration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF22) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF22) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF22) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF22) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot31(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot32(in *jlexer.Lexer, out *SerialUdbExtraF21) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueAccelXOffset":
			out.SueAccelXOffset = int16(in.Int16())
		case "SueAccelYOffset":
			out.SueAccelYOffset = int16(in.Int16())
		case "SueAccelZOffset":
			out.SueAccelZOffset = int16(in.Int16())
		case "SueGyroXOffset":
			out.SueGyroXOffset = int16(in.Int16())
		case "SueGyroYOffset":
			out.SueGyroYOffset = int16(in.Int16())
		case "SueGyroZOffset":
			out.SueGyroZOffset = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot32(out *jwriter.Writer, in SerialUdbExtraF21) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueAccelXOffset\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.SueAccelXOffset))
	}
	{
		const prefix string = ",\"SueAccelYOffset\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueAccelYOffset))
	}
	{
		const prefix string = ",\"SueAccelZOffset\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueAccelZOffset))
	}
	{
		const prefix string = ",\"SueGyroXOffset\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueGyroXOffset))
	}
	{
		const prefix string = ",\"SueGyroYOffset\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueGyroYOffset))
	}
	{
		const prefix string = ",\"SueGyroZOffset\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueGyroZOffset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF21) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF21) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF21) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF21) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot32(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot33(in *jlexer.Lexer, out *SerialUdbExtraF20) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueTrimValueInput1":
			out.SueTrimValueInput1 = int16(in.Int16())
		case "SueTrimValueInput2":
			out.SueTrimValueInput2 = int16(in.Int16())
		case "SueTrimValueInput3":
			out.SueTrimValueInput3 = int16(in.Int16())
		case "SueTrimValueInput4":
			out.SueTrimValueInput4 = int16(in.Int16())
		case "SueTrimValueInput5":
			out.SueTrimValueInput5 = int16(in.Int16())
		case "SueTrimValueInput6":
			out.SueTrimValueInput6 = int16(in.Int16())
		case "SueTrimValueInput7":
			out.SueTrimValueInput7 = int16(in.Int16())
		case "SueTrimValueInput8":
			out.SueTrimValueInput8 = int16(in.Int16())
		case "SueTrimValueInput9":
			out.SueTrimValueInput9 = int16(in.Int16())
		case "SueTrimValueInput10":
			out.SueTrimValueInput10 = int16(in.Int16())
		case "SueTrimValueInput11":
			out.SueTrimValueInput11 = int16(in.Int16())
		case "SueTrimValueInput12":
			out.SueTrimValueInput12 = int16(in.Int16())
		case "SueNumberOfInputs":
			out.SueNumberOfInputs = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot33(out *jwriter.Writer, in SerialUdbExtraF20) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueTrimValueInput1\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.SueTrimValueInput1))
	}
	{
		const prefix string = ",\"SueTrimValueInput2\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput2))
	}
	{
		const prefix string = ",\"SueTrimValueInput3\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput3))
	}
	{
		const prefix string = ",\"SueTrimValueInput4\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput4))
	}
	{
		const prefix string = ",\"SueTrimValueInput5\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput5))
	}
	{
		const prefix string = ",\"SueTrimValueInput6\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput6))
	}
	{
		const prefix string = ",\"SueTrimValueInput7\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput7))
	}
	{
		const prefix string = ",\"SueTrimValueInput8\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput8))
	}
	{
		const prefix string = ",\"SueTrimValueInput9\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput9))
	}
	{
		const prefix string = ",\"SueTrimValueInput10\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput10))
	}
	{
		const prefix string = ",\"SueTrimValueInput11\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput11))
	}
	{
		const prefix string = ",\"SueTrimValueInput12\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrimValueInput12))
	}
	{
		const prefix string = ",\"SueNumberOfInputs\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueNumberOfInputs))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF20) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF20) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF20) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF20) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot33(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot34(in *jlexer.Lexer, out *SerialUdbExtraF19) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueAileronOutputChannel":
			out.SueAileronOutputChannel = uint8(in.Uint8())
		case "SueAileronReversed":
			out.SueAileronReversed = uint8(in.Uint8())
		case "SueElevatorOutputChannel":
			out.SueElevatorOutputChannel = uint8(in.Uint8())
		case "SueElevatorReversed":
			out.SueElevatorReversed = uint8(in.Uint8())
		case "SueThrottleOutputChannel":
			out.SueThrottleOutputChannel = uint8(in.Uint8())
		case "SueThrottleReversed":
			out.SueThrottleReversed = uint8(in.Uint8())
		case "SueRudderOutputChannel":
			out.SueRudderOutputChannel = uint8(in.Uint8())
		case "SueRudderReversed":
			out.SueRudderReversed = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot34(out *jwriter.Writer, in SerialUdbExtraF19) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueAileronOutputChannel\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.SueAileronOutputChannel))
	}
	{
		const prefix string = ",\"SueAileronReversed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueAileronReversed))
	}
	{
		const prefix string = ",\"SueElevatorOutputChannel\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueElevatorOutputChannel))
	}
	{
		const prefix string = ",\"SueElevatorReversed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueElevatorReversed))
	}
	{
		const prefix string = ",\"SueThrottleOutputChannel\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueThrottleOutputChannel))
	}
	{
		const prefix string = ",\"SueThrottleReversed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueThrottleReversed))
	}
	{
		const prefix string = ",\"SueRudderOutputChannel\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueRudderOutputChannel))
	}
	{
		const prefix string = ",\"SueRudderReversed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueRudderReversed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF19) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF19) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF19) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF19) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot34(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot35(in *jlexer.Lexer, out *SerialUdbExtraF18) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "AngleOfAttackNormal":
			out.AngleOfAttackNormal = float32(in.Float32())
		case "AngleOfAttackInverted":
			out.AngleOfAttackInverted = float32(in.Float32())
		case "ElevatorTrimNormal":
			out.ElevatorTrimNormal = float32(in.Float32())
		case "ElevatorTrimInverted":
			out.ElevatorTrimInverted = float32(in.Float32())
		case "ReferenceSpeed":
			out.ReferenceSpeed = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot35(out *jwriter.Writer, in SerialUdbExtraF18) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"AngleOfAttackNormal\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.AngleOfAttackNormal))
	}
	{
		const prefix string = ",\"AngleOfAttackInverted\":"
		out.RawString(prefix)
		out.Float32(float32(in.AngleOfAttackInverted))
	}
	{
		const prefix string = ",\"ElevatorTrimNormal\":"
		out.RawString(prefix)
		out.Float32(float32(in.ElevatorTrimNormal))
	}
	{
		const prefix string = ",\"ElevatorTrimInverted\":"
		out.RawString(prefix)
		out.Float32(float32(in.ElevatorTrimInverted))
	}
	{
		const prefix string = ",\"ReferenceSpeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.ReferenceSpeed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF18) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF18) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF18) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF18) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot35(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot36(in *jlexer.Lexer, out *SerialUdbExtraF17) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueFeedForward":
			out.SueFeedForward = float32(in.Float32())
		case "SueTurnRateNav":
			out.SueTurnRateNav = float32(in.Float32())
		case "SueTurnRateFbw":
			out.SueTurnRateFbw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot36(out *jwriter.Writer, in SerialUdbExtraF17) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueFeedForward\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.SueFeedForward))
	}
	{
		const prefix string = ",\"SueTurnRateNav\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueTurnRateNav))
	}
	{
		const prefix string = ",\"SueTurnRateFbw\":"
		out.RawString(prefix)
		out.Float32(float32(in.SueTurnRateFbw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF17) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF17) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF17) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF17) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot36(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot37(in *jlexer.Lexer, out *SerialUdbExtraF16) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueIDLeadPilot":
			if in.IsNull() {
				in.Skip()
				out.SueIDLeadPilot = nil
			} else {
				out.SueIDLeadPilot = in.Bytes()
			}
		case "SueIDDiyDronesURL":
			if in.IsNull() {
				in.Skip()
				out.SueIDDiyDronesURL = nil
			} else {
				out.SueIDDiyDronesURL = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot37(out *jwriter.Writer, in SerialUdbExtraF16) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueIDLeadPilot\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.SueIDLeadPilot)
	}
	{
		const prefix string = ",\"SueIDDiyDronesURL\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SueIDDiyDronesURL)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF16) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF16) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF16) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF16) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot37(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot38(in *jlexer.Lexer, out *SerialUdbExtraF15) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueIDVehicleModelName":
			if in.IsNull() {
				in.Skip()
				out.SueIDVehicleModelName = nil
			} else {
				out.SueIDVehicleModelName = in.Bytes()
			}
		case "SueIDVehicleRegistration":
			if in.IsNull() {
				in.Skip()
				out.SueIDVehicleRegistration = nil
			} else {
				out.SueIDVehicleRegistration = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot38(out *jwriter.Writer, in SerialUdbExtraF15) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueIDVehicleModelName\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.SueIDVehicleModelName)
	}
	{
		const prefix string = ",\"SueIDVehicleRegistration\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SueIDVehicleRegistration)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF15) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF15) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF15) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF15) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot38(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot39(in *jlexer.Lexer, out *SerialUdbExtraF14) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueTrapSource":
			out.SueTrapSource = uint32(in.Uint32())
		case "SueRcon":
			out.SueRcon = int16(in.Int16())
		case "SueTrapFlags":
			out.SueTrapFlags = int16(in.Int16())
		case "SueOscFailCount":
			out.SueOscFailCount = int16(in.Int16())
		case "SueWindEstimation":
			out.SueWindEstimation = uint8(in.Uint8())
		case "SueGpsType":
			out.SueGpsType = uint8(in.Uint8())
		case "SueDr":
			out.SueDr = uint8(in.Uint8())
		case "SueBoardType":
			out.SueBoardType = uint8(in.Uint8())
		case "SueAirframe":
			out.SueAirframe = uint8(in.Uint8())
		case "SueClockConfig":
			out.SueClockConfig = uint8(in.Uint8())
		case "SueFlightPlanType":
			out.SueFlightPlanType = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot39(out *jwriter.Writer, in SerialUdbExtraF14) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueTrapSource\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.SueTrapSource))
	}
	{
		const prefix string = ",\"SueRcon\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueRcon))
	}
	{
		const prefix string = ",\"SueTrapFlags\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueTrapFlags))
	}
	{
		const prefix string = ",\"SueOscFailCount\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueOscFailCount))
	}
	{
		const prefix string = ",\"SueWindEstimation\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueWindEstimation))
	}
	{
		const prefix string = ",\"SueGpsType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueGpsType))
	}
	{
		const prefix string = ",\"SueDr\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueDr))
	}
	{
		const prefix string = ",\"SueBoardType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueBoardType))
	}
	{
		const prefix string = ",\"SueAirframe\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueAirframe))
	}
	{
		const prefix string = ",\"SueClockConfig\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueClockConfig))
	}
	{
		const prefix string = ",\"SueFlightPlanType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SueFlightPlanType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF14) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF14) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF14) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF14) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot39(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot40(in *jlexer.Lexer, out *SerialUdbExtraF13) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SueLatOrigin":
			out.SueLatOrigin = int32(in.Int32())
		case "SueLonOrigin":
			out.SueLonOrigin = int32(in.Int32())
		case "SueAltOrigin":
			out.SueAltOrigin = int32(in.Int32())
		case "SueWeekNo":
			out.SueWeekNo = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot40(out *jwriter.Writer, in SerialUdbExtraF13) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SueLatOrigin\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.SueLatOrigin))
	}
	{
		const prefix string = ",\"SueLonOrigin\":"
		out.RawString(prefix)
		out.Int32(int32(in.SueLonOrigin))
	}
	{
		const prefix string = ",\"SueAltOrigin\":"
		out.RawString(prefix)
		out.Int32(int32(in.SueAltOrigin))
	}
	{
		const prefix string = ",\"SueWeekNo\":"
		out.RawString(prefix)
		out.Int16(int16(in.SueWeekNo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialUdbExtraF13) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialUdbExtraF13) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialUdbExtraF13) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialUdbExtraF13) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot40(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot41(in *jlexer.Lexer, out *SerialControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Baudrate":
			out.Baudrate = uint32(in.Uint32())
		case "Timeout":
			out.Timeout = uint16(in.Uint16())
		case "Device":
			out.Device = SERIAL_CONTROL_DEV(in.Int())
		case "Flags":
			out.Flags = SERIAL_CONTROL_FLAG(in.Int())
		case "Count":
			out.Count = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot41(out *jwriter.Writer, in SerialControl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Baudrate\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Baudrate))
	}
	{
		const prefix string = ",\"Timeout\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Timeout))
	}
	{
		const prefix string = ",\"Device\":"
		out.RawString(prefix)
		out.Int(int(in.Device))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Count))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SerialControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SerialControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SerialControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SerialControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot41(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot42(in *jlexer.Lexer, out *ScaledPressure3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot42(out *jwriter.Writer, in ScaledPressure3) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"PressAbs\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressAbs))
	}
	{
		const prefix string = ",\"PressDiff\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressDiff))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot42(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot43(in *jlexer.Lexer, out *ScaledPressure2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot43(out *jwriter.Writer, in ScaledPressure2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"PressAbs\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressAbs))
	}
	{
		const prefix string = ",\"PressDiff\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressDiff))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot43(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot44(in *jlexer.Lexer, out *ScaledPressure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "PressAbs":
			out.PressAbs = float32(in.Float32())
		case "PressDiff":
			out.PressDiff = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot44(out *jwriter.Writer, in ScaledPressure) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"PressAbs\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressAbs))
	}
	{
		const prefix string = ",\"PressDiff\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressDiff))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledPressure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledPressure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledPressure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledPressure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot44(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot45(in *jlexer.Lexer, out *ScaledImu3) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot45(out *jwriter.Writer, in ScaledImu3) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu3) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu3) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu3) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu3) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot45(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot46(in *jlexer.Lexer, out *ScaledImu2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot46(out *jwriter.Writer, in ScaledImu2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot46(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot47(in *jlexer.Lexer, out *ScaledImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot47(out *jwriter.Writer, in ScaledImu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaledImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaledImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaledImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaledImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot47(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot48(in *jlexer.Lexer, out *SafetySetAllowedArea) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "P1x":
			out.P1x = float32(in.Float32())
		case "P1y":
			out.P1y = float32(in.Float32())
		case "P1z":
			out.P1z = float32(in.Float32())
		case "P2x":
			out.P2x = float32(in.Float32())
		case "P2y":
			out.P2y = float32(in.Float32())
		case "P2z":
			out.P2z = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot48(out *jwriter.Writer, in SafetySetAllowedArea) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"P1x\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.P1x))
	}
	{
		const prefix string = ",\"P1y\":"
		out.RawString(prefix)
		out.Float32(float32(in.P1y))
	}
	{
		const prefix string = ",\"P1z\":"
		out.RawString(prefix)
		out.Float32(float32(in.P1z))
	}
	{
		const prefix string = ",\"P2x\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2x))
	}
	{
		const prefix string = ",\"P2y\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2y))
	}
	{
		const prefix string = ",\"P2z\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2z))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafetySetAllowedArea) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafetySetAllowedArea) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafetySetAllowedArea) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafetySetAllowedArea) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot48(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot49(in *jlexer.Lexer, out *SafetyAllowedArea) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "P1x":
			out.P1x = float32(in.Float32())
		case "P1y":
			out.P1y = float32(in.Float32())
		case "P1z":
			out.P1z = float32(in.Float32())
		case "P2x":
			out.P2x = float32(in.Float32())
		case "P2y":
			out.P2y = float32(in.Float32())
		case "P2z":
			out.P2z = float32(in.Float32())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot49(out *jwriter.Writer, in SafetyAllowedArea) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"P1x\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.P1x))
	}
	{
		const prefix string = ",\"P1y\":"
		out.RawString(prefix)
		out.Float32(float32(in.P1y))
	}
	{
		const prefix string = ",\"P1z\":"
		out.RawString(prefix)
		out.Float32(float32(in.P1z))
	}
	{
		const prefix string = ",\"P2x\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2x))
	}
	{
		const prefix string = ",\"P2y\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2y))
	}
	{
		const prefix string = ",\"P2z\":"
		out.RawString(prefix)
		out.Float32(float32(in.P2z))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafetyAllowedArea) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafetyAllowedArea) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafetyAllowedArea) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafetyAllowedArea) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot49(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot50(in *jlexer.Lexer, out *ResourceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RequestID":
			out.RequestID = uint8(in.Uint8())
		case "URIType":
			out.URIType = uint8(in.Uint8())
		case "URI":
			if in.IsNull() {
				in.Skip()
				out.URI = nil
			} else {
				out.URI = in.Bytes()
			}
		case "TransferType":
			out.TransferType = uint8(in.Uint8())
		case "Storage":
			if in.IsNull() {
				in.Skip()
				out.Storage = nil
			} else {
				out.Storage = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot50(out *jwriter.Writer, in ResourceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RequestID\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.RequestID))
	}
	{
		const prefix string = ",\"URIType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.URIType))
	}
	{
		const prefix string = ",\"URI\":"
		out.RawString(prefix)
		out.Base64Bytes(in.URI)
	}
	{
		const prefix string = ",\"TransferType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TransferType))
	}
	{
		const prefix string = ",\"Storage\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Storage)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot50(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot51(in *jlexer.Lexer, out *RequestDataStream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ReqMessageRate":
			out.ReqMessageRate = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ReqStreamID":
			out.ReqStreamID = uint8(in.Uint8())
		case "StartStop":
			out.StartStop = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot51(out *jwriter.Writer, in RequestDataStream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ReqMessageRate\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.ReqMessageRate))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ReqStreamID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ReqStreamID))
	}
	{
		const prefix string = ",\"StartStop\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.StartStop))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestDataStream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestDataStream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestDataStream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestDataStream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot51(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot52(in *jlexer.Lexer, out *RcChannelsScaled) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Scaled":
			out.Chan1Scaled = int16(in.Int16())
		case "Chan2Scaled":
			out.Chan2Scaled = int16(in.Int16())
		case "Chan3Scaled":
			out.Chan3Scaled = int16(in.Int16())
		case "Chan4Scaled":
			out.Chan4Scaled = int16(in.Int16())
		case "Chan5Scaled":
			out.Chan5Scaled = int16(in.Int16())
		case "Chan6Scaled":
			out.Chan6Scaled = int16(in.Int16())
		case "Chan7Scaled":
			out.Chan7Scaled = int16(in.Int16())
		case "Chan8Scaled":
			out.Chan8Scaled = int16(in.Int16())
		case "Port":
			out.Port = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot52(out *jwriter.Writer, in RcChannelsScaled) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Chan1Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan1Scaled))
	}
	{
		const prefix string = ",\"Chan2Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan2Scaled))
	}
	{
		const prefix string = ",\"Chan3Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan3Scaled))
	}
	{
		const prefix string = ",\"Chan4Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan4Scaled))
	}
	{
		const prefix string = ",\"Chan5Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan5Scaled))
	}
	{
		const prefix string = ",\"Chan6Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan6Scaled))
	}
	{
		const prefix string = ",\"Chan7Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan7Scaled))
	}
	{
		const prefix string = ",\"Chan8Scaled\":"
		out.RawString(prefix)
		out.Int16(int16(in.Chan8Scaled))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Port))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsScaled) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsScaled) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsScaled) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsScaled) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot52(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot53(in *jlexer.Lexer, out *RcChannelsRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Port":
			out.Port = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot53(out *jwriter.Writer, in RcChannelsRaw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Chan1Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan1Raw))
	}
	{
		const prefix string = ",\"Chan2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan2Raw))
	}
	{
		const prefix string = ",\"Chan3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan3Raw))
	}
	{
		const prefix string = ",\"Chan4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan4Raw))
	}
	{
		const prefix string = ",\"Chan5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan5Raw))
	}
	{
		const prefix string = ",\"Chan6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan6Raw))
	}
	{
		const prefix string = ",\"Chan7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan7Raw))
	}
	{
		const prefix string = ",\"Chan8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan8Raw))
	}
	{
		const prefix string = ",\"Port\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Port))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot53(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot54(in *jlexer.Lexer, out *RcChannelsOverride) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot54(out *jwriter.Writer, in RcChannelsOverride) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Chan1Raw\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Chan1Raw))
	}
	{
		const prefix string = ",\"Chan2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan2Raw))
	}
	{
		const prefix string = ",\"Chan3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan3Raw))
	}
	{
		const prefix string = ",\"Chan4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan4Raw))
	}
	{
		const prefix string = ",\"Chan5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan5Raw))
	}
	{
		const prefix string = ",\"Chan6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan6Raw))
	}
	{
		const prefix string = ",\"Chan7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan7Raw))
	}
	{
		const prefix string = ",\"Chan8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan8Raw))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannelsOverride) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannelsOverride) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannelsOverride) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannelsOverride) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot54(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot55(in *jlexer.Lexer, out *RcChannels) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Chan9Raw":
			out.Chan9Raw = uint16(in.Uint16())
		case "Chan10Raw":
			out.Chan10Raw = uint16(in.Uint16())
		case "Chan11Raw":
			out.Chan11Raw = uint16(in.Uint16())
		case "Chan12Raw":
			out.Chan12Raw = uint16(in.Uint16())
		case "Chan13Raw":
			out.Chan13Raw = uint16(in.Uint16())
		case "Chan14Raw":
			out.Chan14Raw = uint16(in.Uint16())
		case "Chan15Raw":
			out.Chan15Raw = uint16(in.Uint16())
		case "Chan16Raw":
			out.Chan16Raw = uint16(in.Uint16())
		case "Chan17Raw":
			out.Chan17Raw = uint16(in.Uint16())
		case "Chan18Raw":
			out.Chan18Raw = uint16(in.Uint16())
		case "Chancount":
			out.Chancount = uint8(in.Uint8())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot55(out *jwriter.Writer, in RcChannels) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Chan1Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan1Raw))
	}
	{
		const prefix string = ",\"Chan2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan2Raw))
	}
	{
		const prefix string = ",\"Chan3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan3Raw))
	}
	{
		const prefix string = ",\"Chan4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan4Raw))
	}
	{
		const prefix string = ",\"Chan5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan5Raw))
	}
	{
		const prefix string = ",\"Chan6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan6Raw))
	}
	{
		const prefix string = ",\"Chan7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan7Raw))
	}
	{
		const prefix string = ",\"Chan8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan8Raw))
	}
	{
		const prefix string = ",\"Chan9Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan9Raw))
	}
	{
		const prefix string = ",\"Chan10Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan10Raw))
	}
	{
		const prefix string = ",\"Chan11Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan11Raw))
	}
	{
		const prefix string = ",\"Chan12Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan12Raw))
	}
	{
		const prefix string = ",\"Chan13Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan13Raw))
	}
	{
		const prefix string = ",\"Chan14Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan14Raw))
	}
	{
		const prefix string = ",\"Chan15Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan15Raw))
	}
	{
		const prefix string = ",\"Chan16Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan16Raw))
	}
	{
		const prefix string = ",\"Chan17Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan17Raw))
	}
	{
		const prefix string = ",\"Chan18Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan18Raw))
	}
	{
		const prefix string = ",\"Chancount\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Chancount))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RcChannels) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RcChannels) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RcChannels) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RcChannels) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot55(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot56(in *jlexer.Lexer, out *RawPressure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "PressAbs":
			out.PressAbs = int16(in.Int16())
		case "PressDiff1":
			out.PressDiff1 = int16(in.Int16())
		case "PressDiff2":
			out.PressDiff2 = int16(in.Int16())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot56(out *jwriter.Writer, in RawPressure) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"PressAbs\":"
		out.RawString(prefix)
		out.Int16(int16(in.PressAbs))
	}
	{
		const prefix string = ",\"PressDiff1\":"
		out.RawString(prefix)
		out.Int16(int16(in.PressDiff1))
	}
	{
		const prefix string = ",\"PressDiff2\":"
		out.RawString(prefix)
		out.Int16(int16(in.PressDiff2))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawPressure) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawPressure) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawPressure) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawPressure) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot56(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot57(in *jlexer.Lexer, out *RawImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		case "Xgyro":
			out.Xgyro = int16(in.Int16())
		case "Ygyro":
			out.Ygyro = int16(in.Int16())
		case "Zgyro":
			out.Zgyro = int16(in.Int16())
		case "Xmag":
			out.Xmag = int16(in.Int16())
		case "Ymag":
			out.Ymag = int16(in.Int16())
		case "Zmag":
			out.Zmag = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot57(out *jwriter.Writer, in RawImu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zmag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot57(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot58(in *jlexer.Lexer, out *RadioStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Rxerrors":
			out.Rxerrors = uint16(in.Uint16())
		case "Fixed":
			out.Fixed = uint16(in.Uint16())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		case "Remrssi":
			out.Remrssi = uint8(in.Uint8())
		case "Txbuf":
			out.Txbuf = uint8(in.Uint8())
		case "Noise":
			out.Noise = uint8(in.Uint8())
		case "Remnoise":
			out.Remnoise = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot58(out *jwriter.Writer, in RadioStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Rxerrors\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Rxerrors))
	}
	{
		const prefix string = ",\"Fixed\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Fixed))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	{
		const prefix string = ",\"Remrssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Remrssi))
	}
	{
		const prefix string = ",\"Txbuf\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Txbuf))
	}
	{
		const prefix string = ",\"Noise\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Noise))
	}
	{
		const prefix string = ",\"Remnoise\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Remnoise))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RadioStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RadioStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RadioStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RadioStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot58(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot59(in *jlexer.Lexer, out *PowerStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Vcc":
			out.Vcc = uint16(in.Uint16())
		case "Vservo":
			out.Vservo = uint16(in.Uint16())
		case "Flags":
			out.Flags = MAV_POWER_STATUS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot59(out *jwriter.Writer, in PowerStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Vcc\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Vcc))
	}
	{
		const prefix string = ",\"Vservo\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Vservo))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PowerStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PowerStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PowerStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PowerStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot59(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot60(in *jlexer.Lexer, out *PositionTargetLocalNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot60(out *jwriter.Writer, in PositionTargetLocalNed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Afx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afx))
	}
	{
		const prefix string = ",\"Afy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afy))
	}
	{
		const prefix string = ",\"Afz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afz))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	{
		const prefix string = ",\"CoordinateFrame\":"
		out.RawString(prefix)
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionTargetLocalNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionTargetLocalNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionTargetLocalNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionTargetLocalNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot60(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot61(in *jlexer.Lexer, out *PositionTargetGlobalInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "LatInt":
			out.LatInt = int32(in.Int32())
		case "LonInt":
			out.LonInt = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Afx":
			out.Afx = float32(in.Float32())
		case "Afy":
			out.Afy = float32(in.Float32())
		case "Afz":
			out.Afz = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = POSITION_TARGET_TYPEMASK(in.Int())
		case "CoordinateFrame":
			out.CoordinateFrame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot61(out *jwriter.Writer, in PositionTargetGlobalInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"LatInt\":"
		out.RawString(prefix)
		out.Int32(int32(in.LatInt))
	}
	{
		const prefix string = ",\"LonInt\":"
		out.RawString(prefix)
		out.Int32(int32(in.LonInt))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Afx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afx))
	}
	{
		const prefix string = ",\"Afy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afy))
	}
	{
		const prefix string = ",\"Afz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Afz))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	{
		const prefix string = ",\"CoordinateFrame\":"
		out.RawString(prefix)
		out.Int(int(in.CoordinateFrame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionTargetGlobalInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionTargetGlobalInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionTargetGlobalInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionTargetGlobalInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot61(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot62(in *jlexer.Lexer, out *Ping) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Seq":
			out.Seq = uint32(in.Uint32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot62(out *jwriter.Writer, in Ping) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ping) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ping) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ping) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ping) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot62(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot63(in *jlexer.Lexer, out *ParamValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "ParamCount":
			out.ParamCount = uint16(in.Uint16())
		case "ParamIndex":
			out.ParamIndex = uint16(in.Uint16())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot63(out *jwriter.Writer, in ParamValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamValue\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	{
		const prefix string = ",\"ParamCount\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ParamCount))
	}
	{
		const prefix string = ",\"ParamIndex\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ParamIndex))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	{
		const prefix string = ",\"ParamType\":"
		out.RawString(prefix)
		out.Int(int(in.ParamType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot63(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot64(in *jlexer.Lexer, out *ParamSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot64(out *jwriter.Writer, in ParamSet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamValue\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	{
		const prefix string = ",\"ParamType\":"
		out.RawString(prefix)
		out.Int(int(in.ParamType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot64(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot65(in *jlexer.Lexer, out *ParamRequestRead) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamIndex":
			out.ParamIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot65(out *jwriter.Writer, in ParamRequestRead) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamIndex\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.ParamIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamRequestRead) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamRequestRead) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamRequestRead) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamRequestRead) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot65(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot66(in *jlexer.Lexer, out *ParamRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot66(out *jwriter.Writer, in ParamRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot66(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot67(in *jlexer.Lexer, out *ParamMapRc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue0":
			out.ParamValue0 = float32(in.Float32())
		case "Scale":
			out.Scale = float32(in.Float32())
		case "ParamValueMin":
			out.ParamValueMin = float32(in.Float32())
		case "ParamValueMax":
			out.ParamValueMax = float32(in.Float32())
		case "ParamIndex":
			out.ParamIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParameterRcChannelIndex":
			out.ParameterRcChannelIndex = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot67(out *jwriter.Writer, in ParamMapRc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamValue0\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue0))
	}
	{
		const prefix string = ",\"Scale\":"
		out.RawString(prefix)
		out.Float32(float32(in.Scale))
	}
	{
		const prefix string = ",\"ParamValueMin\":"
		out.RawString(prefix)
		out.Float32(float32(in.ParamValueMin))
	}
	{
		const prefix string = ",\"ParamValueMax\":"
		out.RawString(prefix)
		out.Float32(float32(in.ParamValueMax))
	}
	{
		const prefix string = ",\"ParamIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.ParamIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	{
		const prefix string = ",\"ParameterRcChannelIndex\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ParameterRcChannelIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamMapRc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamMapRc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamMapRc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamMapRc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot67(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot68(in *jlexer.Lexer, out *ParamAckTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ParamValue":
			out.ParamValue = float32(in.Float32())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "ParamID":
			out.ParamID = string(in.String())
		case "ParamType":
			out.ParamType = MAV_PARAM_TYPE(in.Int())
		case "ParamResult":
			out.ParamResult = PARAM_ACK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot68(out *jwriter.Writer, in ParamAckTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ParamValue\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.ParamValue))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"ParamID\":"
		out.RawString(prefix)
		out.String(string(in.ParamID))
	}
	{
		const prefix string = ",\"ParamType\":"
		out.RawString(prefix)
		out.Int(int(in.ParamType))
	}
	{
		const prefix string = ",\"ParamResult\":"
		out.RawString(prefix)
		out.Int(int(in.ParamResult))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParamAckTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParamAckTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParamAckTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParamAckTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot68(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot69(in *jlexer.Lexer, out *OpticalFlowRad) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "IntegrationTimeUs":
			out.IntegrationTimeUs = uint32(in.Uint32())
		case "IntegratedX":
			out.IntegratedX = float32(in.Float32())
		case "IntegratedY":
			out.IntegratedY = float32(in.Float32())
		case "IntegratedXgyro":
			out.IntegratedXgyro = float32(in.Float32())
		case "IntegratedYgyro":
			out.IntegratedYgyro = float32(in.Float32())
		case "IntegratedZgyro":
			out.IntegratedZgyro = float32(in.Float32())
		case "TimeDeltaDistanceUs":
			out.TimeDeltaDistanceUs = uint32(in.Uint32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot69(out *jwriter.Writer, in OpticalFlowRad) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"IntegrationTimeUs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.IntegrationTimeUs))
	}
	{
		const prefix string = ",\"IntegratedX\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedX))
	}
	{
		const prefix string = ",\"IntegratedY\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedY))
	}
	{
		const prefix string = ",\"IntegratedXgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedXgyro))
	}
	{
		const prefix string = ",\"IntegratedYgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedYgyro))
	}
	{
		const prefix string = ",\"IntegratedZgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedZgyro))
	}
	{
		const prefix string = ",\"TimeDeltaDistanceUs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeDeltaDistanceUs))
	}
	{
		const prefix string = ",\"Distance\":"
		out.RawString(prefix)
		out.Float32(float32(in.Distance))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	{
		const prefix string = ",\"SensorID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SensorID))
	}
	{
		const prefix string = ",\"Quality\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpticalFlowRad) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpticalFlowRad) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpticalFlowRad) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpticalFlowRad) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot69(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot70(in *jlexer.Lexer, out *OpticalFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "FlowCompMX":
			out.FlowCompMX = float32(in.Float32())
		case "FlowCompMY":
			out.FlowCompMY = float32(in.Float32())
		case "GroundDistance":
			out.GroundDistance = float32(in.Float32())
		case "FlowX":
			out.FlowX = int16(in.Int16())
		case "FlowY":
			out.FlowY = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot70(out *jwriter.Writer, in OpticalFlow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"FlowCompMX\":"
		out.RawString(prefix)
		out.Float32(float32(in.FlowCompMX))
	}
	{
		const prefix string = ",\"FlowCompMY\":"
		out.RawString(prefix)
		out.Float32(float32(in.FlowCompMY))
	}
	{
		const prefix string = ",\"GroundDistance\":"
		out.RawString(prefix)
		out.Float32(float32(in.GroundDistance))
	}
	{
		const prefix string = ",\"FlowX\":"
		out.RawString(prefix)
		out.Int16(int16(in.FlowX))
	}
	{
		const prefix string = ",\"FlowY\":"
		out.RawString(prefix)
		out.Int16(int16(in.FlowY))
	}
	{
		const prefix string = ",\"SensorID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SensorID))
	}
	{
		const prefix string = ",\"Quality\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpticalFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpticalFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpticalFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpticalFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot70(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot71(in *jlexer.Lexer, out *NavControllerOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "NavRoll":
			out.NavRoll = float32(in.Float32())
		case "NavPitch":
			out.NavPitch = float32(in.Float32())
		case "AltError":
			out.AltError = float32(in.Float32())
		case "AspdError":
			out.AspdError = float32(in.Float32())
		case "XtrackError":
			out.XtrackError = float32(in.Float32())
		case "NavBearing":
			out.NavBearing = int16(in.Int16())
		case "TargetBearing":
			out.TargetBearing = int16(in.Int16())
		case "WpDist":
			out.WpDist = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot71(out *jwriter.Writer, in NavControllerOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"NavRoll\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.NavRoll))
	}
	{
		const prefix string = ",\"NavPitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.NavPitch))
	}
	{
		const prefix string = ",\"AltError\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltError))
	}
	{
		const prefix string = ",\"AspdError\":"
		out.RawString(prefix)
		out.Float32(float32(in.AspdError))
	}
	{
		const prefix string = ",\"XtrackError\":"
		out.RawString(prefix)
		out.Float32(float32(in.XtrackError))
	}
	{
		const prefix string = ",\"NavBearing\":"
		out.RawString(prefix)
		out.Int16(int16(in.NavBearing))
	}
	{
		const prefix string = ",\"TargetBearing\":"
		out.RawString(prefix)
		out.Int16(int16(in.TargetBearing))
	}
	{
		const prefix string = ",\"WpDist\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.WpDist))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NavControllerOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NavControllerOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NavControllerOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NavControllerOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot71(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot72(in *jlexer.Lexer, out *NamedValueInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = int32(in.Int32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot72(out *jwriter.Writer, in NamedValueInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Int32(int32(in.Value))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamedValueInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamedValueInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamedValueInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamedValueInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot72(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot73(in *jlexer.Lexer, out *NamedValueFloat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = float32(in.Float32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot73(out *jwriter.Writer, in NamedValueFloat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Float32(float32(in.Value))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamedValueFloat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamedValueFloat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamedValueFloat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamedValueFloat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot73(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot74(in *jlexer.Lexer, out *MissionWritePartialList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot74(out *jwriter.Writer, in MissionWritePartialList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StartIndex\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	{
		const prefix string = ",\"EndIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.EndIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionWritePartialList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionWritePartialList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionWritePartialList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionWritePartialList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot74(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot75(in *jlexer.Lexer, out *MissionSetCurrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot75(out *jwriter.Writer, in MissionSetCurrent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionSetCurrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionSetCurrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionSetCurrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionSetCurrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot75(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot76(in *jlexer.Lexer, out *MissionRequestPartialList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot76(out *jwriter.Writer, in MissionRequestPartialList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StartIndex\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	{
		const prefix string = ",\"EndIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.EndIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestPartialList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestPartialList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestPartialList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestPartialList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot76(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot77(in *jlexer.Lexer, out *MissionRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot77(out *jwriter.Writer, in MissionRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot77(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot78(in *jlexer.Lexer, out *MissionRequestInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot78(out *jwriter.Writer, in MissionRequestInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequestInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequestInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequestInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequestInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot78(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot79(in *jlexer.Lexer, out *MissionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot79(out *jwriter.Writer, in MissionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot79(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot80(in *jlexer.Lexer, out *MissionItemReached) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot80(out *jwriter.Writer, in MissionItemReached) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItemReached) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItemReached) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItemReached) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItemReached) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot80(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot81(in *jlexer.Lexer, out *MissionItemInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = int32(in.Int32())
		case "Y":
			out.Y = int32(in.Int32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot81(out *jwriter.Writer, in MissionItemInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Param1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	{
		const prefix string = ",\"Param2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param2))
	}
	{
		const prefix string = ",\"Param3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param3))
	}
	{
		const prefix string = ",\"Param4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param4))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Int32(int32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Int32(int32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	{
		const prefix string = ",\"Current\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Current))
	}
	{
		const prefix string = ",\"Autocontinue\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItemInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItemInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItemInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItemInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot81(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot82(in *jlexer.Lexer, out *MissionItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Seq":
			out.Seq = uint16(in.Uint16())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot82(out *jwriter.Writer, in MissionItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Param1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	{
		const prefix string = ",\"Param2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param2))
	}
	{
		const prefix string = ",\"Param3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param3))
	}
	{
		const prefix string = ",\"Param4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param4))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Seq))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	{
		const prefix string = ",\"Current\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Current))
	}
	{
		const prefix string = ",\"Autocontinue\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot82(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot83(in *jlexer.Lexer, out *MissionCurrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seq":
			out.Seq = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot83(out *jwriter.Writer, in MissionCurrent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionCurrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionCurrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionCurrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionCurrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot83(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot84(in *jlexer.Lexer, out *MissionCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Count":
			out.Count = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot84(out *jwriter.Writer, in MissionCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Count))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot84(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot85(in *jlexer.Lexer, out *MissionClearAll) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot85(out *jwriter.Writer, in MissionClearAll) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionClearAll) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionClearAll) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionClearAll) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionClearAll) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot85(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot86(in *jlexer.Lexer, out *MissionChanged) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StartIndex":
			out.StartIndex = int16(in.Int16())
		case "EndIndex":
			out.EndIndex = int16(in.Int16())
		case "OriginSysid":
			out.OriginSysid = uint8(in.Uint8())
		case "OriginCompid":
			out.OriginCompid = MAV_COMPONENT(in.Int())
		case "MissionType":
			out.MissionType = MAV_MISSION_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot86(out *jwriter.Writer, in MissionChanged) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StartIndex\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.StartIndex))
	}
	{
		const prefix string = ",\"EndIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.EndIndex))
	}
	{
		const prefix string = ",\"OriginSysid\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.OriginSysid))
	}
	{
		const prefix string = ",\"OriginCompid\":"
		out.RawString(prefix)
		out.Int(int(in.OriginCompid))
	}
	{
		const prefix string = ",\"MissionType\":"
		out.RawString(prefix)
		out.Int(int(in.MissionType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionChanged) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionChanged) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionChanged) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionChanged) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot86(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot87(in *jlexer.Lexer, out *MissionAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Type":
			out.Type = MAV_MISSION_RESULT(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot87(out *jwriter.Writer, in MissionAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MissionAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MissionAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MissionAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MissionAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot87(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot88(in *jlexer.Lexer, out *MessageInterval) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IntervalUs":
			out.IntervalUs = int32(in.Int32())
		case "MessageID":
			out.MessageID = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot88(out *jwriter.Writer, in MessageInterval) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IntervalUs\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.IntervalUs))
	}
	{
		const prefix string = ",\"MessageID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageInterval) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageInterval) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageInterval) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageInterval) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot88(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot89(in *jlexer.Lexer, out *MemoryVect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Address":
			out.Address = uint16(in.Uint16())
		case "Ver":
			out.Ver = uint8(in.Uint8())
		case "Type":
			out.Type = uint8(in.Uint8())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				in.Delim('[')
				if out.Value == nil {
					if !in.IsDelim(']') {
						out.Value = make([]int8, 0, 64)
					} else {
						out.Value = []int8{}
					}
				} else {
					out.Value = (out.Value)[:0]
				}
				for !in.IsDelim(']') {
					var v37 int8
					v37 = int8(in.Int8())
					out.Value = append(out.Value, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot89(out *jwriter.Writer, in MemoryVect) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Address))
	}
	{
		const prefix string = ",\"Ver\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Ver))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Type))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		if in.Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Value {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoryVect) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot89(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryVect) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot89(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryVect) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot89(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryVect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot89(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot90(in *jlexer.Lexer, out *ManualSetpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "ModeSwitch":
			out.ModeSwitch = uint8(in.Uint8())
		case "ManualOverrideSwitch":
			out.ManualOverrideSwitch = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot90(out *jwriter.Writer, in ManualSetpoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"Thrust\":"
		out.RawString(prefix)
		out.Float32(float32(in.Thrust))
	}
	{
		const prefix string = ",\"ModeSwitch\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ModeSwitch))
	}
	{
		const prefix string = ",\"ManualOverrideSwitch\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ManualOverrideSwitch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManualSetpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot90(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManualSetpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot90(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManualSetpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot90(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManualSetpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot90(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot91(in *jlexer.Lexer, out *ManualControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "X":
			out.X = int16(in.Int16())
		case "Y":
			out.Y = int16(in.Int16())
		case "Z":
			out.Z = int16(in.Int16())
		case "R":
			out.R = int16(in.Int16())
		case "Buttons":
			out.Buttons = uint16(in.Uint16())
		case "Target":
			out.Target = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot91(out *jwriter.Writer, in ManualControl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Int16(int16(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Int16(int16(in.Z))
	}
	{
		const prefix string = ",\"R\":"
		out.RawString(prefix)
		out.Int16(int16(in.R))
	}
	{
		const prefix string = ",\"Buttons\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Buttons))
	}
	{
		const prefix string = ",\"Target\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Target))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManualControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot91(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManualControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot91(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManualControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot91(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManualControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot91(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot92(in *jlexer.Lexer, out *MagCalReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Fitness":
			out.Fitness = float32(in.Float32())
		case "OfsX":
			out.OfsX = float32(in.Float32())
		case "OfsY":
			out.OfsY = float32(in.Float32())
		case "OfsZ":
			out.OfsZ = float32(in.Float32())
		case "DiagX":
			out.DiagX = float32(in.Float32())
		case "DiagY":
			out.DiagY = float32(in.Float32())
		case "DiagZ":
			out.DiagZ = float32(in.Float32())
		case "OffdiagX":
			out.OffdiagX = float32(in.Float32())
		case "OffdiagY":
			out.OffdiagY = float32(in.Float32())
		case "OffdiagZ":
			out.OffdiagZ = float32(in.Float32())
		case "CompassID":
			out.CompassID = uint8(in.Uint8())
		case "CalMask":
			out.CalMask = uint8(in.Uint8())
		case "CalStatus":
			out.CalStatus = MAG_CAL_STATUS(in.Int())
		case "Autosaved":
			out.Autosaved = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot92(out *jwriter.Writer, in MagCalReport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Fitness\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Fitness))
	}
	{
		const prefix string = ",\"OfsX\":"
		out.RawString(prefix)
		out.Float32(float32(in.OfsX))
	}
	{
		const prefix string = ",\"OfsY\":"
		out.RawString(prefix)
		out.Float32(float32(in.OfsY))
	}
	{
		const prefix string = ",\"OfsZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.OfsZ))
	}
	{
		const prefix string = ",\"DiagX\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiagX))
	}
	{
		const prefix string = ",\"DiagY\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiagY))
	}
	{
		const prefix string = ",\"DiagZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiagZ))
	}
	{
		const prefix string = ",\"OffdiagX\":"
		out.RawString(prefix)
		out.Float32(float32(in.OffdiagX))
	}
	{
		const prefix string = ",\"OffdiagY\":"
		out.RawString(prefix)
		out.Float32(float32(in.OffdiagY))
	}
	{
		const prefix string = ",\"OffdiagZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.OffdiagZ))
	}
	{
		const prefix string = ",\"CompassID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.CompassID))
	}
	{
		const prefix string = ",\"CalMask\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.CalMask))
	}
	{
		const prefix string = ",\"CalStatus\":"
		out.RawString(prefix)
		out.Int(int(in.CalStatus))
	}
	{
		const prefix string = ",\"Autosaved\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Autosaved))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MagCalReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot92(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MagCalReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot92(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MagCalReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot92(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MagCalReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot92(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot93(in *jlexer.Lexer, out *LogRequestList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Start":
			out.Start = uint16(in.Uint16())
		case "End":
			out.End = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot93(out *jwriter.Writer, in LogRequestList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Start\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Start))
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.End))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot93(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot93(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot93(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot93(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot94(in *jlexer.Lexer, out *LogRequestEnd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot94(out *jwriter.Writer, in LogRequestEnd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestEnd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot94(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestEnd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot94(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestEnd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot94(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestEnd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot94(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot95(in *jlexer.Lexer, out *LogRequestData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ofs":
			out.Ofs = uint32(in.Uint32())
		case "Count":
			out.Count = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot95(out *jwriter.Writer, in LogRequestData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ofs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Ofs))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Count))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ID))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogRequestData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot95(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogRequestData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot95(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogRequestData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot95(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogRequestData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot95(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot96(in *jlexer.Lexer, out *LogErase) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot96(out *jwriter.Writer, in LogErase) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogErase) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot96(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogErase) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot96(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogErase) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot96(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogErase) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot96(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot97(in *jlexer.Lexer, out *LogEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUtc":
			out.TimeUtc = uint32(in.Uint32())
		case "Size":
			out.Size = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "NumLogs":
			out.NumLogs = uint16(in.Uint16())
		case "LastLogNum":
			out.LastLogNum = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot97(out *jwriter.Writer, in LogEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUtc\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeUtc))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Size))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ID))
	}
	{
		const prefix string = ",\"NumLogs\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.NumLogs))
	}
	{
		const prefix string = ",\"LastLogNum\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.LastLogNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot97(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot97(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot97(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot97(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot98(in *jlexer.Lexer, out *LogData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Ofs":
			out.Ofs = uint32(in.Uint32())
		case "ID":
			out.ID = uint16(in.Uint16())
		case "Count":
			out.Count = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot98(out *jwriter.Writer, in LogData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Ofs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Ofs))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ID))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Count))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot98(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot98(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot98(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot98(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot99(in *jlexer.Lexer, out *LocalPositionNedSystemGlobalOffset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot99(out *jwriter.Writer, in LocalPositionNedSystemGlobalOffset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNedSystemGlobalOffset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot99(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNedSystemGlobalOffset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot99(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNedSystemGlobalOffset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot99(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNedSystemGlobalOffset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot99(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot100(in *jlexer.Lexer, out *LocalPositionNedCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Ax":
			out.Ax = float32(in.Float32())
		case "Ay":
			out.Ay = float32(in.Float32())
		case "Az":
			out.Az = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v43 float32
					v43 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstimatorType":
			out.EstimatorType = MAV_ESTIMATOR_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot100(out *jwriter.Writer, in LocalPositionNedCov) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Ax\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ax))
	}
	{
		const prefix string = ",\"Ay\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ay))
	}
	{
		const prefix string = ",\"Az\":"
		out.RawString(prefix)
		out.Float32(float32(in.Az))
	}
	{
		const prefix string = ",\"Covariance\":"
		out.RawString(prefix)
		if in.Covariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Covariance {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v45))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EstimatorType\":"
		out.RawString(prefix)
		out.Int(int(in.EstimatorType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNedCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot100(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNedCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot100(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNedCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot100(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNedCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot100(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot101(in *jlexer.Lexer, out *LocalPositionNed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot101(out *jwriter.Writer, in LocalPositionNed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalPositionNed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot101(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalPositionNed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot101(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalPositionNed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot101(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalPositionNed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot101(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot102(in *jlexer.Lexer, out *LinkNodeStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "TxRate":
			out.TxRate = uint32(in.Uint32())
		case "RxRate":
			out.RxRate = uint32(in.Uint32())
		case "MessagesSent":
			out.MessagesSent = uint32(in.Uint32())
		case "MessagesReceived":
			out.MessagesReceived = uint32(in.Uint32())
		case "MessagesLost":
			out.MessagesLost = uint32(in.Uint32())
		case "RxParseErr":
			out.RxParseErr = uint16(in.Uint16())
		case "TxOverflows":
			out.TxOverflows = uint16(in.Uint16())
		case "RxOverflows":
			out.RxOverflows = uint16(in.Uint16())
		case "TxBuf":
			out.TxBuf = uint8(in.Uint8())
		case "RxBuf":
			out.RxBuf = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot102(out *jwriter.Writer, in LinkNodeStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"TxRate\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TxRate))
	}
	{
		const prefix string = ",\"RxRate\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.RxRate))
	}
	{
		const prefix string = ",\"MessagesSent\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MessagesSent))
	}
	{
		const prefix string = ",\"MessagesReceived\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MessagesReceived))
	}
	{
		const prefix string = ",\"MessagesLost\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MessagesLost))
	}
	{
		const prefix string = ",\"RxParseErr\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.RxParseErr))
	}
	{
		const prefix string = ",\"TxOverflows\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TxOverflows))
	}
	{
		const prefix string = ",\"RxOverflows\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.RxOverflows))
	}
	{
		const prefix string = ",\"TxBuf\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TxBuf))
	}
	{
		const prefix string = ",\"RxBuf\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RxBuf))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LinkNodeStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot102(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LinkNodeStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot102(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LinkNodeStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot102(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LinkNodeStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot102(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot103(in *jlexer.Lexer, out *LandingTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AngleX":
			out.AngleX = float32(in.Float32())
		case "AngleY":
			out.AngleY = float32(in.Float32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "SizeX":
			out.SizeX = float32(in.Float32())
		case "SizeY":
			out.SizeY = float32(in.Float32())
		case "TargetNum":
			out.TargetNum = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot103(out *jwriter.Writer, in LandingTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"AngleX\":"
		out.RawString(prefix)
		out.Float32(float32(in.AngleX))
	}
	{
		const prefix string = ",\"AngleY\":"
		out.RawString(prefix)
		out.Float32(float32(in.AngleY))
	}
	{
		const prefix string = ",\"Distance\":"
		out.RawString(prefix)
		out.Float32(float32(in.Distance))
	}
	{
		const prefix string = ",\"SizeX\":"
		out.RawString(prefix)
		out.Float32(float32(in.SizeX))
	}
	{
		const prefix string = ",\"SizeY\":"
		out.RawString(prefix)
		out.Float32(float32(in.SizeY))
	}
	{
		const prefix string = ",\"TargetNum\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetNum))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LandingTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot103(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LandingTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot103(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LandingTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot103(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LandingTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot103(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot104(in *jlexer.Lexer, out *HomePosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v46 float32
					v46 = float32(in.Float32())
					out.Q = append(out.Q, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ApproachX":
			out.ApproachX = float32(in.Float32())
		case "ApproachY":
			out.ApproachY = float32(in.Float32())
		case "ApproachZ":
			out.ApproachZ = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot104(out *jwriter.Writer, in HomePosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Q {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v48))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ApproachX\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachX))
	}
	{
		const prefix string = ",\"ApproachY\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachY))
	}
	{
		const prefix string = ",\"ApproachZ\":"
		out.RawString(prefix)
		out.Float32(float32(in.ApproachZ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HomePosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot104(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HomePosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot104(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HomePosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot104(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HomePosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot104(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot105(in *jlexer.Lexer, out *HilStateQuaternion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AttitudeQuaternion":
			if in.IsNull() {
				in.Skip()
				out.AttitudeQuaternion = nil
			} else {
				in.Delim('[')
				if out.AttitudeQuaternion == nil {
					if !in.IsDelim(']') {
						out.AttitudeQuaternion = make([]float32, 0, 16)
					} else {
						out.AttitudeQuaternion = []float32{}
					}
				} else {
					out.AttitudeQuaternion = (out.AttitudeQuaternion)[:0]
				}
				for !in.IsDelim(']') {
					var v49 float32
					v49 = float32(in.Float32())
					out.AttitudeQuaternion = append(out.AttitudeQuaternion, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "IndAirspeed":
			out.IndAirspeed = uint16(in.Uint16())
		case "TrueAirspeed":
			out.TrueAirspeed = uint16(in.Uint16())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot105(out *jwriter.Writer, in HilStateQuaternion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"AttitudeQuaternion\":"
		out.RawString(prefix)
		if in.AttitudeQuaternion == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.AttitudeQuaternion {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v51))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vz))
	}
	{
		const prefix string = ",\"IndAirspeed\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.IndAirspeed))
	}
	{
		const prefix string = ",\"TrueAirspeed\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TrueAirspeed))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilStateQuaternion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot105(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilStateQuaternion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot105(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilStateQuaternion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot105(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilStateQuaternion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot105(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot106(in *jlexer.Lexer, out *HilState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "Xacc":
			out.Xacc = int16(in.Int16())
		case "Yacc":
			out.Yacc = int16(in.Int16())
		case "Zacc":
			out.Zacc = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot106(out *jwriter.Writer, in HilState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vz))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Int16(int16(in.Zacc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot106(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot106(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot106(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot106(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot107(in *jlexer.Lexer, out *HilSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Xmag":
			out.Xmag = float32(in.Float32())
		case "Ymag":
			out.Ymag = float32(in.Float32())
		case "Zmag":
			out.Zmag = float32(in.Float32())
		case "AbsPressure":
			out.AbsPressure = float32(in.Float32())
		case "DiffPressure":
			out.DiffPressure = float32(in.Float32())
		case "PressureAlt":
			out.PressureAlt = float32(in.Float32())
		case "Temperature":
			out.Temperature = float32(in.Float32())
		case "FieldsUpdated":
			out.FieldsUpdated = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot107(out *jwriter.Writer, in HilSensor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zmag))
	}
	{
		const prefix string = ",\"AbsPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.AbsPressure))
	}
	{
		const prefix string = ",\"DiffPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiffPressure))
	}
	{
		const prefix string = ",\"PressureAlt\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressureAlt))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.Temperature))
	}
	{
		const prefix string = ",\"FieldsUpdated\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.FieldsUpdated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot107(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot107(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot107(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot107(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot108(in *jlexer.Lexer, out *HilRcInputsRaw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Chan1Raw":
			out.Chan1Raw = uint16(in.Uint16())
		case "Chan2Raw":
			out.Chan2Raw = uint16(in.Uint16())
		case "Chan3Raw":
			out.Chan3Raw = uint16(in.Uint16())
		case "Chan4Raw":
			out.Chan4Raw = uint16(in.Uint16())
		case "Chan5Raw":
			out.Chan5Raw = uint16(in.Uint16())
		case "Chan6Raw":
			out.Chan6Raw = uint16(in.Uint16())
		case "Chan7Raw":
			out.Chan7Raw = uint16(in.Uint16())
		case "Chan8Raw":
			out.Chan8Raw = uint16(in.Uint16())
		case "Chan9Raw":
			out.Chan9Raw = uint16(in.Uint16())
		case "Chan10Raw":
			out.Chan10Raw = uint16(in.Uint16())
		case "Chan11Raw":
			out.Chan11Raw = uint16(in.Uint16())
		case "Chan12Raw":
			out.Chan12Raw = uint16(in.Uint16())
		case "Rssi":
			out.Rssi = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot108(out *jwriter.Writer, in HilRcInputsRaw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Chan1Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan1Raw))
	}
	{
		const prefix string = ",\"Chan2Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan2Raw))
	}
	{
		const prefix string = ",\"Chan3Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan3Raw))
	}
	{
		const prefix string = ",\"Chan4Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan4Raw))
	}
	{
		const prefix string = ",\"Chan5Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan5Raw))
	}
	{
		const prefix string = ",\"Chan6Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan6Raw))
	}
	{
		const prefix string = ",\"Chan7Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan7Raw))
	}
	{
		const prefix string = ",\"Chan8Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan8Raw))
	}
	{
		const prefix string = ",\"Chan9Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan9Raw))
	}
	{
		const prefix string = ",\"Chan10Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan10Raw))
	}
	{
		const prefix string = ",\"Chan11Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan11Raw))
	}
	{
		const prefix string = ",\"Chan12Raw\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Chan12Raw))
	}
	{
		const prefix string = ",\"Rssi\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rssi))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilRcInputsRaw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot108(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilRcInputsRaw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot108(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilRcInputsRaw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot108(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilRcInputsRaw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot108(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot109(in *jlexer.Lexer, out *HilOpticalFlow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "IntegrationTimeUs":
			out.IntegrationTimeUs = uint32(in.Uint32())
		case "IntegratedX":
			out.IntegratedX = float32(in.Float32())
		case "IntegratedY":
			out.IntegratedY = float32(in.Float32())
		case "IntegratedXgyro":
			out.IntegratedXgyro = float32(in.Float32())
		case "IntegratedYgyro":
			out.IntegratedYgyro = float32(in.Float32())
		case "IntegratedZgyro":
			out.IntegratedZgyro = float32(in.Float32())
		case "TimeDeltaDistanceUs":
			out.TimeDeltaDistanceUs = uint32(in.Uint32())
		case "Distance":
			out.Distance = float32(in.Float32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "SensorID":
			out.SensorID = uint8(in.Uint8())
		case "Quality":
			out.Quality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot109(out *jwriter.Writer, in HilOpticalFlow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"IntegrationTimeUs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.IntegrationTimeUs))
	}
	{
		const prefix string = ",\"IntegratedX\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedX))
	}
	{
		const prefix string = ",\"IntegratedY\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedY))
	}
	{
		const prefix string = ",\"IntegratedXgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedXgyro))
	}
	{
		const prefix string = ",\"IntegratedYgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedYgyro))
	}
	{
		const prefix string = ",\"IntegratedZgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntegratedZgyro))
	}
	{
		const prefix string = ",\"TimeDeltaDistanceUs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeDeltaDistanceUs))
	}
	{
		const prefix string = ",\"Distance\":"
		out.RawString(prefix)
		out.Float32(float32(in.Distance))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	{
		const prefix string = ",\"SensorID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SensorID))
	}
	{
		const prefix string = ",\"Quality\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Quality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilOpticalFlow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot109(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilOpticalFlow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot109(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilOpticalFlow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot109(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilOpticalFlow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot109(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot110(in *jlexer.Lexer, out *HilGps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Vn":
			out.Vn = int16(in.Int16())
		case "Ve":
			out.Ve = int16(in.Int16())
		case "Vd":
			out.Vd = int16(in.Int16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = uint8(in.Uint8())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot110(out *jwriter.Writer, in HilGps) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"Eph\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Eph))
	}
	{
		const prefix string = ",\"Epv\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Epv))
	}
	{
		const prefix string = ",\"Vel\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Vel))
	}
	{
		const prefix string = ",\"Vn\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vn))
	}
	{
		const prefix string = ",\"Ve\":"
		out.RawString(prefix)
		out.Int16(int16(in.Ve))
	}
	{
		const prefix string = ",\"Vd\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vd))
	}
	{
		const prefix string = ",\"Cog\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Cog))
	}
	{
		const prefix string = ",\"FixType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.FixType))
	}
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilGps) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilGps) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilGps) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilGps) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot110(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot111(in *jlexer.Lexer, out *HilControls) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "RollAilerons":
			out.RollAilerons = float32(in.Float32())
		case "PitchElevator":
			out.PitchElevator = float32(in.Float32())
		case "YawRudder":
			out.YawRudder = float32(in.Float32())
		case "Throttle":
			out.Throttle = float32(in.Float32())
		case "Aux1":
			out.Aux1 = float32(in.Float32())
		case "Aux2":
			out.Aux2 = float32(in.Float32())
		case "Aux3":
			out.Aux3 = float32(in.Float32())
		case "Aux4":
			out.Aux4 = float32(in.Float32())
		case "Mode":
			out.Mode = MAV_MODE(in.Int())
		case "NavMode":
			out.NavMode = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot111(out *jwriter.Writer, in HilControls) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"RollAilerons\":"
		out.RawString(prefix)
		out.Float32(float32(in.RollAilerons))
	}
	{
		const prefix string = ",\"PitchElevator\":"
		out.RawString(prefix)
		out.Float32(float32(in.PitchElevator))
	}
	{
		const prefix string = ",\"YawRudder\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRudder))
	}
	{
		const prefix string = ",\"Throttle\":"
		out.RawString(prefix)
		out.Float32(float32(in.Throttle))
	}
	{
		const prefix string = ",\"Aux1\":"
		out.RawString(prefix)
		out.Float32(float32(in.Aux1))
	}
	{
		const prefix string = ",\"Aux2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Aux2))
	}
	{
		const prefix string = ",\"Aux3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Aux3))
	}
	{
		const prefix string = ",\"Aux4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Aux4))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.Int(int(in.Mode))
	}
	{
		const prefix string = ",\"NavMode\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.NavMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilControls) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilControls) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilControls) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilControls) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot111(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot112(in *jlexer.Lexer, out *HilActuatorControls) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Flags":
			out.Flags = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v52 float32
					v52 = float32(in.Float32())
					out.Controls = append(out.Controls, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Mode":
			out.Mode = MAV_MODE_FLAG(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot112(out *jwriter.Writer, in HilActuatorControls) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Flags))
	}
	{
		const prefix string = ",\"Controls\":"
		out.RawString(prefix)
		if in.Controls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Controls {
				if v53 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v54))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.Int(int(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HilActuatorControls) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot112(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HilActuatorControls) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot112(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HilActuatorControls) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot112(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HilActuatorControls) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot112(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot113(in *jlexer.Lexer, out *HighresImu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Xacc":
			out.Xacc = float32(in.Float32())
		case "Yacc":
			out.Yacc = float32(in.Float32())
		case "Zacc":
			out.Zacc = float32(in.Float32())
		case "Xgyro":
			out.Xgyro = float32(in.Float32())
		case "Ygyro":
			out.Ygyro = float32(in.Float32())
		case "Zgyro":
			out.Zgyro = float32(in.Float32())
		case "Xmag":
			out.Xmag = float32(in.Float32())
		case "Ymag":
			out.Ymag = float32(in.Float32())
		case "Zmag":
			out.Zmag = float32(in.Float32())
		case "AbsPressure":
			out.AbsPressure = float32(in.Float32())
		case "DiffPressure":
			out.DiffPressure = float32(in.Float32())
		case "PressureAlt":
			out.PressureAlt = float32(in.Float32())
		case "Temperature":
			out.Temperature = float32(in.Float32())
		case "FieldsUpdated":
			out.FieldsUpdated = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot113(out *jwriter.Writer, in HighresImu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Xacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xacc))
	}
	{
		const prefix string = ",\"Yacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yacc))
	}
	{
		const prefix string = ",\"Zacc\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zacc))
	}
	{
		const prefix string = ",\"Xgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xgyro))
	}
	{
		const prefix string = ",\"Ygyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ygyro))
	}
	{
		const prefix string = ",\"Zgyro\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zgyro))
	}
	{
		const prefix string = ",\"Xmag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Xmag))
	}
	{
		const prefix string = ",\"Ymag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ymag))
	}
	{
		const prefix string = ",\"Zmag\":"
		out.RawString(prefix)
		out.Float32(float32(in.Zmag))
	}
	{
		const prefix string = ",\"AbsPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.AbsPressure))
	}
	{
		const prefix string = ",\"DiffPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.DiffPressure))
	}
	{
		const prefix string = ",\"PressureAlt\":"
		out.RawString(prefix)
		out.Float32(float32(in.PressureAlt))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.Temperature))
	}
	{
		const prefix string = ",\"FieldsUpdated\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.FieldsUpdated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighresImu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot113(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighresImu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot113(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighresImu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot113(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighresImu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot113(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot114(in *jlexer.Lexer, out *HighLatency2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint32(in.Uint32())
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "CustomMode":
			out.CustomMode = uint16(in.Uint16())
		case "Altitude":
			out.Altitude = int16(in.Int16())
		case "TargetAltitude":
			out.TargetAltitude = int16(in.Int16())
		case "TargetDistance":
			out.TargetDistance = uint16(in.Uint16())
		case "WpNum":
			out.WpNum = uint16(in.Uint16())
		case "FailureFlags":
			out.FailureFlags = HL_FAILURE_FLAG(in.Int())
		case "Type":
			out.Type = MAV_TYPE(in.Int())
		case "Autopilot":
			out.Autopilot = MAV_AUTOPILOT(in.Int())
		case "Heading":
			out.Heading = uint8(in.Uint8())
		case "TargetHeading":
			out.TargetHeading = uint8(in.Uint8())
		case "Throttle":
			out.Throttle = uint8(in.Uint8())
		case "Airspeed":
			out.Airspeed = uint8(in.Uint8())
		case "AirspeedSp":
			out.AirspeedSp = uint8(in.Uint8())
		case "Groundspeed":
			out.Groundspeed = uint8(in.Uint8())
		case "Windspeed":
			out.Windspeed = uint8(in.Uint8())
		case "WindHeading":
			out.WindHeading = uint8(in.Uint8())
		case "Eph":
			out.Eph = uint8(in.Uint8())
		case "Epv":
			out.Epv = uint8(in.Uint8())
		case "TemperatureAir":
			out.TemperatureAir = int8(in.Int8())
		case "ClimbRate":
			out.ClimbRate = int8(in.Int8())
		case "Battery":
			out.Battery = int8(in.Int8())
		case "Custom0":
			out.Custom0 = int8(in.Int8())
		case "Custom1":
			out.Custom1 = int8(in.Int8())
		case "Custom2":
			out.Custom2 = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot114(out *jwriter.Writer, in HighLatency2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Timestamp))
	}
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"CustomMode\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.CustomMode))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int16(int16(in.Altitude))
	}
	{
		const prefix string = ",\"TargetAltitude\":"
		out.RawString(prefix)
		out.Int16(int16(in.TargetAltitude))
	}
	{
		const prefix string = ",\"TargetDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TargetDistance))
	}
	{
		const prefix string = ",\"WpNum\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.WpNum))
	}
	{
		const prefix string = ",\"FailureFlags\":"
		out.RawString(prefix)
		out.Int(int(in.FailureFlags))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"Autopilot\":"
		out.RawString(prefix)
		out.Int(int(in.Autopilot))
	}
	{
		const prefix string = ",\"Heading\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Heading))
	}
	{
		const prefix string = ",\"TargetHeading\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetHeading))
	}
	{
		const prefix string = ",\"Throttle\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Throttle))
	}
	{
		const prefix string = ",\"Airspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Airspeed))
	}
	{
		const prefix string = ",\"AirspeedSp\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.AirspeedSp))
	}
	{
		const prefix string = ",\"Groundspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Groundspeed))
	}
	{
		const prefix string = ",\"Windspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Windspeed))
	}
	{
		const prefix string = ",\"WindHeading\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.WindHeading))
	}
	{
		const prefix string = ",\"Eph\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Eph))
	}
	{
		const prefix string = ",\"Epv\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Epv))
	}
	{
		const prefix string = ",\"TemperatureAir\":"
		out.RawString(prefix)
		out.Int8(int8(in.TemperatureAir))
	}
	{
		const prefix string = ",\"ClimbRate\":"
		out.RawString(prefix)
		out.Int8(int8(in.ClimbRate))
	}
	{
		const prefix string = ",\"Battery\":"
		out.RawString(prefix)
		out.Int8(int8(in.Battery))
	}
	{
		const prefix string = ",\"Custom0\":"
		out.RawString(prefix)
		out.Int8(int8(in.Custom0))
	}
	{
		const prefix string = ",\"Custom1\":"
		out.RawString(prefix)
		out.Int8(int8(in.Custom1))
	}
	{
		const prefix string = ",\"Custom2\":"
		out.RawString(prefix)
		out.Int8(int8(in.Custom2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighLatency2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot114(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighLatency2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot114(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighLatency2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot114(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighLatency2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot114(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot115(in *jlexer.Lexer, out *HighLatency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Roll":
			out.Roll = int16(in.Int16())
		case "Pitch":
			out.Pitch = int16(in.Int16())
		case "Heading":
			out.Heading = uint16(in.Uint16())
		case "HeadingSp":
			out.HeadingSp = int16(in.Int16())
		case "AltitudeAmsl":
			out.AltitudeAmsl = int16(in.Int16())
		case "AltitudeSp":
			out.AltitudeSp = int16(in.Int16())
		case "WpDistance":
			out.WpDistance = uint16(in.Uint16())
		case "BaseMode":
			out.BaseMode = MAV_MODE_FLAG(in.Int())
		case "LandedState":
			out.LandedState = MAV_LANDED_STATE(in.Int())
		case "Throttle":
			out.Throttle = int8(in.Int8())
		case "Airspeed":
			out.Airspeed = uint8(in.Uint8())
		case "AirspeedSp":
			out.AirspeedSp = uint8(in.Uint8())
		case "Groundspeed":
			out.Groundspeed = uint8(in.Uint8())
		case "ClimbRate":
			out.ClimbRate = int8(in.Int8())
		case "GpsNsat":
			out.GpsNsat = uint8(in.Uint8())
		case "GpsFixType":
			out.GpsFixType = GPS_FIX_TYPE(in.Int())
		case "BatteryRemaining":
			out.BatteryRemaining = uint8(in.Uint8())
		case "Temperature":
			out.Temperature = int8(in.Int8())
		case "TemperatureAir":
			out.TemperatureAir = int8(in.Int8())
		case "Failsafe":
			out.Failsafe = uint8(in.Uint8())
		case "WpNum":
			out.WpNum = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot115(out *jwriter.Writer, in HighLatency) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CustomMode\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Int16(int16(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Int16(int16(in.Pitch))
	}
	{
		const prefix string = ",\"Heading\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Heading))
	}
	{
		const prefix string = ",\"HeadingSp\":"
		out.RawString(prefix)
		out.Int16(int16(in.HeadingSp))
	}
	{
		const prefix string = ",\"AltitudeAmsl\":"
		out.RawString(prefix)
		out.Int16(int16(in.AltitudeAmsl))
	}
	{
		const prefix string = ",\"AltitudeSp\":"
		out.RawString(prefix)
		out.Int16(int16(in.AltitudeSp))
	}
	{
		const prefix string = ",\"WpDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.WpDistance))
	}
	{
		const prefix string = ",\"BaseMode\":"
		out.RawString(prefix)
		out.Int(int(in.BaseMode))
	}
	{
		const prefix string = ",\"LandedState\":"
		out.RawString(prefix)
		out.Int(int(in.LandedState))
	}
	{
		const prefix string = ",\"Throttle\":"
		out.RawString(prefix)
		out.Int8(int8(in.Throttle))
	}
	{
		const prefix string = ",\"Airspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Airspeed))
	}
	{
		const prefix string = ",\"AirspeedSp\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.AirspeedSp))
	}
	{
		const prefix string = ",\"Groundspeed\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Groundspeed))
	}
	{
		const prefix string = ",\"ClimbRate\":"
		out.RawString(prefix)
		out.Int8(int8(in.ClimbRate))
	}
	{
		const prefix string = ",\"GpsNsat\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GpsNsat))
	}
	{
		const prefix string = ",\"GpsFixType\":"
		out.RawString(prefix)
		out.Int(int(in.GpsFixType))
	}
	{
		const prefix string = ",\"BatteryRemaining\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.BatteryRemaining))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int8(int8(in.Temperature))
	}
	{
		const prefix string = ",\"TemperatureAir\":"
		out.RawString(prefix)
		out.Int8(int8(in.TemperatureAir))
	}
	{
		const prefix string = ",\"Failsafe\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Failsafe))
	}
	{
		const prefix string = ",\"WpNum\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.WpNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HighLatency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot115(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HighLatency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot115(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HighLatency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot115(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HighLatency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot115(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot116(in *jlexer.Lexer, out *Heartbeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CustomMode":
			out.CustomMode = uint32(in.Uint32())
		case "Type":
			out.Type = MAV_TYPE(in.Int())
		case "Autopilot":
			out.Autopilot = MAV_AUTOPILOT(in.Int())
		case "BaseMode":
			out.BaseMode = MAV_MODE_FLAG(in.Int())
		case "SystemStatus":
			out.SystemStatus = MAV_STATE(in.Int())
		case "MavlinkVersion":
			out.MavlinkVersion = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot116(out *jwriter.Writer, in Heartbeat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CustomMode\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CustomMode))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"Autopilot\":"
		out.RawString(prefix)
		out.Int(int(in.Autopilot))
	}
	{
		const prefix string = ",\"BaseMode\":"
		out.RawString(prefix)
		out.Int(int(in.BaseMode))
	}
	{
		const prefix string = ",\"SystemStatus\":"
		out.RawString(prefix)
		out.Int(int(in.SystemStatus))
	}
	{
		const prefix string = ",\"MavlinkVersion\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.MavlinkVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Heartbeat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot116(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Heartbeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot116(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Heartbeat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot116(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Heartbeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot116(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot117(in *jlexer.Lexer, out *GpsStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		case "SatellitePrn":
			if in.IsNull() {
				in.Skip()
				out.SatellitePrn = nil
			} else {
				out.SatellitePrn = in.Bytes()
			}
		case "SatelliteUsed":
			if in.IsNull() {
				in.Skip()
				out.SatelliteUsed = nil
			} else {
				out.SatelliteUsed = in.Bytes()
			}
		case "SatelliteElevation":
			if in.IsNull() {
				in.Skip()
				out.SatelliteElevation = nil
			} else {
				out.SatelliteElevation = in.Bytes()
			}
		case "SatelliteAzimuth":
			if in.IsNull() {
				in.Skip()
				out.SatelliteAzimuth = nil
			} else {
				out.SatelliteAzimuth = in.Bytes()
			}
		case "SatelliteSnr":
			if in.IsNull() {
				in.Skip()
				out.SatelliteSnr = nil
			} else {
				out.SatelliteSnr = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot117(out *jwriter.Writer, in GpsStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.SatellitesVisible))
	}
	{
		const prefix string = ",\"SatellitePrn\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatellitePrn)
	}
	{
		const prefix string = ",\"SatelliteUsed\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatelliteUsed)
	}
	{
		const prefix string = ",\"SatelliteElevation\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatelliteElevation)
	}
	{
		const prefix string = ",\"SatelliteAzimuth\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatelliteAzimuth)
	}
	{
		const prefix string = ",\"SatelliteSnr\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SatelliteSnr)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot117(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot117(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot117(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot117(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot118(in *jlexer.Lexer, out *GpsRtk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeLastBaselineMs":
			out.TimeLastBaselineMs = uint32(in.Uint32())
		case "Tow":
			out.Tow = uint32(in.Uint32())
		case "BaselineAMm":
			out.BaselineAMm = int32(in.Int32())
		case "BaselineBMm":
			out.BaselineBMm = int32(in.Int32())
		case "BaselineCMm":
			out.BaselineCMm = int32(in.Int32())
		case "Accuracy":
			out.Accuracy = uint32(in.Uint32())
		case "IarNumHypotheses":
			out.IarNumHypotheses = int32(in.Int32())
		case "Wn":
			out.Wn = uint16(in.Uint16())
		case "RtkReceiverID":
			out.RtkReceiverID = uint8(in.Uint8())
		case "RtkHealth":
			out.RtkHealth = uint8(in.Uint8())
		case "RtkRate":
			out.RtkRate = uint8(in.Uint8())
		case "Nsats":
			out.Nsats = uint8(in.Uint8())
		case "BaselineCoordsType":
			out.BaselineCoordsType = RTK_BASELINE_COORDINATE_SYSTEM(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot118(out *jwriter.Writer, in GpsRtk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeLastBaselineMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeLastBaselineMs))
	}
	{
		const prefix string = ",\"Tow\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Tow))
	}
	{
		const prefix string = ",\"BaselineAMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineAMm))
	}
	{
		const prefix string = ",\"BaselineBMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineBMm))
	}
	{
		const prefix string = ",\"BaselineCMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineCMm))
	}
	{
		const prefix string = ",\"Accuracy\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Accuracy))
	}
	{
		const prefix string = ",\"IarNumHypotheses\":"
		out.RawString(prefix)
		out.Int32(int32(in.IarNumHypotheses))
	}
	{
		const prefix string = ",\"Wn\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Wn))
	}
	{
		const prefix string = ",\"RtkReceiverID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkReceiverID))
	}
	{
		const prefix string = ",\"RtkHealth\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkHealth))
	}
	{
		const prefix string = ",\"RtkRate\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkRate))
	}
	{
		const prefix string = ",\"Nsats\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Nsats))
	}
	{
		const prefix string = ",\"BaselineCoordsType\":"
		out.RawString(prefix)
		out.Int(int(in.BaselineCoordsType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRtk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot118(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRtk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot118(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRtk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot118(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRtk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot118(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot119(in *jlexer.Lexer, out *GpsRtcmData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Flags":
			out.Flags = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot119(out *jwriter.Writer, in GpsRtcmData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.Flags))
	}
	{
		const prefix string = ",\"Len\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Len))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRtcmData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot119(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRtcmData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot119(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRtcmData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot119(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRtcmData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot119(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot120(in *jlexer.Lexer, out *GpsRawInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = GPS_FIX_TYPE(in.Int())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot120(out *jwriter.Writer, in GpsRawInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"Eph\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Eph))
	}
	{
		const prefix string = ",\"Epv\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Epv))
	}
	{
		const prefix string = ",\"Vel\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Vel))
	}
	{
		const prefix string = ",\"Cog\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Cog))
	}
	{
		const prefix string = ",\"FixType\":"
		out.RawString(prefix)
		out.Int(int(in.FixType))
	}
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsRawInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot120(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsRawInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot120(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsRawInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot120(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsRawInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot120(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot121(in *jlexer.Lexer, out *GpsInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "TimeWeekMs":
			out.TimeWeekMs = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Hdop":
			out.Hdop = float32(in.Float32())
		case "Vdop":
			out.Vdop = float32(in.Float32())
		case "Vn":
			out.Vn = float32(in.Float32())
		case "Ve":
			out.Ve = float32(in.Float32())
		case "Vd":
			out.Vd = float32(in.Float32())
		case "SpeedAccuracy":
			out.SpeedAccuracy = float32(in.Float32())
		case "HorizAccuracy":
			out.HorizAccuracy = float32(in.Float32())
		case "VertAccuracy":
			out.VertAccuracy = float32(in.Float32())
		case "IgnoreFlags":
			out.IgnoreFlags = GPS_INPUT_IGNORE_FLAGS(in.Int())
		case "TimeWeek":
			out.TimeWeek = uint16(in.Uint16())
		case "GpsID":
			out.GpsID = uint8(in.Uint8())
		case "FixType":
			out.FixType = uint8(in.Uint8())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot121(out *jwriter.Writer, in GpsInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"TimeWeekMs\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeWeekMs))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Hdop\":"
		out.RawString(prefix)
		out.Float32(float32(in.Hdop))
	}
	{
		const prefix string = ",\"Vdop\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vdop))
	}
	{
		const prefix string = ",\"Vn\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vn))
	}
	{
		const prefix string = ",\"Ve\":"
		out.RawString(prefix)
		out.Float32(float32(in.Ve))
	}
	{
		const prefix string = ",\"Vd\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vd))
	}
	{
		const prefix string = ",\"SpeedAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.SpeedAccuracy))
	}
	{
		const prefix string = ",\"HorizAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.HorizAccuracy))
	}
	{
		const prefix string = ",\"VertAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.VertAccuracy))
	}
	{
		const prefix string = ",\"IgnoreFlags\":"
		out.RawString(prefix)
		out.Int(int(in.IgnoreFlags))
	}
	{
		const prefix string = ",\"TimeWeek\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.TimeWeek))
	}
	{
		const prefix string = ",\"GpsID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GpsID))
	}
	{
		const prefix string = ",\"FixType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.FixType))
	}
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SatellitesVisible))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot121(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot121(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot121(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot121(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot122(in *jlexer.Lexer, out *GpsInjectData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Len":
			out.Len = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot122(out *jwriter.Writer, in GpsInjectData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Len\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Len))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsInjectData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot122(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsInjectData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot122(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsInjectData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot122(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsInjectData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot122(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot123(in *jlexer.Lexer, out *GpsGlobalOrigin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Latitude":
			out.Latitude = int32(in.Int32())
		case "Longitude":
			out.Longitude = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot123(out *jwriter.Writer, in GpsGlobalOrigin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Longitude))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GpsGlobalOrigin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot123(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GpsGlobalOrigin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot123(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GpsGlobalOrigin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot123(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GpsGlobalOrigin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot123(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot124(in *jlexer.Lexer, out *Gps2Rtk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeLastBaselineMs":
			out.TimeLastBaselineMs = uint32(in.Uint32())
		case "Tow":
			out.Tow = uint32(in.Uint32())
		case "BaselineAMm":
			out.BaselineAMm = int32(in.Int32())
		case "BaselineBMm":
			out.BaselineBMm = int32(in.Int32())
		case "BaselineCMm":
			out.BaselineCMm = int32(in.Int32())
		case "Accuracy":
			out.Accuracy = uint32(in.Uint32())
		case "IarNumHypotheses":
			out.IarNumHypotheses = int32(in.Int32())
		case "Wn":
			out.Wn = uint16(in.Uint16())
		case "RtkReceiverID":
			out.RtkReceiverID = uint8(in.Uint8())
		case "RtkHealth":
			out.RtkHealth = uint8(in.Uint8())
		case "RtkRate":
			out.RtkRate = uint8(in.Uint8())
		case "Nsats":
			out.Nsats = uint8(in.Uint8())
		case "BaselineCoordsType":
			out.BaselineCoordsType = RTK_BASELINE_COORDINATE_SYSTEM(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot124(out *jwriter.Writer, in Gps2Rtk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeLastBaselineMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeLastBaselineMs))
	}
	{
		const prefix string = ",\"Tow\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Tow))
	}
	{
		const prefix string = ",\"BaselineAMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineAMm))
	}
	{
		const prefix string = ",\"BaselineBMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineBMm))
	}
	{
		const prefix string = ",\"BaselineCMm\":"
		out.RawString(prefix)
		out.Int32(int32(in.BaselineCMm))
	}
	{
		const prefix string = ",\"Accuracy\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Accuracy))
	}
	{
		const prefix string = ",\"IarNumHypotheses\":"
		out.RawString(prefix)
		out.Int32(int32(in.IarNumHypotheses))
	}
	{
		const prefix string = ",\"Wn\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Wn))
	}
	{
		const prefix string = ",\"RtkReceiverID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkReceiverID))
	}
	{
		const prefix string = ",\"RtkHealth\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkHealth))
	}
	{
		const prefix string = ",\"RtkRate\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.RtkRate))
	}
	{
		const prefix string = ",\"Nsats\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Nsats))
	}
	{
		const prefix string = ",\"BaselineCoordsType\":"
		out.RawString(prefix)
		out.Int(int(in.BaselineCoordsType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gps2Rtk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot124(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gps2Rtk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot124(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gps2Rtk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot124(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gps2Rtk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot124(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot125(in *jlexer.Lexer, out *Gps2Raw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "DgpsAge":
			out.DgpsAge = uint32(in.Uint32())
		case "Eph":
			out.Eph = uint16(in.Uint16())
		case "Epv":
			out.Epv = uint16(in.Uint16())
		case "Vel":
			out.Vel = uint16(in.Uint16())
		case "Cog":
			out.Cog = uint16(in.Uint16())
		case "FixType":
			out.FixType = GPS_FIX_TYPE(in.Int())
		case "SatellitesVisible":
			out.SatellitesVisible = uint8(in.Uint8())
		case "DgpsNumch":
			out.DgpsNumch = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot125(out *jwriter.Writer, in Gps2Raw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"DgpsAge\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.DgpsAge))
	}
	{
		const prefix string = ",\"Eph\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Eph))
	}
	{
		const prefix string = ",\"Epv\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Epv))
	}
	{
		const prefix string = ",\"Vel\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Vel))
	}
	{
		const prefix string = ",\"Cog\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Cog))
	}
	{
		const prefix string = ",\"FixType\":"
		out.RawString(prefix)
		out.Int(int(in.FixType))
	}
	{
		const prefix string = ",\"SatellitesVisible\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.SatellitesVisible))
	}
	{
		const prefix string = ",\"DgpsNumch\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.DgpsNumch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gps2Raw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot125(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gps2Raw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot125(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gps2Raw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot125(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gps2Raw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot125(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot126(in *jlexer.Lexer, out *GlobalVisionPositionEstimate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Usec":
			out.Usec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot126(out *jwriter.Writer, in GlobalVisionPositionEstimate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Usec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Usec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalVisionPositionEstimate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot126(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalVisionPositionEstimate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot126(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalVisionPositionEstimate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot126(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalVisionPositionEstimate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot126(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot127(in *jlexer.Lexer, out *GlobalPositionIntCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "RelativeAlt":
			out.RelativeAlt = int32(in.Int32())
		case "Vx":
			out.Vx = float32(in.Float32())
		case "Vy":
			out.Vy = float32(in.Float32())
		case "Vz":
			out.Vz = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v76 float32
					v76 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstimatorType":
			out.EstimatorType = MAV_ESTIMATOR_TYPE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot127(out *jwriter.Writer, in GlobalPositionIntCov) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"RelativeAlt\":"
		out.RawString(prefix)
		out.Int32(int32(in.RelativeAlt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Float32(float32(in.Vz))
	}
	{
		const prefix string = ",\"Covariance\":"
		out.RawString(prefix)
		if in.Covariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Covariance {
				if v77 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v78))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EstimatorType\":"
		out.RawString(prefix)
		out.Int(int(in.EstimatorType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPositionIntCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot127(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPositionIntCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot127(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPositionIntCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot127(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPositionIntCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot127(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot128(in *jlexer.Lexer, out *GlobalPositionInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = int32(in.Int32())
		case "RelativeAlt":
			out.RelativeAlt = int32(in.Int32())
		case "Vx":
			out.Vx = int16(in.Int16())
		case "Vy":
			out.Vy = int16(in.Int16())
		case "Vz":
			out.Vz = int16(in.Int16())
		case "Hdg":
			out.Hdg = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot128(out *jwriter.Writer, in GlobalPositionInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Int32(int32(in.Alt))
	}
	{
		const prefix string = ",\"RelativeAlt\":"
		out.RawString(prefix)
		out.Int32(int32(in.RelativeAlt))
	}
	{
		const prefix string = ",\"Vx\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vx))
	}
	{
		const prefix string = ",\"Vy\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vy))
	}
	{
		const prefix string = ",\"Vz\":"
		out.RawString(prefix)
		out.Int16(int16(in.Vz))
	}
	{
		const prefix string = ",\"Hdg\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Hdg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalPositionInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot128(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalPositionInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot128(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalPositionInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot128(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalPositionInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot128(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot129(in *jlexer.Lexer, out *FollowTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "CustomState":
			out.CustomState = uint64(in.Uint64())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Alt":
			out.Alt = float32(in.Float32())
		case "Vel":
			if in.IsNull() {
				in.Skip()
				out.Vel = nil
			} else {
				in.Delim('[')
				if out.Vel == nil {
					if !in.IsDelim(']') {
						out.Vel = make([]float32, 0, 16)
					} else {
						out.Vel = []float32{}
					}
				} else {
					out.Vel = (out.Vel)[:0]
				}
				for !in.IsDelim(']') {
					var v79 float32
					v79 = float32(in.Float32())
					out.Vel = append(out.Vel, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Acc":
			if in.IsNull() {
				in.Skip()
				out.Acc = nil
			} else {
				in.Delim('[')
				if out.Acc == nil {
					if !in.IsDelim(']') {
						out.Acc = make([]float32, 0, 16)
					} else {
						out.Acc = []float32{}
					}
				} else {
					out.Acc = (out.Acc)[:0]
				}
				for !in.IsDelim(']') {
					var v80 float32
					v80 = float32(in.Float32())
					out.Acc = append(out.Acc, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AttitudeQ":
			if in.IsNull() {
				in.Skip()
				out.AttitudeQ = nil
			} else {
				in.Delim('[')
				if out.AttitudeQ == nil {
					if !in.IsDelim(']') {
						out.AttitudeQ = make([]float32, 0, 16)
					} else {
						out.AttitudeQ = []float32{}
					}
				} else {
					out.AttitudeQ = (out.AttitudeQ)[:0]
				}
				for !in.IsDelim(']') {
					var v81 float32
					v81 = float32(in.Float32())
					out.AttitudeQ = append(out.AttitudeQ, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rates":
			if in.IsNull() {
				in.Skip()
				out.Rates = nil
			} else {
				in.Delim('[')
				if out.Rates == nil {
					if !in.IsDelim(']') {
						out.Rates = make([]float32, 0, 16)
					} else {
						out.Rates = []float32{}
					}
				} else {
					out.Rates = (out.Rates)[:0]
				}
				for !in.IsDelim(']') {
					var v82 float32
					v82 = float32(in.Float32())
					out.Rates = append(out.Rates, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PositionCov":
			if in.IsNull() {
				in.Skip()
				out.PositionCov = nil
			} else {
				in.Delim('[')
				if out.PositionCov == nil {
					if !in.IsDelim(']') {
						out.PositionCov = make([]float32, 0, 16)
					} else {
						out.PositionCov = []float32{}
					}
				} else {
					out.PositionCov = (out.PositionCov)[:0]
				}
				for !in.IsDelim(']') {
					var v83 float32
					v83 = float32(in.Float32())
					out.PositionCov = append(out.PositionCov, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EstCapabilities":
			out.EstCapabilities = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot129(out *jwriter.Writer, in FollowTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"CustomState\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CustomState))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Alt\":"
		out.RawString(prefix)
		out.Float32(float32(in.Alt))
	}
	{
		const prefix string = ",\"Vel\":"
		out.RawString(prefix)
		if in.Vel == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.Vel {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v85))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Acc\":"
		out.RawString(prefix)
		if in.Acc == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.Acc {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v87))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AttitudeQ\":"
		out.RawString(prefix)
		if in.AttitudeQ == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v88, v89 := range in.AttitudeQ {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v89))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Rates\":"
		out.RawString(prefix)
		if in.Rates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v90, v91 := range in.Rates {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v91))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PositionCov\":"
		out.RawString(prefix)
		if in.PositionCov == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.PositionCov {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v93))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EstCapabilities\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.EstCapabilities))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FollowTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot129(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FollowTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot129(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FollowTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot129(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FollowTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot129(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot130(in *jlexer.Lexer, out *FlexifunctionSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot130(out *jwriter.Writer, in FlexifunctionSet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlexifunctionSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot130(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlexifunctionSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot130(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlexifunctionSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot130(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlexifunctionSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot130(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot131(in *jlexer.Lexer, out *FlexifunctionReadReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ReadReqType":
			out.ReadReqType = int16(in.Int16())
		case "DataIndex":
			out.DataIndex = int16(in.Int16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot131(out *jwriter.Writer, in FlexifunctionReadReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ReadReqType\":"
		out.RawString(prefix[1:])
		out.Int16(int16(in.ReadReqType))
	}
	{
		const prefix string = ",\"DataIndex\":"
		out.RawString(prefix)
		out.Int16(int16(in.DataIndex))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlexifunctionReadReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot131(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlexifunctionReadReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot131(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlexifunctionReadReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot131(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlexifunctionReadReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot131(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot132(in *jlexer.Lexer, out *FlexifunctionDirectoryAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Result":
			out.Result = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "DirectoryType":
			out.DirectoryType = uint8(in.Uint8())
		case "StartIndex":
			out.StartIndex = uint8(in.Uint8())
		case "Count":
			out.Count = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot132(out *jwriter.Writer, in FlexifunctionDirectoryAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Result))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"DirectoryType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.DirectoryType))
	}
	{
		const prefix string = ",\"StartIndex\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.StartIndex))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlexifunctionDirectoryAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot132(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlexifunctionDirectoryAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot132(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlexifunctionDirectoryAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot132(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlexifunctionDirectoryAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot132(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot133(in *jlexer.Lexer, out *FlexifunctionDirectory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "DirectoryType":
			out.DirectoryType = uint8(in.Uint8())
		case "StartIndex":
			out.StartIndex = uint8(in.Uint8())
		case "Count":
			out.Count = uint8(in.Uint8())
		case "DirectoryData":
			if in.IsNull() {
				in.Skip()
				out.DirectoryData = nil
			} else {
				in.Delim('[')
				if out.DirectoryData == nil {
					if !in.IsDelim(']') {
						out.DirectoryData = make([]int8, 0, 64)
					} else {
						out.DirectoryData = []int8{}
					}
				} else {
					out.DirectoryData = (out.DirectoryData)[:0]
				}
				for !in.IsDelim(']') {
					var v94 int8
					v94 = int8(in.Int8())
					out.DirectoryData = append(out.DirectoryData, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot133(out *jwriter.Writer, in FlexifunctionDirectory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"DirectoryType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.DirectoryType))
	}
	{
		const prefix string = ",\"StartIndex\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.StartIndex))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Count))
	}
	{
		const prefix string = ",\"DirectoryData\":"
		out.RawString(prefix)
		if in.DirectoryData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.DirectoryData {
				if v95 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v96))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlexifunctionDirectory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot133(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlexifunctionDirectory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot133(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlexifunctionDirectory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot133(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlexifunctionDirectory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot133(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot134(in *jlexer.Lexer, out *FlexifunctionCommandAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CommandType":
			out.CommandType = uint16(in.Uint16())
		case "Result":
			out.Result = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot134(out *jwriter.Writer, in FlexifunctionCommandAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CommandType\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.CommandType))
	}
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlexifunctionCommandAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot134(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlexifunctionCommandAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot134(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlexifunctionCommandAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot134(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlexifunctionCommandAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot134(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot135(in *jlexer.Lexer, out *FlexifunctionCommand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "CommandType":
			out.CommandType = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot135(out *jwriter.Writer, in FlexifunctionCommand) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"CommandType\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.CommandType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlexifunctionCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot135(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlexifunctionCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot135(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlexifunctionCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot135(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlexifunctionCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot135(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot136(in *jlexer.Lexer, out *FlexifunctionBufferFunctionAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FuncIndex":
			out.FuncIndex = uint16(in.Uint16())
		case "Result":
			out.Result = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot136(out *jwriter.Writer, in FlexifunctionBufferFunctionAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FuncIndex\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.FuncIndex))
	}
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Result))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlexifunctionBufferFunctionAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot136(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlexifunctionBufferFunctionAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot136(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlexifunctionBufferFunctionAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot136(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlexifunctionBufferFunctionAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot136(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot137(in *jlexer.Lexer, out *FlexifunctionBufferFunction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FuncIndex":
			out.FuncIndex = uint16(in.Uint16())
		case "FuncCount":
			out.FuncCount = uint16(in.Uint16())
		case "DataAddress":
			out.DataAddress = uint16(in.Uint16())
		case "DataSize":
			out.DataSize = uint16(in.Uint16())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]int8, 0, 64)
					} else {
						out.Data = []int8{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v97 int8
					v97 = int8(in.Int8())
					out.Data = append(out.Data, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot137(out *jwriter.Writer, in FlexifunctionBufferFunction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FuncIndex\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.FuncIndex))
	}
	{
		const prefix string = ",\"FuncCount\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.FuncCount))
	}
	{
		const prefix string = ",\"DataAddress\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DataAddress))
	}
	{
		const prefix string = ",\"DataSize\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DataSize))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v98, v99 := range in.Data {
				if v98 > 0 {
					out.RawByte(',')
				}
				out.Int8(int8(v99))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlexifunctionBufferFunction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot137(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlexifunctionBufferFunction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot137(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlexifunctionBufferFunction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot137(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlexifunctionBufferFunction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot137(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot138(in *jlexer.Lexer, out *FileTransferProtocol) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetNetwork":
			out.TargetNetwork = uint8(in.Uint8())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot138(out *jwriter.Writer, in FileTransferProtocol) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetNetwork\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetNetwork))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileTransferProtocol) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot138(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileTransferProtocol) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot138(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileTransferProtocol) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot138(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileTransferProtocol) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot138(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot139(in *jlexer.Lexer, out *FenceStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BreachTime":
			out.BreachTime = uint32(in.Uint32())
		case "BreachCount":
			out.BreachCount = uint16(in.Uint16())
		case "BreachStatus":
			out.BreachStatus = uint8(in.Uint8())
		case "BreachType":
			out.BreachType = FENCE_BREACH(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot139(out *jwriter.Writer, in FenceStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BreachTime\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.BreachTime))
	}
	{
		const prefix string = ",\"BreachCount\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.BreachCount))
	}
	{
		const prefix string = ",\"BreachStatus\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.BreachStatus))
	}
	{
		const prefix string = ",\"BreachType\":"
		out.RawString(prefix)
		out.Int(int(in.BreachType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FenceStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot139(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FenceStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot139(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FenceStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot139(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FenceStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot139(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot140(in *jlexer.Lexer, out *ExtendedSysState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VtolState":
			out.VtolState = MAV_VTOL_STATE(in.Int())
		case "LandedState":
			out.LandedState = MAV_LANDED_STATE(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot140(out *jwriter.Writer, in ExtendedSysState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VtolState\":"
		out.RawString(prefix[1:])
		out.Int(int(in.VtolState))
	}
	{
		const prefix string = ",\"LandedState\":"
		out.RawString(prefix)
		out.Int(int(in.LandedState))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtendedSysState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot140(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtendedSysState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot140(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtendedSysState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot140(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtendedSysState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot140(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot141(in *jlexer.Lexer, out *EstimatorStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "VelRatio":
			out.VelRatio = float32(in.Float32())
		case "PosHorizRatio":
			out.PosHorizRatio = float32(in.Float32())
		case "PosVertRatio":
			out.PosVertRatio = float32(in.Float32())
		case "MagRatio":
			out.MagRatio = float32(in.Float32())
		case "HaglRatio":
			out.HaglRatio = float32(in.Float32())
		case "TasRatio":
			out.TasRatio = float32(in.Float32())
		case "PosHorizAccuracy":
			out.PosHorizAccuracy = float32(in.Float32())
		case "PosVertAccuracy":
			out.PosVertAccuracy = float32(in.Float32())
		case "Flags":
			out.Flags = ESTIMATOR_STATUS_FLAGS(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot141(out *jwriter.Writer, in EstimatorStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"VelRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.VelRatio))
	}
	{
		const prefix string = ",\"PosHorizRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.PosHorizRatio))
	}
	{
		const prefix string = ",\"PosVertRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.PosVertRatio))
	}
	{
		const prefix string = ",\"MagRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.MagRatio))
	}
	{
		const prefix string = ",\"HaglRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.HaglRatio))
	}
	{
		const prefix string = ",\"TasRatio\":"
		out.RawString(prefix)
		out.Float32(float32(in.TasRatio))
	}
	{
		const prefix string = ",\"PosHorizAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.PosHorizAccuracy))
	}
	{
		const prefix string = ",\"PosVertAccuracy\":"
		out.RawString(prefix)
		out.Float32(float32(in.PosVertAccuracy))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EstimatorStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot141(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EstimatorStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot141(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EstimatorStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot141(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EstimatorStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot141(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot142(in *jlexer.Lexer, out *EncapsulatedData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Seqnr":
			out.Seqnr = uint16(in.Uint16())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot142(out *jwriter.Writer, in EncapsulatedData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Seqnr\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Seqnr))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EncapsulatedData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot142(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EncapsulatedData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot142(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EncapsulatedData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot142(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EncapsulatedData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot142(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot143(in *jlexer.Lexer, out *EfiStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "EcuIndex":
			out.EcuIndex = float32(in.Float32())
		case "Rpm":
			out.Rpm = float32(in.Float32())
		case "FuelConsumed":
			out.FuelConsumed = float32(in.Float32())
		case "FuelFlow":
			out.FuelFlow = float32(in.Float32())
		case "EngineLoad":
			out.EngineLoad = float32(in.Float32())
		case "ThrottlePosition":
			out.ThrottlePosition = float32(in.Float32())
		case "SparkDwellTime":
			out.SparkDwellTime = float32(in.Float32())
		case "BarometricPressure":
			out.BarometricPressure = float32(in.Float32())
		case "IntakeManifoldPressure":
			out.IntakeManifoldPressure = float32(in.Float32())
		case "IntakeManifoldTemperature":
			out.IntakeManifoldTemperature = float32(in.Float32())
		case "CylinderHeadTemperature":
			out.CylinderHeadTemperature = float32(in.Float32())
		case "IgnitionTiming":
			out.IgnitionTiming = float32(in.Float32())
		case "InjectionTime":
			out.InjectionTime = float32(in.Float32())
		case "ExhaustGasTemperature":
			out.ExhaustGasTemperature = float32(in.Float32())
		case "ThrottleOut":
			out.ThrottleOut = float32(in.Float32())
		case "PtCompensation":
			out.PtCompensation = float32(in.Float32())
		case "Health":
			out.Health = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot143(out *jwriter.Writer, in EfiStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"EcuIndex\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.EcuIndex))
	}
	{
		const prefix string = ",\"Rpm\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rpm))
	}
	{
		const prefix string = ",\"FuelConsumed\":"
		out.RawString(prefix)
		out.Float32(float32(in.FuelConsumed))
	}
	{
		const prefix string = ",\"FuelFlow\":"
		out.RawString(prefix)
		out.Float32(float32(in.FuelFlow))
	}
	{
		const prefix string = ",\"EngineLoad\":"
		out.RawString(prefix)
		out.Float32(float32(in.EngineLoad))
	}
	{
		const prefix string = ",\"ThrottlePosition\":"
		out.RawString(prefix)
		out.Float32(float32(in.ThrottlePosition))
	}
	{
		const prefix string = ",\"SparkDwellTime\":"
		out.RawString(prefix)
		out.Float32(float32(in.SparkDwellTime))
	}
	{
		const prefix string = ",\"BarometricPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.BarometricPressure))
	}
	{
		const prefix string = ",\"IntakeManifoldPressure\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntakeManifoldPressure))
	}
	{
		const prefix string = ",\"IntakeManifoldTemperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.IntakeManifoldTemperature))
	}
	{
		const prefix string = ",\"CylinderHeadTemperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.CylinderHeadTemperature))
	}
	{
		const prefix string = ",\"IgnitionTiming\":"
		out.RawString(prefix)
		out.Float32(float32(in.IgnitionTiming))
	}
	{
		const prefix string = ",\"InjectionTime\":"
		out.RawString(prefix)
		out.Float32(float32(in.InjectionTime))
	}
	{
		const prefix string = ",\"ExhaustGasTemperature\":"
		out.RawString(prefix)
		out.Float32(float32(in.ExhaustGasTemperature))
	}
	{
		const prefix string = ",\"ThrottleOut\":"
		out.RawString(prefix)
		out.Float32(float32(in.ThrottleOut))
	}
	{
		const prefix string = ",\"PtCompensation\":"
		out.RawString(prefix)
		out.Float32(float32(in.PtCompensation))
	}
	{
		const prefix string = ",\"Health\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Health))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EfiStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot143(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EfiStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot143(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EfiStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot143(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EfiStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot143(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot144(in *jlexer.Lexer, out *DistanceSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "MinDistance":
			out.MinDistance = uint16(in.Uint16())
		case "MaxDistance":
			out.MaxDistance = uint16(in.Uint16())
		case "CurrentDistance":
			out.CurrentDistance = uint16(in.Uint16())
		case "Type":
			out.Type = MAV_DISTANCE_SENSOR(in.Int())
		case "ID":
			out.ID = uint8(in.Uint8())
		case "Orientation":
			out.Orientation = MAV_SENSOR_ORIENTATION(in.Int())
		case "Covariance":
			out.Covariance = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot144(out *jwriter.Writer, in DistanceSensor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"MinDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MinDistance))
	}
	{
		const prefix string = ",\"MaxDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.MaxDistance))
	}
	{
		const prefix string = ",\"CurrentDistance\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.CurrentDistance))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ID))
	}
	{
		const prefix string = ",\"Orientation\":"
		out.RawString(prefix)
		out.Int(int(in.Orientation))
	}
	{
		const prefix string = ",\"Covariance\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Covariance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DistanceSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot144(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DistanceSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot144(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DistanceSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot144(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DistanceSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot144(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot145(in *jlexer.Lexer, out *DebugVect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot145(out *jwriter.Writer, in DebugVect) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DebugVect) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot145(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DebugVect) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot145(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DebugVect) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot145(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DebugVect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot145(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot146(in *jlexer.Lexer, out *Debug) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Value":
			out.Value = float32(in.Float32())
		case "Ind":
			out.Ind = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot146(out *jwriter.Writer, in Debug) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Float32(float32(in.Value))
	}
	{
		const prefix string = ",\"Ind\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Ind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Debug) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot146(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Debug) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot146(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Debug) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot146(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Debug) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot146(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot147(in *jlexer.Lexer, out *DataTransmissionHandshake) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Size":
			out.Size = uint32(in.Uint32())
		case "Width":
			out.Width = uint16(in.Uint16())
		case "Height":
			out.Height = uint16(in.Uint16())
		case "Packets":
			out.Packets = uint16(in.Uint16())
		case "Type":
			out.Type = MAVLINK_DATA_STREAM_TYPE(in.Int())
		case "Payload":
			out.Payload = uint8(in.Uint8())
		case "JpgQuality":
			out.JpgQuality = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot147(out *jwriter.Writer, in DataTransmissionHandshake) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Size))
	}
	{
		const prefix string = ",\"Width\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Width))
	}
	{
		const prefix string = ",\"Height\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Height))
	}
	{
		const prefix string = ",\"Packets\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Packets))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Payload))
	}
	{
		const prefix string = ",\"JpgQuality\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.JpgQuality))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataTransmissionHandshake) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot147(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataTransmissionHandshake) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot147(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataTransmissionHandshake) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot147(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataTransmissionHandshake) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot147(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot148(in *jlexer.Lexer, out *DataStream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MessageRate":
			out.MessageRate = uint16(in.Uint16())
		case "StreamID":
			out.StreamID = uint8(in.Uint8())
		case "OnOff":
			out.OnOff = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot148(out *jwriter.Writer, in DataStream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MessageRate\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.MessageRate))
	}
	{
		const prefix string = ",\"StreamID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.StreamID))
	}
	{
		const prefix string = ",\"OnOff\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.OnOff))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataStream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot148(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataStream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot148(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataStream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot148(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataStream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot148(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot149(in *jlexer.Lexer, out *ControlSystemState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "XAcc":
			out.XAcc = float32(in.Float32())
		case "YAcc":
			out.YAcc = float32(in.Float32())
		case "ZAcc":
			out.ZAcc = float32(in.Float32())
		case "XVel":
			out.XVel = float32(in.Float32())
		case "YVel":
			out.YVel = float32(in.Float32())
		case "ZVel":
			out.ZVel = float32(in.Float32())
		case "XPos":
			out.XPos = float32(in.Float32())
		case "YPos":
			out.YPos = float32(in.Float32())
		case "ZPos":
			out.ZPos = float32(in.Float32())
		case "Airspeed":
			out.Airspeed = float32(in.Float32())
		case "VelVariance":
			if in.IsNull() {
				in.Skip()
				out.VelVariance = nil
			} else {
				in.Delim('[')
				if out.VelVariance == nil {
					if !in.IsDelim(']') {
						out.VelVariance = make([]float32, 0, 16)
					} else {
						out.VelVariance = []float32{}
					}
				} else {
					out.VelVariance = (out.VelVariance)[:0]
				}
				for !in.IsDelim(']') {
					var v106 float32
					v106 = float32(in.Float32())
					out.VelVariance = append(out.VelVariance, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PosVariance":
			if in.IsNull() {
				in.Skip()
				out.PosVariance = nil
			} else {
				in.Delim('[')
				if out.PosVariance == nil {
					if !in.IsDelim(']') {
						out.PosVariance = make([]float32, 0, 16)
					} else {
						out.PosVariance = []float32{}
					}
				} else {
					out.PosVariance = (out.PosVariance)[:0]
				}
				for !in.IsDelim(']') {
					var v107 float32
					v107 = float32(in.Float32())
					out.PosVariance = append(out.PosVariance, v107)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v108 float32
					v108 = float32(in.Float32())
					out.Q = append(out.Q, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "RollRate":
			out.RollRate = float32(in.Float32())
		case "PitchRate":
			out.PitchRate = float32(in.Float32())
		case "YawRate":
			out.YawRate = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot149(out *jwriter.Writer, in ControlSystemState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"XAcc\":"
		out.RawString(prefix)
		out.Float32(float32(in.XAcc))
	}
	{
		const prefix string = ",\"YAcc\":"
		out.RawString(prefix)
		out.Float32(float32(in.YAcc))
	}
	{
		const prefix string = ",\"ZAcc\":"
		out.RawString(prefix)
		out.Float32(float32(in.ZAcc))
	}
	{
		const prefix string = ",\"XVel\":"
		out.RawString(prefix)
		out.Float32(float32(in.XVel))
	}
	{
		const prefix string = ",\"YVel\":"
		out.RawString(prefix)
		out.Float32(float32(in.YVel))
	}
	{
		const prefix string = ",\"ZVel\":"
		out.RawString(prefix)
		out.Float32(float32(in.ZVel))
	}
	{
		const prefix string = ",\"XPos\":"
		out.RawString(prefix)
		out.Float32(float32(in.XPos))
	}
	{
		const prefix string = ",\"YPos\":"
		out.RawString(prefix)
		out.Float32(float32(in.YPos))
	}
	{
		const prefix string = ",\"ZPos\":"
		out.RawString(prefix)
		out.Float32(float32(in.ZPos))
	}
	{
		const prefix string = ",\"Airspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Airspeed))
	}
	{
		const prefix string = ",\"VelVariance\":"
		out.RawString(prefix)
		if in.VelVariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v109, v110 := range in.VelVariance {
				if v109 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v110))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PosVariance\":"
		out.RawString(prefix)
		if in.PosVariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v111, v112 := range in.PosVariance {
				if v111 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v112))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v113, v114 := range in.Q {
				if v113 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v114))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"RollRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.RollRate))
	}
	{
		const prefix string = ",\"PitchRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.PitchRate))
	}
	{
		const prefix string = ",\"YawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.YawRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ControlSystemState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot149(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ControlSystemState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot149(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ControlSystemState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot149(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ControlSystemState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot149(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot150(in *jlexer.Lexer, out *CommandLong) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "Param5":
			out.Param5 = float32(in.Float32())
		case "Param6":
			out.Param6 = float32(in.Float32())
		case "Param7":
			out.Param7 = float32(in.Float32())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Confirmation":
			out.Confirmation = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot150(out *jwriter.Writer, in CommandLong) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Param1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	{
		const prefix string = ",\"Param2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param2))
	}
	{
		const prefix string = ",\"Param3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param3))
	}
	{
		const prefix string = ",\"Param4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param4))
	}
	{
		const prefix string = ",\"Param5\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param5))
	}
	{
		const prefix string = ",\"Param6\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param6))
	}
	{
		const prefix string = ",\"Param7\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param7))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Confirmation\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Confirmation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandLong) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot150(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandLong) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot150(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandLong) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot150(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandLong) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot150(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot151(in *jlexer.Lexer, out *CommandInt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Param1":
			out.Param1 = float32(in.Float32())
		case "Param2":
			out.Param2 = float32(in.Float32())
		case "Param3":
			out.Param3 = float32(in.Float32())
		case "Param4":
			out.Param4 = float32(in.Float32())
		case "X":
			out.X = int32(in.Int32())
		case "Y":
			out.Y = int32(in.Int32())
		case "Z":
			out.Z = float32(in.Float32())
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		case "Frame":
			out.Frame = MAV_FRAME(in.Int())
		case "Current":
			out.Current = uint8(in.Uint8())
		case "Autocontinue":
			out.Autocontinue = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot151(out *jwriter.Writer, in CommandInt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Param1\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Param1))
	}
	{
		const prefix string = ",\"Param2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param2))
	}
	{
		const prefix string = ",\"Param3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param3))
	}
	{
		const prefix string = ",\"Param4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Param4))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Int32(int32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Int32(int32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix)
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	{
		const prefix string = ",\"Frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	{
		const prefix string = ",\"Current\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Current))
	}
	{
		const prefix string = ",\"Autocontinue\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Autocontinue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandInt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot151(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandInt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot151(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandInt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot151(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandInt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot151(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot152(in *jlexer.Lexer, out *CommandCancel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "TargetComponent":
			out.TargetComponent = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot152(out *jwriter.Writer, in CommandCancel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"TargetComponent\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TargetComponent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandCancel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot152(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandCancel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot152(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandCancel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot152(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandCancel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot152(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot153(in *jlexer.Lexer, out *CommandAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Command":
			out.Command = MAV_CMD(in.Int())
		case "Result":
			out.Result = MAV_RESULT(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot153(out *jwriter.Writer, in CommandAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Command\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Command))
	}
	{
		const prefix string = ",\"Result\":"
		out.RawString(prefix)
		out.Int(int(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot153(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot153(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot153(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot153(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot154(in *jlexer.Lexer, out *Collision) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint32(in.Uint32())
		case "TimeToMinimumDelta":
			out.TimeToMinimumDelta = float32(in.Float32())
		case "AltitudeMinimumDelta":
			out.AltitudeMinimumDelta = float32(in.Float32())
		case "HorizontalMinimumDelta":
			out.HorizontalMinimumDelta = float32(in.Float32())
		case "Src":
			out.Src = MAV_COLLISION_SRC(in.Int())
		case "Action":
			out.Action = MAV_COLLISION_ACTION(in.Int())
		case "ThreatLevel":
			out.ThreatLevel = MAV_COLLISION_THREAT_LEVEL(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot154(out *jwriter.Writer, in Collision) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"TimeToMinimumDelta\":"
		out.RawString(prefix)
		out.Float32(float32(in.TimeToMinimumDelta))
	}
	{
		const prefix string = ",\"AltitudeMinimumDelta\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeMinimumDelta))
	}
	{
		const prefix string = ",\"HorizontalMinimumDelta\":"
		out.RawString(prefix)
		out.Float32(float32(in.HorizontalMinimumDelta))
	}
	{
		const prefix string = ",\"Src\":"
		out.RawString(prefix)
		out.Int(int(in.Src))
	}
	{
		const prefix string = ",\"Action\":"
		out.RawString(prefix)
		out.Int(int(in.Action))
	}
	{
		const prefix string = ",\"ThreatLevel\":"
		out.RawString(prefix)
		out.Int(int(in.ThreatLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collision) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot154(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collision) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot154(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collision) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot154(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collision) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot154(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot155(in *jlexer.Lexer, out *ChangeOperatorControlAck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GcsSystemID":
			out.GcsSystemID = uint8(in.Uint8())
		case "ControlRequest":
			out.ControlRequest = uint8(in.Uint8())
		case "Ack":
			out.Ack = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot155(out *jwriter.Writer, in ChangeOperatorControlAck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"GcsSystemID\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.GcsSystemID))
	}
	{
		const prefix string = ",\"ControlRequest\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ControlRequest))
	}
	{
		const prefix string = ",\"Ack\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Ack))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeOperatorControlAck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot155(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeOperatorControlAck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot155(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeOperatorControlAck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot155(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeOperatorControlAck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot155(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot156(in *jlexer.Lexer, out *ChangeOperatorControl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TargetSystem":
			out.TargetSystem = uint8(in.Uint8())
		case "ControlRequest":
			out.ControlRequest = uint8(in.Uint8())
		case "Version":
			out.Version = uint8(in.Uint8())
		case "Passkey":
			out.Passkey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot156(out *jwriter.Writer, in ChangeOperatorControl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TargetSystem\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.TargetSystem))
	}
	{
		const prefix string = ",\"ControlRequest\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ControlRequest))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Version))
	}
	{
		const prefix string = ",\"Passkey\":"
		out.RawString(prefix)
		out.String(string(in.Passkey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeOperatorControl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot156(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeOperatorControl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot156(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeOperatorControl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot156(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeOperatorControl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot156(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot157(in *jlexer.Lexer, out *CameraTrigger) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Seq":
			out.Seq = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot157(out *jwriter.Writer, in CameraTrigger) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Seq\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CameraTrigger) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot157(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CameraTrigger) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot157(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CameraTrigger) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot157(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CameraTrigger) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot157(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot158(in *jlexer.Lexer, out *BatteryStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CurrentConsumed":
			out.CurrentConsumed = int32(in.Int32())
		case "EnergyConsumed":
			out.EnergyConsumed = int32(in.Int32())
		case "Temperature":
			out.Temperature = int16(in.Int16())
		case "Voltages":
			if in.IsNull() {
				in.Skip()
				out.Voltages = nil
			} else {
				in.Delim('[')
				if out.Voltages == nil {
					if !in.IsDelim(']') {
						out.Voltages = make([]uint16, 0, 32)
					} else {
						out.Voltages = []uint16{}
					}
				} else {
					out.Voltages = (out.Voltages)[:0]
				}
				for !in.IsDelim(']') {
					var v115 uint16
					v115 = uint16(in.Uint16())
					out.Voltages = append(out.Voltages, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CurrentBattery":
			out.CurrentBattery = int16(in.Int16())
		case "ID":
			out.ID = uint8(in.Uint8())
		case "BatteryFunction":
			out.BatteryFunction = MAV_BATTERY_FUNCTION(in.Int())
		case "Type":
			out.Type = MAV_BATTERY_TYPE(in.Int())
		case "BatteryRemaining":
			out.BatteryRemaining = int8(in.Int8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot158(out *jwriter.Writer, in BatteryStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CurrentConsumed\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.CurrentConsumed))
	}
	{
		const prefix string = ",\"EnergyConsumed\":"
		out.RawString(prefix)
		out.Int32(int32(in.EnergyConsumed))
	}
	{
		const prefix string = ",\"Temperature\":"
		out.RawString(prefix)
		out.Int16(int16(in.Temperature))
	}
	{
		const prefix string = ",\"Voltages\":"
		out.RawString(prefix)
		if in.Voltages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v116, v117 := range in.Voltages {
				if v116 > 0 {
					out.RawByte(',')
				}
				out.Uint16(uint16(v117))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CurrentBattery\":"
		out.RawString(prefix)
		out.Int16(int16(in.CurrentBattery))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.ID))
	}
	{
		const prefix string = ",\"BatteryFunction\":"
		out.RawString(prefix)
		out.Int(int(in.BatteryFunction))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"BatteryRemaining\":"
		out.RawString(prefix)
		out.Int8(int8(in.BatteryRemaining))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatteryStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot158(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatteryStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot158(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatteryStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot158(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatteryStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot158(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot159(in *jlexer.Lexer, out *AutopilotVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Capabilities":
			out.Capabilities = MAV_PROTOCOL_CAPABILITY(in.Int())
		case "UID":
			out.UID = uint64(in.Uint64())
		case "FlightSwVersion":
			out.FlightSwVersion = uint32(in.Uint32())
		case "MiddlewareSwVersion":
			out.MiddlewareSwVersion = uint32(in.Uint32())
		case "OsSwVersion":
			out.OsSwVersion = uint32(in.Uint32())
		case "BoardVersion":
			out.BoardVersion = uint32(in.Uint32())
		case "VendorID":
			out.VendorID = uint16(in.Uint16())
		case "ProductID":
			out.ProductID = uint16(in.Uint16())
		case "FlightCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.FlightCustomVersion = nil
			} else {
				out.FlightCustomVersion = in.Bytes()
			}
		case "MiddlewareCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.MiddlewareCustomVersion = nil
			} else {
				out.MiddlewareCustomVersion = in.Bytes()
			}
		case "OsCustomVersion":
			if in.IsNull() {
				in.Skip()
				out.OsCustomVersion = nil
			} else {
				out.OsCustomVersion = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot159(out *jwriter.Writer, in AutopilotVersion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Capabilities\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Capabilities))
	}
	{
		const prefix string = ",\"UID\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UID))
	}
	{
		const prefix string = ",\"FlightSwVersion\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.FlightSwVersion))
	}
	{
		const prefix string = ",\"MiddlewareSwVersion\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MiddlewareSwVersion))
	}
	{
		const prefix string = ",\"OsSwVersion\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.OsSwVersion))
	}
	{
		const prefix string = ",\"BoardVersion\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.BoardVersion))
	}
	{
		const prefix string = ",\"VendorID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.VendorID))
	}
	{
		const prefix string = ",\"ProductID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ProductID))
	}
	{
		const prefix string = ",\"FlightCustomVersion\":"
		out.RawString(prefix)
		out.Base64Bytes(in.FlightCustomVersion)
	}
	{
		const prefix string = ",\"MiddlewareCustomVersion\":"
		out.RawString(prefix)
		out.Base64Bytes(in.MiddlewareCustomVersion)
	}
	{
		const prefix string = ",\"OsCustomVersion\":"
		out.RawString(prefix)
		out.Base64Bytes(in.OsCustomVersion)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutopilotVersion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot159(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutopilotVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot159(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutopilotVersion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot159(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutopilotVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot159(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot160(in *jlexer.Lexer, out *AuthKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot160(out *jwriter.Writer, in AuthKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot160(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot160(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot160(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot160(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot161(in *jlexer.Lexer, out *AttitudeTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v127 float32
					v127 = float32(in.Float32())
					out.Q = append(out.Q, v127)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BodyRollRate":
			out.BodyRollRate = float32(in.Float32())
		case "BodyPitchRate":
			out.BodyPitchRate = float32(in.Float32())
		case "BodyYawRate":
			out.BodyYawRate = float32(in.Float32())
		case "Thrust":
			out.Thrust = float32(in.Float32())
		case "TypeMask":
			out.TypeMask = ATTITUDE_TARGET_TYPEMASK(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot161(out *jwriter.Writer, in AttitudeTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v128, v129 := range in.Q {
				if v128 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v129))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BodyRollRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyRollRate))
	}
	{
		const prefix string = ",\"BodyPitchRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyPitchRate))
	}
	{
		const prefix string = ",\"BodyYawRate\":"
		out.RawString(prefix)
		out.Float32(float32(in.BodyYawRate))
	}
	{
		const prefix string = ",\"Thrust\":"
		out.RawString(prefix)
		out.Float32(float32(in.Thrust))
	}
	{
		const prefix string = ",\"TypeMask\":"
		out.RawString(prefix)
		out.Int(int(in.TypeMask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot161(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot161(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot161(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot161(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot162(in *jlexer.Lexer, out *AttitudeQuaternionCov) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v130 float32
					v130 = float32(in.Float32())
					out.Q = append(out.Q, v130)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		case "Covariance":
			if in.IsNull() {
				in.Skip()
				out.Covariance = nil
			} else {
				in.Delim('[')
				if out.Covariance == nil {
					if !in.IsDelim(']') {
						out.Covariance = make([]float32, 0, 16)
					} else {
						out.Covariance = []float32{}
					}
				} else {
					out.Covariance = (out.Covariance)[:0]
				}
				for !in.IsDelim(']') {
					var v131 float32
					v131 = float32(in.Float32())
					out.Covariance = append(out.Covariance, v131)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot162(out *jwriter.Writer, in AttitudeQuaternionCov) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v132, v133 := range in.Q {
				if v132 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v133))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	{
		const prefix string = ",\"Covariance\":"
		out.RawString(prefix)
		if in.Covariance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v134, v135 := range in.Covariance {
				if v134 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v135))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeQuaternionCov) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot162(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeQuaternionCov) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot162(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeQuaternionCov) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot162(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeQuaternionCov) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot162(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot163(in *jlexer.Lexer, out *AttitudeQuaternion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Q1":
			out.Q1 = float32(in.Float32())
		case "Q2":
			out.Q2 = float32(in.Float32())
		case "Q3":
			out.Q3 = float32(in.Float32())
		case "Q4":
			out.Q4 = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot163(out *jwriter.Writer, in AttitudeQuaternion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Q1\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q1))
	}
	{
		const prefix string = ",\"Q2\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q2))
	}
	{
		const prefix string = ",\"Q3\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q3))
	}
	{
		const prefix string = ",\"Q4\":"
		out.RawString(prefix)
		out.Float32(float32(in.Q4))
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttitudeQuaternion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot163(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttitudeQuaternion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot163(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttitudeQuaternion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot163(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttitudeQuaternion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot163(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot164(in *jlexer.Lexer, out *Attitude) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "Roll":
			out.Roll = float32(in.Float32())
		case "Pitch":
			out.Pitch = float32(in.Float32())
		case "Yaw":
			out.Yaw = float32(in.Float32())
		case "Rollspeed":
			out.Rollspeed = float32(in.Float32())
		case "Pitchspeed":
			out.Pitchspeed = float32(in.Float32())
		case "Yawspeed":
			out.Yawspeed = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot164(out *jwriter.Writer, in Attitude) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"Roll\":"
		out.RawString(prefix)
		out.Float32(float32(in.Roll))
	}
	{
		const prefix string = ",\"Pitch\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitch))
	}
	{
		const prefix string = ",\"Yaw\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yaw))
	}
	{
		const prefix string = ",\"Rollspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rollspeed))
	}
	{
		const prefix string = ",\"Pitchspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Pitchspeed))
	}
	{
		const prefix string = ",\"Yawspeed\":"
		out.RawString(prefix)
		out.Float32(float32(in.Yawspeed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attitude) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot164(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attitude) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot164(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attitude) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot164(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attitude) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot164(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot165(in *jlexer.Lexer, out *AttPosMocap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Q":
			if in.IsNull() {
				in.Skip()
				out.Q = nil
			} else {
				in.Delim('[')
				if out.Q == nil {
					if !in.IsDelim(']') {
						out.Q = make([]float32, 0, 16)
					} else {
						out.Q = []float32{}
					}
				} else {
					out.Q = (out.Q)[:0]
				}
				for !in.IsDelim(']') {
					var v136 float32
					v136 = float32(in.Float32())
					out.Q = append(out.Q, v136)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "X":
			out.X = float32(in.Float32())
		case "Y":
			out.Y = float32(in.Float32())
		case "Z":
			out.Z = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot165(out *jwriter.Writer, in AttPosMocap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Q\":"
		out.RawString(prefix)
		if in.Q == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v137, v138 := range in.Q {
				if v137 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v138))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.Float32(float32(in.X))
	}
	{
		const prefix string = ",\"Y\":"
		out.RawString(prefix)
		out.Float32(float32(in.Y))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.Float32(float32(in.Z))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttPosMocap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot165(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttPosMocap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot165(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttPosMocap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot165(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttPosMocap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot165(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot166(in *jlexer.Lexer, out *Altitudes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "AltGps":
			out.AltGps = int32(in.Int32())
		case "AltImu":
			out.AltImu = int32(in.Int32())
		case "AltBarometric":
			out.AltBarometric = int32(in.Int32())
		case "AltOpticalFlow":
			out.AltOpticalFlow = int32(in.Int32())
		case "AltRangeFinder":
			out.AltRangeFinder = int32(in.Int32())
		case "AltExtra":
			out.AltExtra = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot166(out *jwriter.Writer, in Altitudes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"AltGps\":"
		out.RawString(prefix)
		out.Int32(int32(in.AltGps))
	}
	{
		const prefix string = ",\"AltImu\":"
		out.RawString(prefix)
		out.Int32(int32(in.AltImu))
	}
	{
		const prefix string = ",\"AltBarometric\":"
		out.RawString(prefix)
		out.Int32(int32(in.AltBarometric))
	}
	{
		const prefix string = ",\"AltOpticalFlow\":"
		out.RawString(prefix)
		out.Int32(int32(in.AltOpticalFlow))
	}
	{
		const prefix string = ",\"AltRangeFinder\":"
		out.RawString(prefix)
		out.Int32(int32(in.AltRangeFinder))
	}
	{
		const prefix string = ",\"AltExtra\":"
		out.RawString(prefix)
		out.Int32(int32(in.AltExtra))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Altitudes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot166(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Altitudes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot166(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Altitudes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot166(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Altitudes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot166(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot167(in *jlexer.Lexer, out *Altitude) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "AltitudeMonotonic":
			out.AltitudeMonotonic = float32(in.Float32())
		case "AltitudeAmsl":
			out.AltitudeAmsl = float32(in.Float32())
		case "AltitudeLocal":
			out.AltitudeLocal = float32(in.Float32())
		case "AltitudeRelative":
			out.AltitudeRelative = float32(in.Float32())
		case "AltitudeTerrain":
			out.AltitudeTerrain = float32(in.Float32())
		case "BottomClearance":
			out.BottomClearance = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot167(out *jwriter.Writer, in Altitude) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"AltitudeMonotonic\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeMonotonic))
	}
	{
		const prefix string = ",\"AltitudeAmsl\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeAmsl))
	}
	{
		const prefix string = ",\"AltitudeLocal\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeLocal))
	}
	{
		const prefix string = ",\"AltitudeRelative\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeRelative))
	}
	{
		const prefix string = ",\"AltitudeTerrain\":"
		out.RawString(prefix)
		out.Float32(float32(in.AltitudeTerrain))
	}
	{
		const prefix string = ",\"BottomClearance\":"
		out.RawString(prefix)
		out.Float32(float32(in.BottomClearance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Altitude) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot167(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Altitude) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot167(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Altitude) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot167(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Altitude) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot167(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot168(in *jlexer.Lexer, out *Airspeeds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeBootMs":
			out.TimeBootMs = uint32(in.Uint32())
		case "AirspeedImu":
			out.AirspeedImu = int16(in.Int16())
		case "AirspeedPitot":
			out.AirspeedPitot = int16(in.Int16())
		case "AirspeedHotWire":
			out.AirspeedHotWire = int16(in.Int16())
		case "AirspeedUltrasonic":
			out.AirspeedUltrasonic = int16(in.Int16())
		case "Aoa":
			out.Aoa = int16(in.Int16())
		case "Aoy":
			out.Aoy = int16(in.Int16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot168(out *jwriter.Writer, in Airspeeds) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeBootMs\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.TimeBootMs))
	}
	{
		const prefix string = ",\"AirspeedImu\":"
		out.RawString(prefix)
		out.Int16(int16(in.AirspeedImu))
	}
	{
		const prefix string = ",\"AirspeedPitot\":"
		out.RawString(prefix)
		out.Int16(int16(in.AirspeedPitot))
	}
	{
		const prefix string = ",\"AirspeedHotWire\":"
		out.RawString(prefix)
		out.Int16(int16(in.AirspeedHotWire))
	}
	{
		const prefix string = ",\"AirspeedUltrasonic\":"
		out.RawString(prefix)
		out.Int16(int16(in.AirspeedUltrasonic))
	}
	{
		const prefix string = ",\"Aoa\":"
		out.RawString(prefix)
		out.Int16(int16(in.Aoa))
	}
	{
		const prefix string = ",\"Aoy\":"
		out.RawString(prefix)
		out.Int16(int16(in.Aoy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Airspeeds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot168(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Airspeeds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot168(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Airspeeds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot168(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Airspeeds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot168(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot169(in *jlexer.Lexer, out *AdsbVehicle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IcaoAddress":
			out.IcaoAddress = uint32(in.Uint32())
		case "Lat":
			out.Lat = int32(in.Int32())
		case "Lon":
			out.Lon = int32(in.Int32())
		case "Altitude":
			out.Altitude = int32(in.Int32())
		case "Heading":
			out.Heading = uint16(in.Uint16())
		case "HorVelocity":
			out.HorVelocity = uint16(in.Uint16())
		case "VerVelocity":
			out.VerVelocity = int16(in.Int16())
		case "Flags":
			out.Flags = ADSB_FLAGS(in.Int())
		case "Squawk":
			out.Squawk = uint16(in.Uint16())
		case "AltitudeType":
			out.AltitudeType = ADSB_ALTITUDE_TYPE(in.Int())
		case "Callsign":
			out.Callsign = string(in.String())
		case "EmitterType":
			out.EmitterType = ADSB_EMITTER_TYPE(in.Int())
		case "Tslc":
			out.Tslc = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot169(out *jwriter.Writer, in AdsbVehicle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IcaoAddress\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.IcaoAddress))
	}
	{
		const prefix string = ",\"Lat\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lat))
	}
	{
		const prefix string = ",\"Lon\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lon))
	}
	{
		const prefix string = ",\"Altitude\":"
		out.RawString(prefix)
		out.Int32(int32(in.Altitude))
	}
	{
		const prefix string = ",\"Heading\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Heading))
	}
	{
		const prefix string = ",\"HorVelocity\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.HorVelocity))
	}
	{
		const prefix string = ",\"VerVelocity\":"
		out.RawString(prefix)
		out.Int16(int16(in.VerVelocity))
	}
	{
		const prefix string = ",\"Flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	{
		const prefix string = ",\"Squawk\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Squawk))
	}
	{
		const prefix string = ",\"AltitudeType\":"
		out.RawString(prefix)
		out.Int(int(in.AltitudeType))
	}
	{
		const prefix string = ",\"Callsign\":"
		out.RawString(prefix)
		out.String(string(in.Callsign))
	}
	{
		const prefix string = ",\"EmitterType\":"
		out.RawString(prefix)
		out.Int(int(in.EmitterType))
	}
	{
		const prefix string = ",\"Tslc\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Tslc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdsbVehicle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot169(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdsbVehicle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot169(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdsbVehicle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot169(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdsbVehicle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot169(l, v)
}
func easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot170(in *jlexer.Lexer, out *ActuatorControlTarget) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TimeUsec":
			out.TimeUsec = uint64(in.Uint64())
		case "Controls":
			if in.IsNull() {
				in.Skip()
				out.Controls = nil
			} else {
				in.Delim('[')
				if out.Controls == nil {
					if !in.IsDelim(']') {
						out.Controls = make([]float32, 0, 16)
					} else {
						out.Controls = []float32{}
					}
				} else {
					out.Controls = (out.Controls)[:0]
				}
				for !in.IsDelim(']') {
					var v139 float32
					v139 = float32(in.Float32())
					out.Controls = append(out.Controls, v139)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GroupMlx":
			out.GroupMlx = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot170(out *jwriter.Writer, in ActuatorControlTarget) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TimeUsec\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.TimeUsec))
	}
	{
		const prefix string = ",\"Controls\":"
		out.RawString(prefix)
		if in.Controls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v140, v141 := range in.Controls {
				if v140 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v141))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GroupMlx\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.GroupMlx))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActuatorControlTarget) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot170(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActuatorControlTarget) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa90ddaeEncodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot170(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActuatorControlTarget) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot170(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActuatorControlTarget) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa90ddaeDecodeGithubComAsmyasnikovGoMavlinkMavlinkDialectsMatrixpilot170(l, v)
}
